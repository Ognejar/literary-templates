/**
 * @file       FarmWizardModal.js
 * @description –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ñ–µ—Ä–º—ã.
 * @author     AI Assistant
 * @version    1.0.0
 * @license    MIT
 * @dependencies obsidian, settingsService
 * @created    2025-01-09
 * @updated    2025-01-09
 * @docs       /docs/project.md
 */

// Modal, Setting, Notice –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä

class FarmWizardModal extends Modal {
    constructor(app, ModalClass, SettingClass, NoticeClass, projectRoot, onFinish) {
        super(app);
        this.Modal = ModalClass;
        this.Setting = SettingClass;
        this.Notice = NoticeClass;
        this.projectRoot = projectRoot;
        this.onFinish = onFinish;
        this.step = 0;
        this.data = {
            farmName: '',
            description: '',
            climate: '',
            dominantFaction: '',
            farmType: '',
            province: '',
            state: '',
            fields: '',
            status: '–¥–µ–π—Å—Ç–≤—É–µ—Ç', // –¥–µ–π—Å—Ç–≤—É–µ—Ç, –∑–∞–±—Ä–æ—à–µ–Ω–æ, —Ä–∞–∑—Ä—É—à–µ–Ω–æ
            statusReason: '', // –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–±—Ä–æ—à–µ–Ω–Ω–æ—Å—Ç–∏/—Ä–∞–∑—Ä—É—à–µ–Ω–∏—è
            products: [],
            livestock: [],
            methods: [],
            features: [],
        };
        this.config = {
            climates: [],
            factions: [],
            provinces: [],
            states: [],
            farmTypes: [
                '–ó–µ—Ä–Ω–æ–≤–∞—è —Ñ–µ—Ä–º–∞',
                '–ñ–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—á–µ—Å–∫–∞—è —Ñ–µ—Ä–º–∞',
                '–í–∏–Ω–æ–≥—Ä–∞–¥–Ω–∏–∫',
                '–†—ã–±–Ω–∞—è —Ñ–µ—Ä–º–∞',
                '–õ–µ—Å–Ω–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ',
                '–°–º–µ—à–∞–Ω–Ω–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ',
                '–°–∞–¥–æ–≤–∞—è —Ñ–µ—Ä–º–∞',
                '–û–≤–æ—â–Ω–∞—è —Ñ–µ—Ä–º–∞',
                '–î—Ä—É–≥–æ–µ'
            ],
            statuses: [
                { value: '–¥–µ–π—Å—Ç–≤—É–µ—Ç', label: '–î–µ–π—Å—Ç–≤—É–µ—Ç', icon: '‚úÖ' },
                { value: '–∑–∞–±—Ä–æ—à–µ–Ω–æ', label: '–ó–∞–±—Ä–æ—à–µ–Ω–æ', icon: 'üèöÔ∏è' },
                { value: '—Ä–∞–∑—Ä—É—à–µ–Ω–æ', label: '–†–∞–∑—Ä—É—à–µ–Ω–æ', icon: 'üí•' }
            ]
        };
    }

    async onOpen() {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.modalEl.style.cssText = `
            max-width: 900px !important;
            width: 900px !important;
        `;
        this.contentEl.style.cssText = `
            padding: 20px;
            max-width: 900px !important;
            max-height: 80vh;
            overflow-y: auto;
        `;
        
        this.contentEl.empty();
        this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–µ—Ä–º—ã');
        await this.loadConfig();
        this.render();
    }

    async loadConfig() {
        try {
            if (!this.projectRoot) {
                new this.Notice('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç.');
                this.close();
                return;
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º settingsService –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if (window.litSettingsService) {
                this.config.climates = await window.litSettingsService.getClimates(this.app, this.projectRoot) || [];
                this.config.factions = await window.litSettingsService.getFactions(this.app, this.projectRoot) || [];
            } else {
                // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
                const settingsFile = this.app.vault.getAbstractFileByPath(`${this.projectRoot}/–ù–∞—Å—Ç—Ä–æ–π–∫–∏_–º–∏—Ä–∞.md`);
                if (settingsFile instanceof TFile) {
                    const content = await this.app.vault.read(settingsFile);
                    const configMatch = content.match(/```json\n([\s\S]*?)\n```/);
                    if (configMatch && configMatch[1]) {
                        const parsedConfig = JSON.parse(configMatch[1]);
                        this.config.climates = parsedConfig.locations?.climates || [];
                        this.config.factions = parsedConfig.locations?.factions || [];
                    }
                }
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
            const provincesFolder = `${this.projectRoot}/–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏`;
            const provincesFolderObj = this.app.vault.getAbstractFileByPath(provincesFolder);
            if (provincesFolderObj && provincesFolderObj.children) {
                this.config.provinces = provincesFolderObj.children
                    .filter(f => f instanceof TFile && f.extension === 'md')
                    .map(f => f.basename);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞
            const statesFolder = `${this.projectRoot}/–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞`;
            const statesFolderObj = this.app.vault.getAbstractFileByPath(statesFolder);
            if (statesFolderObj && statesFolderObj.children) {
                this.config.states = statesFolderObj.children
                    .filter(f => f instanceof TFile && f.extension === 'md')
                    .map(f => f.basename);
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            this.data.climate = this.data.climate || (this.config.climates[0] || '');
            this.data.dominantFaction = this.data.dominantFaction || (this.config.factions[0] || '');
            this.data.farmType = this.data.farmType || (this.config.farmTypes[0] || '');

            console.log('DEBUG: FarmWizardModal - Config loaded. climates:', this.config.climates, 'factions:', this.config.factions);
            console.log('DEBUG: FarmWizardModal - Data initialized. climate:', this.data.climate, 'dominantFaction:', this.data.dominantFaction);
        } catch (e) {
            new this.Notice('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ' + e.message);
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', e);
            this.close();
        }
    }

    render() {
        this.contentEl.empty();
        const { contentEl } = this;
        let navButtons = '';

        switch (this.step) {
            case 0:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–µ—Ä–º—ã - –®–∞–≥ 1/8: –ù–∞–∑–≤–∞–Ω–∏–µ');
                this.renderFarmName(contentEl);
                navButtons = '<button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 1:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–µ—Ä–º—ã - –®–∞–≥ 2/8: –ö–ª–∏–º–∞—Ç –∏ —Ñ—Ä–∞–∫—Ü–∏—è');
                this.renderClimateFaction(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 2:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–µ—Ä–º—ã - –®–∞–≥ 3/8: –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è');
                this.renderStateProvince(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 3:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–µ—Ä–º—ã - –®–∞–≥ 4/8: –û–ø–∏—Å–∞–Ω–∏–µ');
                this.renderDescription(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 4:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–µ—Ä–º—ã - –®–∞–≥ 5/8: –¢–∏–ø —Ñ–µ—Ä–º—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π');
                this.renderFarmTypeFields(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 5:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–µ—Ä–º—ã - –®–∞–≥ 6/8: –°—Ç–∞—Ç—É—Å —Ñ–µ—Ä–º—ã');
                this.renderStatus(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 6:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–µ—Ä–º—ã - –®–∞–≥ 7/8: –ü—Ä–æ–¥—É–∫—Ü–∏—è, –∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–æ –∏ –º–µ—Ç–æ–¥—ã');
                this.renderProductsLivestockMethods(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 7:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–µ—Ä–º—ã - –®–∞–≥ 8/8: –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏');
                this.renderFeatures(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 8:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–µ—Ä–º—ã - –®–∞–≥ 9/9: –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä');
                this.renderPreview(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta">–°–æ–∑–¥–∞—Ç—å</button>';
                break;
            default:
                break;
        }

        this.renderNav(contentEl, navButtons);
    }

    renderFarmName(contentEl) {
        new this.Setting(contentEl)
            .setName('–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–µ—Ä–º—ã')
            .addText(text => {
                text.setPlaceholder('–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–µ—Ä–º—ã')
                    .setValue(this.data.farmName)
                    .onChange(value => {
                        this.data.farmName = value;
                    });
                text.inputEl.style.width = '100%';
                text.inputEl.style.fontSize = '16px';
                text.inputEl.style.padding = '8px';
            });
    }

    renderClimateFaction(contentEl) {
        new this.Setting(contentEl)
            .setName('–ö–ª–∏–º–∞—Ç')
            .addDropdown(dropdown => {
                this.config.climates.forEach(climate => dropdown.addOption(climate, climate));
                dropdown.setValue(this.data.climate || this.config.climates[0]);
                dropdown.onChange(value => this.data.climate = value);
                dropdown.selectEl.style.minWidth = '280px';
                dropdown.selectEl.style.fontSize = '14px';
                dropdown.selectEl.style.padding = '6px';
            });

        new this.Setting(contentEl)
            .setName('–î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —Ñ—Ä–∞–∫—Ü–∏—è')
            .addDropdown(dropdown => {
                this.config.factions.forEach(faction => dropdown.addOption(faction, faction));
                dropdown.setValue(this.data.dominantFaction || this.config.factions[0]);
                dropdown.onChange(value => this.data.dominantFaction = value);
                dropdown.selectEl.style.minWidth = '280px';
                dropdown.selectEl.style.fontSize = '14px';
                dropdown.selectEl.style.padding = '6px';
            });
    }

    renderStateProvince(contentEl) {
        new this.Setting(contentEl)
            .setName('–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ')
            .addDropdown(dropdown => {
                dropdown.addOption('', '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ');
                this.config.states.forEach(state => dropdown.addOption(state, state));
                dropdown.setValue(this.data.state);
                dropdown.onChange(value => this.data.state = value);
                dropdown.selectEl.style.minWidth = '320px';
                dropdown.selectEl.style.fontSize = '14px';
                dropdown.selectEl.style.padding = '6px';
            });

        new this.Setting(contentEl)
            .setName('–ü—Ä–æ–≤–∏–Ω—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
            .addDropdown(dropdown => {
                dropdown.addOption('', '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
                this.config.provinces.forEach(province => dropdown.addOption(province, province));
                dropdown.setValue(this.data.province);
                dropdown.onChange(value => this.data.province = value);
                dropdown.selectEl.style.minWidth = '320px';
                dropdown.selectEl.style.fontSize = '14px';
                dropdown.selectEl.style.padding = '6px';
            });
    }

    renderDescription(contentEl) {
        new this.Setting(contentEl)
            .setName('–û–ø–∏—Å–∞–Ω–∏–µ')
            .addTextArea(text => {
                text.setPlaceholder('–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–µ—Ä–º—ã')
                    .setValue(this.data.description)
                    .onChange(value => {
                        this.data.description = value;
                    });
                text.inputEl.style.width = '100%';
                text.inputEl.style.minHeight = '140px';
                text.inputEl.style.fontSize = '14px';
                text.inputEl.style.lineHeight = '1.4';
                text.inputEl.style.padding = '8px';
            });
    }

    renderFarmTypeFields(contentEl) {
        new this.Setting(contentEl)
            .setName('–¢–∏–ø —Ñ–µ—Ä–º—ã')
            .addDropdown(dropdown => {
                this.config.farmTypes.forEach(type => dropdown.addOption(type, type));
                dropdown.setValue(this.data.farmType || this.config.farmTypes[0]);
                dropdown.onChange(value => this.data.farmType = value);
                dropdown.selectEl.style.minWidth = '320px';
                dropdown.selectEl.style.fontSize = '14px';
                dropdown.selectEl.style.padding = '6px';
            });

        new this.Setting(contentEl)
            .setName('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π')
            .addText(text => {
                text.setPlaceholder('–ù–∞–ø—Ä–∏–º–µ—Ä: 10')
                    .setValue(this.data.fields)
                    .onChange(value => {
                        this.data.fields = value;
                    });
                text.inputEl.style.width = '100%';
                text.inputEl.style.fontSize = '16px';
                text.inputEl.style.padding = '8px';
            });
    }

    renderStatus(contentEl) {
        new this.Setting(contentEl)
            .setName('–°—Ç–∞—Ç—É—Å —Ñ–µ—Ä–º—ã')
            .addDropdown(dropdown => {
                this.config.statuses.forEach(status => {
                    dropdown.addOption(status.value, `${status.icon} ${status.label}`);
                });
                dropdown.setValue(this.data.status);
                dropdown.onChange(value => {
                    this.data.status = value;
                    // –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –ø—Ä–∏—á–∏–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                    const reasonSetting = contentEl.querySelector('.status-reason-setting');
                    if (reasonSetting) {
                        reasonSetting.style.display = value === '–¥–µ–π—Å—Ç–≤—É–µ—Ç' ? 'none' : 'block';
                    }
                });
                dropdown.selectEl.style.minWidth = '320px';
                dropdown.selectEl.style.fontSize = '14px';
                dropdown.selectEl.style.padding = '6px';
            });

        const reasonSetting = new this.Setting(contentEl)
            .setName('–ü—Ä–∏—á–∏–Ω–∞')
            .addText(text => {
                text.setPlaceholder('–ù–∞–ø—Ä–∏–º–µ—Ä: –ò—Å—Ç–æ—â–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤, –≤–æ–π–Ω–∞, –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞')
                    .setValue(this.data.statusReason)
                    .onChange(value => {
                        this.data.statusReason = value;
                    });
                text.inputEl.style.width = '100%';
                text.inputEl.style.fontSize = '16px';
                text.inputEl.style.padding = '8px';
            });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç—å—é
        reasonSetting.settingEl.addClass('status-reason-setting');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –ø—Ä–∏—á–∏–Ω—ã, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–¥–µ–π—Å—Ç–≤—É–µ—Ç"
        if (this.data.status === '–¥–µ–π—Å—Ç–≤—É–µ—Ç') {
            reasonSetting.settingEl.style.display = 'none';
        }
    }

    renderProductsLivestockMethods(contentEl) {
        new this.Setting(contentEl)
            .setName('–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
            .addTextArea(text => {
                text.setPlaceholder('–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—à–µ–Ω–∏—Ü–∞, —è—á–º–µ–Ω—å, –æ–≤–µ—Å')
                    .setValue(this.data.products.join(', '))
                    .onChange(value => {
                        this.data.products = value.split(',').map(s => s.trim()).filter(Boolean);
                    });
                text.inputEl.style.width = '100%';
                text.inputEl.style.minHeight = '120px';
                text.inputEl.style.fontSize = '14px';
                text.inputEl.style.lineHeight = '1.4';
                text.inputEl.style.padding = '8px';
            });

        new this.Setting(contentEl)
            .setName('–ñ–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–æ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
            .addTextArea(text => {
                text.setPlaceholder('–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ—Ä–æ–≤—ã, –æ–≤—Ü—ã, –∫—É—Ä—ã')
                    .setValue(this.data.livestock.join(', '))
                    .onChange(value => {
                        this.data.livestock = value.split(',').map(s => s.trim()).filter(Boolean);
                    });
                text.inputEl.style.width = '100%';
                text.inputEl.style.minHeight = '120px';
                text.inputEl.style.fontSize = '14px';
                text.inputEl.style.lineHeight = '1.4';
                text.inputEl.style.padding = '8px';
            });

        new this.Setting(contentEl)
            .setName('–ú–µ—Ç–æ–¥—ã –≤–µ–¥–µ–Ω–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
            .addTextArea(text => {
                text.setPlaceholder('–ù–∞–ø—Ä–∏–º–µ—Ä: –¢—Ä–µ—Ö–ø–æ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –æ—Ä–æ—à–µ–Ω–∏–µ, —Å–µ–≤–æ–æ–±–æ—Ä–æ—Ç')
                    .setValue(this.data.methods.join(', '))
                    .onChange(value => {
                        this.data.methods = value.split(',').map(s => s.trim()).filter(Boolean);
                    });
                text.inputEl.style.width = '100%';
                text.inputEl.style.minHeight = '120px';
                text.inputEl.style.fontSize = '14px';
                text.inputEl.style.lineHeight = '1.4';
                text.inputEl.style.padding = '8px';
            });
    }

    renderFeatures(contentEl) {
        const featureContainer = contentEl.createEl('div', { cls: 'features-container' });
        new this.Setting(featureContainer)
            .setName('–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)')
            .addTextArea(text => {
                text.setPlaceholder('–î–æ–±–∞–≤—å—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏')
                    .setValue(this.data.features.join('\n'))
                    .onChange(value => {
                        this.data.features = value.split('\n').map(f => f.trim()).filter(f => f.length > 0);
                    });
            });
    }

    renderPreview(contentEl) {
        const previewEl = contentEl.createEl('div', { cls: 'preview-section' });
        previewEl.createEl('h3', { text: '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:' });
        previewEl.createEl('p', { text: `**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${this.data.farmName}` });
        previewEl.createEl('p', { text: `**–ö–ª–∏–º–∞—Ç:** ${this.data.climate}` });
        previewEl.createEl('p', { text: `**–î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —Ñ—Ä–∞–∫—Ü–∏—è:** ${this.data.dominantFaction}` });
        if (this.data.state) {
            previewEl.createEl('p', { text: `**–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ:** ${this.data.state}` });
        }
        if (this.data.province) {
            previewEl.createEl('p', { text: `**–ü—Ä–æ–≤–∏–Ω—Ü–∏—è:** ${this.data.province}` });
        }
        previewEl.createEl('p', { text: `**–û–ø–∏—Å–∞–Ω–∏–µ:** ${this.data.description.substring(0, 100)}...` });
        previewEl.createEl('p', { text: `**–¢–∏–ø —Ñ–µ—Ä–º—ã:** ${this.data.farmType}` });
        previewEl.createEl('p', { text: `**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π:** ${this.data.fields}` });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏—á–∏–Ω—É
        const statusLabel = this.config.statuses.find(s => s.value === this.data.status)?.label || this.data.status;
        previewEl.createEl('p', { text: `**–°—Ç–∞—Ç—É—Å:** ${statusLabel}` });
        
        if (this.data.status !== '–¥–µ–π—Å—Ç–≤—É–µ—Ç' && this.data.statusReason) {
            previewEl.createEl('p', { text: `**–ü—Ä–∏—á–∏–Ω–∞:** ${this.data.statusReason}` });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Ñ–µ—Ä–º
        if (this.data.status === '–¥–µ–π—Å—Ç–≤—É–µ—Ç') {
            previewEl.createEl('p', { text: `**–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è:** ${this.data.products.join(', ')}` });
            previewEl.createEl('p', { text: `**–ñ–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–æ:** ${this.data.livestock.join(', ')}` });
            previewEl.createEl('p', { text: `**–ú–µ—Ç–æ–¥—ã –≤–µ–¥–µ–Ω–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞:** ${this.data.methods.join(', ')}` });
        }
        
        previewEl.createEl('p', { text: `**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:** ${this.data.features.join(', ')}` });
    }

    renderNav(contentEl, buttonsHtml) {
        const navEl = contentEl.createEl('div', { cls: 'modal-nav' });
        navEl.innerHTML = buttonsHtml;

        navEl.querySelector('#prev')?.addEventListener('click', () => {
            this.step--;
            this.render();
        });

        navEl.querySelector('#next')?.addEventListener('click', () => {
            if (this.validateCurrentStep()) {
                this.step++;
                this.render();
            }
        });

        navEl.querySelector('.mod-cta:not(#next)')?.addEventListener('click', () => {
            if (this.validateCurrentStep()) {
                this.onFinish(this.data);
                this.close();
            }
        });
    }

    validateCurrentStep() {
        switch (this.step) {
            case 0: // Farm Name
                if (!this.data.farmName.trim()) {
                    new this.Notice('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–µ—Ä–º—ã.');
                    return false;
                }
                break;
            case 1: // Climate and Faction
                if (!this.data.climate || !this.data.dominantFaction) {
                    new this.Notice('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–º–∞—Ç –∏ –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —Ñ—Ä–∞–∫—Ü–∏—é.');
                    return false;
                }
                break;
            case 2: // State and Province
                if (!this.data.state) {
                    new this.Notice('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ.');
                    return false;
                }
                break;
            case 3: // Description
                if (!this.data.description.trim()) {
                    new this.Notice('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–µ—Ä–º—ã.');
                    return false;
                }
                break;
            case 4: // Farm Type and Fields
                if (!this.data.farmType.trim()) {
                    new this.Notice('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ñ–µ—Ä–º—ã.');
                    return false;
                }
                if (!this.data.fields.trim() || isNaN(Number(this.data.fields))) {
                    new this.Notice('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π (—á–∏—Å–ª–æ–º).');
                    return false;
                }
                break;
            case 5: // Status
                if (!this.data.status) {
                    new this.Notice('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å —Ñ–µ—Ä–º—ã.');
                    return false;
                }
                if (this.data.status !== '–¥–µ–π—Å—Ç–≤—É–µ—Ç' && !this.data.statusReason.trim()) {
                    new this.Notice('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–±—Ä–æ—à–µ–Ω–Ω–æ—Å—Ç–∏/—Ä–∞–∑—Ä—É—à–µ–Ω–∏—è.');
                    return false;
                }
                break;
            case 6: // Products, Livestock and Methods (optional)
                // Nothing to validate, as they are optional
                break;
            case 7: // Features (optional)
                // Nothing to validate, as they are optional
                break;
        }
        return true;
    }

    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}

module.exports = FarmWizardModal;
