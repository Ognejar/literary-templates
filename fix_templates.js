// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã country –Ω–∞ state –≤–æ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–∞—Ö
// –ó–∞–ø—É—Å–∫–∞—Ç—å –≤ Obsidian Developer Console

const templatesDir = 'templates';
const files = [
    '–ù–æ–≤–∞—è_–ª–æ–∫–∞—Ü–∏—è.md',
    '–ù–æ–≤—ã–π_–∑–∞–º–æ–∫.md',
    '–ù–æ–≤–∞—è_–º–µ—Ä—Ç–≤–∞—è_–∑–æ–Ω–∞.md',
    '–ù–æ–≤–∞—è_—Ñ–µ—Ä–º–∞.md',
    '–ù–æ–≤–∞—è_—à–∞—Ö—Ç–∞.md',
    '–ù–æ–≤—ã–π_–ø–æ—Ä—Ç.md',
    '–ù–æ–≤–∞—è_—Ñ–æ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.md',
    '–ù–æ–≤—ã–π_–∑–∞–≤–æ–¥.md',
    '–ù–æ–≤—ã–π_—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π_–æ–±—ä–µ–∫—Ç.md'
];

console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–º–µ–Ω—É country -> state –≤ —à–∞–±–ª–æ–Ω–∞—Ö...');

files.forEach(async (filename) => {
    try {
        const filePath = `${templatesDir}/${filename}`;
        const file = app.vault.getAbstractFileByPath(filePath);
        
        if (file && file instanceof TFile) {
            const content = await app.vault.read(file);
            
            // –ó–∞–º–µ–Ω—è–µ–º country –Ω–∞ state
            let newContent = content
                .replace(/country:\s*"{{country}}"/g, 'state: "{{state}}"')
                .replace(/country:\s*"{{state}}"/g, 'state: "{{state}}"')
                .replace(/country:\s*{{country}}/g, 'state: {{state}}')
                .replace(/country:\s*{{state}}/g, 'state: {{state}}')
                .replace(/this\.country/g, 'this.state')
                .replace(/AND country = this\.country/g, 'AND state = this.state')
                .replace(/country = this\.country/g, 'state = this.state');
            
            if (newContent !== content) {
                await app.vault.modify(file, newContent);
                console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filename}`);
            } else {
                console.log(`‚ÑπÔ∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${filename}`);
            }
        } else {
            console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filename}`);
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filename}:`, error);
    }
});

console.log('üéâ –ó–∞–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
