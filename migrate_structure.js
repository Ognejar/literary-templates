// –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
// –ó–∞–ø—É—Å–∫–∞—Ç—å –≤ Obsidian —á–µ—Ä–µ–∑ Developer Console

(function() {
    'use strict';
    
    // –í Developer Console app –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
    const app = window.app || this.app;
    const vault = app.vault;
    
    if (!app || !vault) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Obsidian API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –≤ Developer Console Obsidian.');
        return;
    }
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫...');
    
    // –ö–∞—Ä—Ç–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π: —Å—Ç–∞—Ä—ã–π_–ø—É—Ç—å -> –Ω–æ–≤—ã–π_–ø—É—Ç—å
    const migrations = [
        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –õ–æ–∫–∞—Ü–∏–∏/
        { from: '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞', to: '–õ–æ–∫–∞—Ü–∏–∏/–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞' },
        { from: '–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏', to: '–õ–æ–∫–∞—Ü–∏–∏/–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏' },
        { from: '–§—Ä–∞–∫—Ü–∏–∏', to: '–õ–æ–∫–∞—Ü–∏–∏/–§—Ä–∞–∫—Ü–∏–∏' },
        { from: '–¢–æ—Ä–≥–æ–≤—ã–µ_–ø—É—Ç–∏', to: '–õ–æ–∫–∞—Ü–∏–∏/–¢–æ—Ä–≥–æ–≤—ã–µ_–ø—É—Ç–∏' },
        
        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –†—É–∫–æ–ø–∏—Å—å/
        { from: '–ì–ª–∞–≤—ã', to: '1_–†—É–∫–æ–ø–∏—Å—å/–ì–ª–∞–≤—ã' },
        { from: '–°–æ–±—ã—Ç–∏—è', to: '1_–†—É–∫–æ–ø–∏—Å—å/–°–æ–±—ã—Ç–∏—è' },
        { from: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã', to: '1_–†—É–∫–æ–ø–∏—Å—å/–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã' },
        { from: '–ö–≤–µ—Å—Ç—ã', to: '1_–†—É–∫–æ–ø–∏—Å—å/–ö–≤–µ—Å—Ç—ã' }
    ];
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–∞–ø–æ–∫
    const newFolders = [
        '1_–†—É–∫–æ–ø–∏—Å—å',
        '–õ–æ–∫–∞—Ü–∏–∏',
        '–õ–æ–∫–∞—Ü–∏–∏/–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞',
        '–õ–æ–∫–∞—Ü–∏–∏/–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏', 
        '–õ–æ–∫–∞—Ü–∏–∏/–§—Ä–∞–∫—Ü–∏–∏',
        '–õ–æ–∫–∞—Ü–∏–∏/–¢–æ—Ä–≥–æ–≤—ã–µ_–ø—É—Ç–∏',
        '–õ–æ–∫–∞—Ü–∏–∏/–ì–æ—Ä–æ–¥–∞',
        '–õ–æ–∫–∞—Ü–∏–∏/–î–µ—Ä–µ–≤–Ω–∏',
        '–õ–æ–∫–∞—Ü–∏–∏/–ó–∞–º–∫–∏',
        '–õ–æ–∫–∞—Ü–∏–∏/–ü–æ—Ä—Ç—ã',
        '–õ–æ–∫–∞—Ü–∏–∏/–®–∞—Ö—Ç—ã',
        '–õ–æ–∫–∞—Ü–∏–∏/–§–µ—Ä–º—ã',
        '–õ–æ–∫–∞—Ü–∏–∏/–ó–∞–≤–æ–¥—ã',
        '–õ–æ–∫–∞—Ü–∏–∏/–ú—ë—Ä—Ç–≤—ã–µ_–∑–æ–Ω—ã',
        '1_–†—É–∫–æ–ø–∏—Å—å/–ì–ª–∞–≤—ã',
        '1_–†—É–∫–æ–ø–∏—Å—å/–°–æ–±—ã—Ç–∏—è',
        '1_–†—É–∫–æ–ø–∏—Å—å/–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã',
        '1_–†—É–∫–æ–ø–∏—Å—å/–ö–≤–µ—Å—Ç—ã'
    ];
    
    async function createFolders() {
        console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–∞–ø–æ–∫...');
        
        for (const folderPath of newFolders) {
            try {
                const folder = vault.getAbstractFileByPath(folderPath);
                if (!folder) {
                    await vault.createFolder(folderPath);
                    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${folderPath}`);
                } else {
                    console.log(`‚ÑπÔ∏è –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${folderPath}`);
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ ${folderPath}:`, error);
            }
        }
    }
    
    async function migrateFiles() {
        console.log('üì¶ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...');
        
        for (const migration of migrations) {
            try {
                const sourceFolder = vault.getAbstractFileByPath(migration.from);
                if (!sourceFolder || !sourceFolder.children) {
                    console.log(`‚ÑπÔ∏è –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${migration.from}`);
                    continue;
                }
                
                console.log(`üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–∑ ${migration.from} –≤ ${migration.to}...`);
                
                for (const file of sourceFolder.children) {
                    if (file.extension === 'md') {
                        const newPath = `${migration.to}/${file.name}`;
                        
                        try {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ
                            const existingFile = vault.getAbstractFileByPath(newPath);
                            if (existingFile) {
                                console.warn(`‚ö†Ô∏è –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${newPath}`);
                                continue;
                            }
                            
                            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
                            await vault.rename(file, newPath);
                            console.log(`‚úÖ –ü–µ—Ä–µ–º–µ—â—ë–Ω: ${file.path} ‚Üí ${newPath}`);
                            
                        } catch (error) {
                            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è ${file.path}:`, error);
                        }
                    }
                }
                
                // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –∏—Å—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
                if (sourceFolder.children.length === 0) {
                    await vault.delete(sourceFolder);
                    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–∞–ø–∫–∞: ${migration.from}`);
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ ${migration.from}:`, error);
            }
        }
    }
    
    async function migrateScenes() {
        console.log('üé≠ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω –≤ –≥–ª–∞–≤—ã...');
        
        try {
            const scenesFolder = vault.getAbstractFileByPath('–°—Ü–µ–Ω—ã');
            if (!scenesFolder || !scenesFolder.children) {
                console.log('‚ÑπÔ∏è –ü–∞–ø–∫–∞ –°—Ü–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤
            const chaptersFolder = vault.getAbstractFileByPath('1_–†—É–∫–æ–ø–∏—Å—å/–ì–ª–∞–≤—ã');
            if (!chaptersFolder || !chaptersFolder.children) {
                console.log('‚ÑπÔ∏è –ü–∞–ø–∫–∞ –≥–ª–∞–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }
            
            const chapters = chaptersFolder.children.filter(f => f.extension === 'md' && f.basename !== '–ì–ª–∞–≤—ã');
            
            for (const scene of scenesFolder.children) {
                if (scene.extension !== 'md') continue;
                
                // –ò—â–µ–º –≥–ª–∞–≤—É –ø–æ —Ç–µ–≥—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
                let targetChapter = null;
                
                try {
                    const sceneContent = await vault.read(scene);
                    const chapterMatch = sceneContent.match(/#–≥–ª–∞–≤–∞[:\s]+([^\n\r]+)/);
                    
                    if (chapterMatch) {
                        const chapterName = chapterMatch[1].trim();
                        targetChapter = chapters.find(c => c.basename.includes(chapterName));
                    }
                } catch (error) {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ü–µ–Ω—ã ${scene.path}:`, error);
                }
                
                if (!targetChapter) {
                    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–µ–≥—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –≥–ª–∞–≤—É
                    targetChapter = chapters[0];
                }
                
                if (targetChapter) {
                    const newPath = `${targetChapter.parent.path}/–°—Ü–µ–Ω—ã/${scene.name}`;
                    
                    try {
                        // –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –°—Ü–µ–Ω—ã –≤ –≥–ª–∞–≤–µ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                        const scenesInChapter = vault.getAbstractFileByPath(`${targetChapter.parent.path}/–°—Ü–µ–Ω—ã`);
                        if (!scenesInChapter) {
                            await vault.createFolder(`${targetChapter.parent.path}/–°—Ü–µ–Ω—ã`);
                        }
                        
                        await vault.rename(scene, newPath);
                        console.log(`‚úÖ –°—Ü–µ–Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞: ${scene.path} ‚Üí ${newPath}`);
                        
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—Ü–µ–Ω—ã ${scene.path}:`, error);
                    }
                }
            }
            
            // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –ø–∞–ø–∫—É –°—Ü–µ–Ω—ã
            if (scenesFolder.children.length === 0) {
                await vault.delete(scenesFolder);
                console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–∞–ø–∫–∞: –°—Ü–µ–Ω—ã');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω:', error);
        }
    }
    
    async function updateTags() {
        console.log('üè∑Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤...');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ markdown —Ñ–∞–π–ª—ã
        const files = vault.getMarkdownFiles();
        
        for (const file of files) {
            try {
                const content = await vault.read(file);
                let updated = false;
                let newContent = content;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                const tagUpdates = [
                    { old: '#–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ', new: '#–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ #–ª–æ–∫–∞—Ü–∏—è' },
                    { old: '#–ø—Ä–æ–≤–∏–Ω—Ü–∏—è', new: '#–ø—Ä–æ–≤–∏–Ω—Ü–∏—è #–ª–æ–∫–∞—Ü–∏—è' },
                    { old: '#—Ñ—Ä–∞–∫—Ü–∏—è', new: '#—Ñ—Ä–∞–∫—Ü–∏—è #–ª–æ–∫–∞—Ü–∏—è' },
                    { old: '#—Ç–æ—Ä–≥–æ–≤—ã–π_–ø—É—Ç—å', new: '#—Ç–æ—Ä–≥–æ–≤—ã–π_–ø—É—Ç—å #–ª–æ–∫–∞—Ü–∏—è' },
                    { old: '#–≥–ª–∞–≤–∞', new: '#–≥–ª–∞–≤–∞ #1_—Ä—É–∫–æ–ø–∏—Å—å' },
                    { old: '#—Å—Ü–µ–Ω–∞', new: '#—Å—Ü–µ–Ω–∞ #1_—Ä—É–∫–æ–ø–∏—Å—å' },
                    { old: '#—Å–æ–±—ã—Ç–∏–µ', new: '#—Å–æ–±—ã—Ç–∏–µ #1_—Ä—É–∫–æ–ø–∏—Å—å' },
                    { old: '#–∫–æ–Ω—Ñ–ª–∏–∫—Ç', new: '#–∫–æ–Ω—Ñ–ª–∏–∫—Ç #1_—Ä—É–∫–æ–ø–∏—Å—å' },
                    { old: '#–∫–≤–µ—Å—Ç', new: '#–∫–≤–µ—Å—Ç #1_—Ä—É–∫–æ–ø–∏—Å—å' }
                ];
                
                for (const update of tagUpdates) {
                    if (newContent.includes(update.old) && !newContent.includes(update.new)) {
                        newContent = newContent.replace(update.old, update.new);
                        updated = true;
                    }
                }
                
                if (updated) {
                    await vault.modify(file, newContent);
                    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–µ–≥–∏: ${file.path}`);
                }
                
            } catch (error) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ ${file.path}:`, error);
            }
        }
    }
    
    async function runMigration() {
        try {
            await createFolders();
            await migrateFiles();
            await migrateScenes();
            await updateTags();
            
            console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            new Notice('–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
            new Notice('–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ' + error.message);
        }
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    runMigration();
    
})();
