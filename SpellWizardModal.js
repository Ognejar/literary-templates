/**
 * @file       SpellWizardModal.js
 * @description –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è—Ö.
 * @author     –í–∞—à –ê–≤—Ç–æ—Ä
 * @version    1.0.0
 * @license    MIT
 * @dependencies obsidian
 * @created    2024-07-22
 * @updated    2024-07-22
 * @docs       docs/–ö–∞—Ä—Ç–æ—á–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.md (—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)
 */
// Modal, Setting, Notice –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä

class SpellWizardModal extends Modal {
    constructor(app, ModalClass, SettingClass, NoticeClass, projectPath, onFinish) {
        super(app);
        this.Modal = ModalClass;
        this.Notice = NoticeClass;
        this.projectPath = projectPath;
        this.onFinish = onFinish;
        this.data = {
            spellName: '',
            description: '',
            school: '', schoolManual: '',
            level: '', levelManual: '',
            castingTime: '',
            range: '',
            components: '',
            duration: '',
            tag1: '', tag1Manual: '', tag2: '', tag2Manual: '', tag3: '', tag3Manual: '',
            class1: '', class1Manual: '', class2: '', class2Manual: '',
            effect1Name: '', effect1Description: '', effect1Manual: '',
            effect2Name: '', effect2Description: '', effect2Manual: '',
            effect3Name: '', effect3Description: '', effect3Manual: '',
            requirements: '',
            limitations: '',
            risks: '',
            usageInstructions: '',
            creationHistory: '',
        };
        this.step = 0;
        this.steps = [
            this.renderMainInfo.bind(this),
            this.renderCharacteristics.bind(this),
            this.renderEffects.bind(this),
            this.renderTagsClasses.bind(this),
            this.renderUsageConditions.bind(this),
            this.renderUsageInstructions.bind(this),
            this.renderCreationHistory.bind(this),
        ];
        this.spravochniki = {};
    }

    async onOpen() {
        await this.loadSpravochniki();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.modalEl.style.cssText = `
            max-width: 900px !important;
            width: 900px !important;
        `;
        this.contentEl.style.cssText = `
            padding: 20px;
            max-width: 900px !important;
            max-height: 80vh;
            overflow-y: auto;
        `;
        
        this.render();
    }

    async loadSpravochniki() {
        const base = `${this.projectPath}/–ú–∞–≥–∏—è/–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏`;
        const readList = async (file) => {
            try {
                const f = this.app.vault.getAbstractFileByPath(`${base}/${file}`);
                if (!f) return [];
                const text = await this.app.vault.read(f);
                return text.split('\n').map(x => x.trim()).filter(Boolean);
            } catch { return []; }
        };
        const ensureList = async (file, defaults) => {
            try {
                const fullPath = `${base}/${file}`;
                let f = this.app.vault.getAbstractFileByPath(fullPath);
                if (!f) {
                    try { await this.app.vault.createFolder(base); } catch {}
                    const content = (defaults || []).join('\n');
                    await this.app.vault.create(fullPath, content);
                } else if (defaults && defaults.length > 0) {
                    const current = await this.app.vault.read(f);
                    if (!current.trim()) {
                        await this.app.vault.modify(f, defaults.join('\n'));
                    }
                }
            } catch {}
        };

        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
        await ensureList('–®–∫–æ–ª—ã_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md', ['–û–≥–Ω—è', '–•–æ–ª–æ–¥–∞', '–ò–ª–ª—é–∑–∏–∏', '–ü—Ä–∏—Ä–æ–¥—ã', '–ó–∞—â–∏—Ç—ã']);
        await ensureList('–£—Ä–æ–≤–Ω–∏_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md', ['–ù–æ–≤–∏—á–æ–∫', '–ê–¥–µ–ø—Ç', '–ú–∞—Å—Ç–µ—Ä', '–ê—Ä—Ö–∏–º–∞–≥']);
        await ensureList('–¢–µ–≥–∏_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md', ['–±–æ–µ–≤–æ–µ', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–∫–æ–Ω—Ç—Ä–æ–ª—å', '–∏—Å—Ü–µ–ª–µ–Ω–∏–µ']);
        await ensureList('–ö–ª–∞—Å—Å—ã_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md', ['–ú–∞–≥', '–ñ—Ä–µ—Ü', '–î—Ä—É–∏–¥', '–ë–∞—Ä–¥']);
        await ensureList('–≠—Ñ—Ñ–µ–∫—Ç—ã_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md', ['–£—Ä–æ–Ω', '–û–≥–ª—É—à–µ–Ω–∏–µ', '–ò—Å—Ü–µ–ª–µ–Ω–∏–µ', '–£—Å–∏–ª–µ–Ω–∏–µ']);

        this.spravochniki.school = await readList('–®–∫–æ–ª—ã_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md');
        this.spravochniki.level = await readList('–£—Ä–æ–≤–Ω–∏_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md');
        this.spravochniki.tag = await readList('–¢–µ–≥–∏_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md');
        this.spravochniki.class = await readList('–ö–ª–∞—Å—Å—ã_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md');
        this.spravochniki.effect = await readList('–≠—Ñ—Ñ–µ–∫—Ç—ã_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md');
    }

    render() {
        this.contentEl.empty();
        this.steps[this.step]();
    }

    renderMainInfo() {
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const progress = this.contentEl.createDiv('progress-indicator');
        progress.style.cssText = `
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            padding: 10px;
            background: var(--background-secondary);
            border-radius: 8px;
        `;
        
        const steps = ['–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', '–≠—Ñ—Ñ–µ–∫—Ç—ã', '–¢–µ–≥–∏ –∏ –∫–ª–∞—Å—Å—ã', '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', '–ò—Å—Ç–æ—Ä–∏—è'];
        steps.forEach((step, index) => {
            const stepEl = progress.createDiv('step');
            stepEl.style.cssText = `
                padding: 5px 10px;
                border-radius: 4px;
                font-size: 12px;
                font-weight: ${index === this.step ? '600' : '400'};
                color: ${index === this.step ? 'var(--text-on-accent)' : 'var(--text-muted)'};
                background: ${index === this.step ? 'var(--interactive-accent)' : 'transparent'};
            `;
            stepEl.textContent = step;
        });
        
        const header = this.contentEl.createEl('h2', { text: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' });
        header.style.cssText = `
            margin: 20px 0;
            color: var(--text-accent);
            font-size: 20px;
            font-weight: 600;
            border-bottom: 2px solid var(--background-modifier-border);
            padding-bottom: 10px;
        `;
        
        // –°–ø—Ä–∞–≤–∫–∞
        const help = this.contentEl.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üí° –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –±–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.
                –í—Å–µ –ø–æ–ª—è —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ –∏–º–µ—é—Ç –æ–ø—Ü–∏—é "‚Äî –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚Äî" –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
            </div>
        `;
        
        new Setting(this.contentEl)
            .setName('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è')
            .addText(t => t.setValue(this.data.spellName).onChange(v => this.data.spellName = v));
        new Setting(this.contentEl)
            .setName('–û–ø–∏—Å–∞–Ω–∏–µ')
            .addTextArea(t => t.setValue(this.data.description).onChange(v => this.data.description = v));
        this.addNav();
    }

    renderCharacteristics() {
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const progress = this.contentEl.createDiv('progress-indicator');
        progress.style.cssText = `
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            padding: 10px;
            background: var(--background-secondary);
            border-radius: 8px;
        `;
        
        const steps = ['–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', '–≠—Ñ—Ñ–µ–∫—Ç—ã', '–¢–µ–≥–∏ –∏ –∫–ª–∞—Å—Å—ã', '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', '–ò—Å—Ç–æ—Ä–∏—è'];
        steps.forEach((step, index) => {
            const stepEl = progress.createDiv('step');
            stepEl.style.cssText = `
                padding: 5px 10px;
                border-radius: 4px;
                font-size: 12px;
                font-weight: ${index === this.step ? '600' : '400'};
                color: ${index === this.step ? 'var(--text-on-accent)' : 'var(--text-muted)'};
                background: ${index === this.step ? 'var(--interactive-accent)' : 'transparent'};
            `;
            stepEl.textContent = step;
        });
        
        const header = this.contentEl.createEl('h2', { text: '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è' });
        header.style.cssText = `
            margin: 20px 0;
            color: var(--text-accent);
            font-size: 20px;
            font-weight: 600;
            border-bottom: 2px solid var(--background-modifier-border);
            padding-bottom: 10px;
        `;
        
        // –°–ø—Ä–∞–≤–∫–∞
        const help = this.contentEl.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">‚ö° –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –£–∫–∞–∂–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è: —à–∫–æ–ª—É –º–∞–≥–∏–∏, —É—Ä–æ–≤–µ–Ω—å, –≤—Ä–µ–º—è –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–∏—è, –¥–∏—Å—Ç–∞–Ω—Ü–∏—é, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
                –í—Å–µ –ø–æ–ª—è —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ –∏–º–µ—é—Ç –æ–ø—Ü–∏—é "‚Äî –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚Äî" –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
            </div>
        `;
        
        // –®–∫–æ–ª–∞ –º–∞–≥–∏–∏
        const schoolContainer = this.contentEl.createDiv('school-container');
        new Setting(schoolContainer)
            .setName('–®–∫–æ–ª–∞ –º–∞–≥–∏–∏')
            .addDropdown(d => {
                (this.spravochniki.school || []).forEach(val => d.addOption(val, val));
                d.addOption('manual', '‚Äî –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚Äî');
                d.setValue(this.data.school || '');
                d.onChange(v => {
                    this.data.school = v;
                    this.render(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞
                });
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                d.selectEl.style.minWidth = '280px';
                d.selectEl.style.fontSize = '14px';
                d.selectEl.style.padding = '6px';
            });
        
        // –ü–æ–ª–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —à–∫–æ–ª—ã
        if (this.data.school === 'manual') {
            new Setting(schoolContainer)
                .setName('–®–∫–æ–ª–∞ –º–∞–≥–∏–∏ (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)')
                .addText(t => {
                    t.setValue(this.data.schoolManual || '');
                    t.onChange(v => this.data.schoolManual = v);
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è
                    t.inputEl.style.width = '100%';
                    t.inputEl.style.fontSize = '16px';
                    t.inputEl.style.padding = '8px';
                });
        }
        
        // –£—Ä–æ–≤–µ–Ω—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        const levelContainer = this.contentEl.createDiv('level-container');
        new Setting(levelContainer)
            .setName('–£—Ä–æ–≤–µ–Ω—å')
            .addDropdown(d => {
                (this.spravochniki.level || []).forEach(val => d.addOption(val, val));
                d.addOption('manual', '‚Äî –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚Äî');
                d.setValue(this.data.level || '');
                d.onChange(v => {
                    this.data.level = v;
                    this.render(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞
                });
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                d.selectEl.style.minWidth = '280px';
                d.selectEl.style.fontSize = '14px';
                d.selectEl.style.padding = '6px';
            });
        
        // –ü–æ–ª–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —É—Ä–æ–≤–Ω—è
        if (this.data.level === 'manual') {
            new Setting(levelContainer)
                .setName('–£—Ä–æ–≤–µ–Ω—å (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)')
                .addText(t => {
                    t.setValue(this.data.levelManual || '');
                    t.onChange(v => this.data.levelManual = v);
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è
                    t.inputEl.style.width = '100%';
                    t.inputEl.style.fontSize = '16px';
                    t.inputEl.style.padding = '8px';
                });
        }
        
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        new Setting(this.contentEl)
            .setName('–í—Ä–µ–º—è –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–∏—è')
            .addText(t => t.setValue(this.data.castingTime).onChange(v => this.data.castingTime = v));
        new Setting(this.contentEl)
            .setName('–î–∏—Å—Ç–∞–Ω—Ü–∏—è')
            .addText(t => t.setValue(this.data.range).onChange(v => this.data.range = v));
        new Setting(this.contentEl)
            .setName('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã')
            .addText(t => t.setValue(this.data.components).onChange(v => this.data.components = v));
        new Setting(this.contentEl)
            .setName('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
            .addText(t => t.setValue(this.data.duration).onChange(v => this.data.duration = v));
        
        this.addNav();
    }

    renderEffects() {
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const progress = this.contentEl.createDiv('progress-indicator');
        progress.style.cssText = `
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            padding: 10px;
            background: var(--background-secondary);
            border-radius: 8px;
        `;
        
        const steps = ['–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', '–≠—Ñ—Ñ–µ–∫—Ç—ã', '–¢–µ–≥–∏ –∏ –∫–ª–∞—Å—Å—ã', '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', '–ò—Å—Ç–æ—Ä–∏—è'];
        steps.forEach((step, index) => {
            const stepEl = progress.createDiv('step');
            stepEl.style.cssText = `
                padding: 5px 10px;
                border-radius: 4px;
                font-size: 12px;
                font-weight: ${index === this.step ? '600' : '400'};
                color: ${index === this.step ? 'var(--text-on-accent)' : 'var(--text-muted)'};
                background: ${index === this.step ? 'var(--interactive-accent)' : 'transparent'};
            `;
            stepEl.textContent = step;
        });
        
        const header = this.contentEl.createEl('h2', { text: '–≠—Ñ—Ñ–µ–∫—Ç—ã –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è' });
        header.style.cssText = `
            margin: 20px 0;
            color: var(--text-accent);
            font-size: 20px;
            font-weight: 600;
            border-bottom: 2px solid var(--background-modifier-border);
            padding-bottom: 10px;
        `;
        
        // –°–ø—Ä–∞–≤–∫–∞
        const help = this.contentEl.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">‚ú® –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –û–ø–∏—à–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–æ 3 —ç—Ñ—Ñ–µ–∫—Ç–æ–≤. –ö–∞–∂–¥—ã–π —ç—Ñ—Ñ–µ–∫—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–µ–Ω –≤—Ä—É—á–Ω—É—é.
            </div>
        `;
        
        for (let i = 1; i <= 3; i++) {
            const effectContainer = this.contentEl.createDiv(`effect-${i}-container`);
            
            new Setting(effectContainer)
                .setName(`–≠—Ñ—Ñ–µ–∫—Ç ${i}`)
                .addDropdown(d => {
                    (this.spravochniki.effect || []).forEach(val => d.addOption(val, val));
                    d.addOption('manual', '‚Äî –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚Äî');
                    d.setValue(this.data[`effect${i}Name`] || '');
                    d.onChange(v => {
                        this.data[`effect${i}Name`] = v;
                        this.render(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞
                    });
                });
            
            // –ü–æ–ª–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
            if (this.data[`effect${i}Name`] === 'manual') {
                new Setting(effectContainer)
                    .setName(`–≠—Ñ—Ñ–µ–∫—Ç ${i} (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)`)
                    .addText(t => {
                        t.setValue(this.data[`effect${i}Manual`] || '');
                        t.onChange(v => this.data[`effect${i}Manual`] = v);
                    });
            }
            
            new Setting(effectContainer)
                .setName(`–û–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ ${i}`)
                .addTextArea(t => t.setPlaceholder('–û–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞').setValue(this.data[`effect${i}Description`]).onChange(v => this.data[`effect${i}Description`] = v));
        }
        this.addNav();
    }

    renderTagsClasses() {
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const progress = this.contentEl.createDiv('progress-indicator');
        progress.style.cssText = `
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            padding: 10px;
            background: var(--background-secondary);
            border-radius: 8px;
        `;
        
        const steps = ['–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', '–≠—Ñ—Ñ–µ–∫—Ç—ã', '–¢–µ–≥–∏ –∏ –∫–ª–∞—Å—Å—ã', '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', '–ò—Å—Ç–æ—Ä–∏—è'];
        steps.forEach((step, index) => {
            const stepEl = progress.createDiv('step');
            stepEl.style.cssText = `
                padding: 5px 10px;
                border-radius: 4px;
                font-size: 12px;
                font-weight: ${index === this.step ? '600' : '400'};
                color: ${index === this.step ? 'var(--text-on-accent)' : 'var(--text-muted)'};
                background: ${index === this.step ? 'var(--interactive-accent)' : 'transparent'};
            `;
            stepEl.textContent = step;
        });
        
        const header = this.contentEl.createEl('h2', { text: '–¢–µ–≥–∏ –∏ –∫–ª–∞—Å—Å—ã –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è' });
        header.style.cssText = `
            margin: 20px 0;
            color: var(--text-accent);
            font-size: 20px;
            font-weight: 600;
            border-bottom: 2px solid var(--background-modifier-border);
            padding-bottom: 10px;
        `;
        
        // –°–ø—Ä–∞–≤–∫–∞
        const help = this.contentEl.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üè∑Ô∏è –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –£–∫–∞–∂–∏—Ç–µ —Ç–µ–≥–∏ –∏ –∫–ª–∞—Å—Å—ã –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞. –¢–µ–≥–∏ –ø–æ–º–æ–≥–∞—é—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
            </div>
        `;
        
        for (let i = 1; i <= 3; i++) {
            const tagContainer = this.contentEl.createDiv(`tag-${i}-container`);
            
            new Setting(tagContainer)
                .setName(`–¢–µ–≥ ${i}`)
                .addDropdown(d => {
                    (this.spravochniki.tag || []).forEach(val => d.addOption(val, val));
                    d.addOption('manual', '‚Äî –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚Äî');
                    d.setValue(this.data[`tag${i}`] || '');
                    d.onChange(v => {
                        this.data[`tag${i}`] = v;
                        this.render(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞
                    });
                });
            
            // –ü–æ–ª–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–≥–∞
            if (this.data[`tag${i}`] === 'manual') {
                new Setting(tagContainer)
                    .setName(`–¢–µ–≥ ${i} (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)`)
                    .addText(t => {
                        t.setValue(this.data[`tag${i}Manual`] || '');
                        t.onChange(v => this.data[`tag${i}Manual`] = v);
                    });
            }
        }
        
        for (let i = 1; i <= 2; i++) {
            const classContainer = this.contentEl.createDiv(`class-${i}-container`);
            
            new Setting(classContainer)
                .setName(`–ö–ª–∞—Å—Å ${i}`)
                .addDropdown(d => {
                    (this.spravochniki.class || []).forEach(val => d.addOption(val, val));
                    d.addOption('manual', '‚Äî –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚Äî');
                    d.setValue(this.data[`class${i}`] || '');
                    d.onChange(v => {
                        this.data[`class${i}`] = v;
                        this.render(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞
                    });
                });
            
            // –ü–æ–ª–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–ª–∞—Å—Å–∞
            if (this.data[`class${i}`] === 'manual') {
                new Setting(classContainer)
                    .setName(`–ö–ª–∞—Å—Å ${i} (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)`)
                    .addText(t => {
                        t.setValue(this.data[`class${i}Manual`] || '');
                        t.onChange(v => this.data[`class${i}Manual`] = v);
                    });
            }
        }
        this.addNav();
    }

    renderUsageConditions() {
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const progress = this.contentEl.createDiv('progress-indicator');
        progress.style.cssText = `
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            padding: 10px;
            background: var(--background-secondary);
            border-radius: 8px;
        `;
        
        const steps = ['–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', '–≠—Ñ—Ñ–µ–∫—Ç—ã', '–¢–µ–≥–∏ –∏ –∫–ª–∞—Å—Å—ã', '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', '–ò—Å—Ç–æ—Ä–∏—è'];
        steps.forEach((step, index) => {
            const stepEl = progress.createDiv('step');
            stepEl.style.cssText = `
                padding: 5px 10px;
                border-radius: 4px;
                font-size: 12px;
                font-weight: ${index === this.step ? '600' : '400'};
                color: ${index === this.step ? 'var(--text-on-accent)' : 'var(--text-muted)'};
                background: ${index === this.step ? 'var(--interactive-accent)' : 'transparent'};
            `;
            stepEl.textContent = step;
        });
        
        const header = this.contentEl.createEl('h2', { text: '–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è' });
        header.style.cssText = `
            margin: 20px 0;
            color: var(--text-accent);
            font-size: 20px;
            font-weight: 600;
            border-bottom: 2px solid var(--background-modifier-border);
            padding-bottom: 10px;
        `;
        
        // –°–ø—Ä–∞–≤–∫–∞
        const help = this.contentEl.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">‚ö†Ô∏è –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –û–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è: —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
            </div>
        `;
        
        new Setting(this.contentEl).setName('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è').addTextArea(t => t.setValue(this.data.requirements).onChange(v => this.data.requirements = v));
        new Setting(this.contentEl).setName('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è').addTextArea(t => t.setValue(this.data.limitations).onChange(v => this.data.limitations = v));
        new Setting(this.contentEl).setName('–†–∏—Å–∫–∏').addTextArea(t => t.setValue(this.data.risks).onChange(v => this.data.risks = v));
        this.addNav();
    }

    renderUsageInstructions() {
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const progress = this.contentEl.createDiv('progress-indicator');
        progress.style.cssText = `
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            padding: 10px;
            background: var(--background-secondary);
            border-radius: 8px;
        `;
        
        const steps = ['–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', '–≠—Ñ—Ñ–µ–∫—Ç—ã', '–¢–µ–≥–∏ –∏ –∫–ª–∞—Å—Å—ã', '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', '–ò—Å—Ç–æ—Ä–∏—è'];
        steps.forEach((step, index) => {
            const stepEl = progress.createDiv('step');
            stepEl.style.cssText = `
                padding: 5px 10px;
                border-radius: 4px;
                font-size: 12px;
                font-weight: ${index === this.step ? '600' : '400'};
                color: ${index === this.step ? 'var(--text-on-accent)' : 'var(--text-muted)'};
                background: ${index === this.step ? 'var(--interactive-accent)' : 'transparent'};
            `;
            stepEl.textContent = step;
        });
        
        const header = this.contentEl.createEl('h2', { text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é' });
        header.style.cssText = `
            margin: 20px 0;
            color: var(--text-accent);
            font-size: 20px;
            font-weight: 600;
            border-bottom: 2px solid var(--background-modifier-border);
            padding-bottom: 10px;
        `;
        
        // –°–ø—Ä–∞–≤–∫–∞
        const help = this.contentEl.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üìñ –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è. –í–∫–ª—é—á–∏—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–µ —É–∫–∞–∑–∞–Ω–∏—è, –∂–µ—Å—Ç—ã, –ø—Ä–æ–∏–∑–Ω–æ—Å–∏–º—ã–µ —Å–ª–æ–≤–∞ –∏ –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏.
            </div>
        `;
        
        new Setting(this.contentEl).setName('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏').addTextArea(t => t.setValue(this.data.usageInstructions).onChange(v => this.data.usageInstructions = v));
        this.addNav();
    }

    renderCreationHistory() {
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const progress = this.contentEl.createDiv('progress-indicator');
        progress.style.cssText = `
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            padding: 10px;
            background: var(--background-secondary);
            border-radius: 8px;
        `;
        
        const steps = ['–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', '–≠—Ñ—Ñ–µ–∫—Ç—ã', '–¢–µ–≥–∏ –∏ –∫–ª–∞—Å—Å—ã', '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', '–ò—Å—Ç–æ—Ä–∏—è'];
        steps.forEach((step, index) => {
            const stepEl = progress.createDiv('step');
            stepEl.style.cssText = `
                padding: 5px 10px;
                border-radius: 4px;
                font-size: 12px;
                font-weight: ${index === this.step ? '600' : '400'};
                color: ${index === this.step ? 'var(--text-on-accent)' : 'var(--text-muted)'};
                background: ${index === this.step ? 'var(--interactive-accent)' : 'transparent'};
            `;
            stepEl.textContent = step;
        });
        
        const header = this.contentEl.createEl('h2', { text: '–ò—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è' });
        header.style.cssText = `
            margin: 20px 0;
            color: var(--text-accent);
            font-size: 20px;
            font-weight: 600;
            border-bottom: 2px solid var(--background-modifier-border);
            padding-bottom: 10px;
        `;
        
        // –°–ø—Ä–∞–≤–∫–∞
        const help = this.contentEl.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üìú –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –û–ø–∏—à–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è: –∫—Ç–æ –µ–≥–æ —Å–æ–∑–¥–∞–ª, –∫–æ–≥–¥–∞, –∫–∞–∫–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å, –∫–∞–∫–∏–µ –Ω–µ—É–¥–∞—á–∏ –±—ã–ª–∏ –Ω–∞ –ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É.
            </div>
        `;
        
        new Setting(this.contentEl).setName('–ò—Å—Ç–æ—Ä–∏—è').addTextArea(t => t.setValue(this.data.creationHistory).onChange(v => this.data.creationHistory = v));
        this.addNav(true);
    }

    addNav(isLast = false) {
        const nav = this.contentEl.createDiv('nav-buttons');
        nav.style.cssText = `
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid var(--background-modifier-border);
        `;
        
        const leftButtons = nav.createDiv('nav-left');
        const rightButtons = nav.createDiv('nav-right');
        
        if (this.step > 0) {
            const prevBtn = leftButtons.createEl('button', { text: '‚Üê –ù–∞–∑–∞–¥' });
            prevBtn.style.cssText = `
                padding: 8px 16px;
                background: var(--background-secondary);
                color: var(--text-muted);
                border: 1px solid var(--background-modifier-border);
                border-radius: 6px;
                font-size: 14px;
                font-weight: 500;
                cursor: pointer;
                transition: background-color 0.2s ease;
            `;
            prevBtn.addEventListener('mouseenter', () => {
                prevBtn.style.background = 'var(--background-modifier-hover)';
            });
            prevBtn.addEventListener('mouseleave', () => {
                prevBtn.style.background = 'var(--background-secondary)';
            });
            prevBtn.onclick = () => { this.step--; this.render(); };
        }
        
        if (!isLast) {
            const nextBtn = rightButtons.createEl('button', { text: '–î–∞–ª–µ–µ ‚Üí' });
            nextBtn.style.cssText = `
                padding: 8px 16px;
                background: var(--interactive-accent);
                color: var(--text-on-accent);
                border: none;
                border-radius: 6px;
                font-size: 14px;
                font-weight: 500;
                cursor: pointer;
                transition: background-color 0.2s ease;
            `;
            nextBtn.addEventListener('mouseenter', () => {
                nextBtn.style.background = 'var(--interactive-accent-hover)';
            });
            nextBtn.addEventListener('mouseleave', () => {
                nextBtn.style.background = 'var(--interactive-accent)';
            });
            nextBtn.onclick = () => { this.step++; this.render(); };
        } else {
            const finishBtn = rightButtons.createEl('button', { text: '‚úì –ì–æ—Ç–æ–≤–æ' });
            finishBtn.style.cssText = `
                padding: 10px 20px;
                background: var(--interactive-accent);
                color: var(--text-on-accent);
                border: none;
                border-radius: 6px;
                font-size: 14px;
                font-weight: 600;
                cursor: pointer;
                transition: background-color 0.2s ease;
            `;
            finishBtn.addEventListener('mouseenter', () => {
                finishBtn.style.background = 'var(--interactive-accent-hover)';
            });
            finishBtn.addEventListener('mouseleave', () => {
                finishBtn.style.background = 'var(--interactive-accent)';
            });
            finishBtn.onclick = async () => {
                if (!this.data.spellName.trim()) {
                    new this.Notice('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è!');
                    return;
                }
                this.close();
                this.onFinish(this.data);
            };
        }
    }
}

module.exports = SpellWizardModal;
