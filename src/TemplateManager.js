/**
 * @file       TemplateManager.js
 * @description –ú–µ–Ω–µ–¥–∂–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞ Literary Templates
 * @author     AI Assistant
 * @version    1.0.0
 * @license    MIT
 * @dependencies main.js, Handlebars
 * @created    2025-01-27
 * @updated    2025-01-27
 * @docs       docs/project.md
 */

class TemplateManager {
    constructor(plugin) {
        this.plugin = plugin;
        this.handlebars = window.Handlebars;
    }

    _augmentData(data) {
        const d = { ...(data || {}) };
        // statusLabel
        if (typeof d.status === 'string') {
            const map = {
                '–¥–µ–π—Å—Ç–≤—É–µ—Ç': '‚úÖ –î–µ–π—Å—Ç–≤—É–µ—Ç',
                '–∑–∞–±—Ä–æ—à–µ–Ω–æ': 'üèöÔ∏è –ó–∞–±—Ä–æ—à–µ–Ω–æ',
                '—Ä–∞–∑—Ä—É—à–µ–Ω–æ': 'üí• –†–∞–∑—Ä—É—à–µ–Ω–æ'
            };
            d.statusLabel = map[d.status] || d.status;
        }
        // provinceSection/stateSection
        d.provinceSection = d.province ? `**–ü—Ä–æ–≤–∏–Ω—Ü–∏—è:** ${d.province}` : '';
        d.stateSection = d.state ? `**–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ:** ${d.state}` : '';
        // featuresSection
        if (Array.isArray(d.features) && d.features.length > 0) {
            d.featuresSection = d.features.map(f => `- ${f}`).join('\n');
        } else if (typeof d.features === 'string' && d.features.trim()) {
            d.featuresSection = d.features
                .split(/\r?\n/)
                .map(s => s.trim())
                .filter(Boolean)
                .map(s => `- ${s}`)
                .join('\n');
        } else {
            d.featuresSection = '';
        }
        return d;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
     */
    async generateFromTemplate(templateName, data, plugin) {
        try {
            const templateContent = await this.readTemplateFile(templateName, plugin);
            if (!templateContent) {
                throw new Error(`–®–∞–±–ª–æ–Ω ${templateName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

            // 1) –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ include-–¥–∏—Ä–µ–∫—Ç–∏–≤ –¥–æ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
            const withIncludes = await this._processIncludes(templateContent, plugin);
            // 2) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—ã—á–∏—Å–ª—è–µ–º—ã—Ö —Å–µ–∫—Ü–∏–π
            const augmented = this._augmentData(data);

            if (this.handlebars && typeof this.handlebars.compile === 'function') {
                const template = this.handlebars.compile(withIncludes);
                return template(augmented);
            }
            // –§–æ–ª–±—ç–∫: –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–Ω–¥–µ—Ä –±–µ–∑ Handlebars
            let content = this._processConditionals(withIncludes, augmented);
            content = this._replacePlaceholders(content, augmented);
            return content;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ ${templateName}:`, error);
            throw error;
        }
    }

    /**
     * –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞
     */
    async readTemplateFile(templateName, plugin) {
        try {
            const adapter = plugin.app.vault.adapter;
            const pluginTemplatePath = `.obsidian/plugins/literary-templates/templates/${templateName}.md`;
            const exists = await adapter.exists(pluginTemplatePath);
            if (exists) {
                return await adapter.read(pluginTemplatePath);
            }
            console.warn(`–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: ${pluginTemplatePath}`);
            try {
                const vaultName = typeof plugin?.app?.vault?.getName === 'function' ? plugin.app.vault.getName() : 'unknown-vault';
                const folderPath = `.obsidian/plugins/literary-templates/templates`;
                const folderInfo = await adapter.list(folderPath).catch(() => null);
                const filesInFolder = folderInfo && Array.isArray(folderInfo.files)
                    ? folderInfo.files.map(p => p.split('/').pop()).join(', ')
                    : '(–ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞)';
                console.info('[TemplateManager] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–∞—Ö–∞ —à–∞–±–ª–æ–Ω–∞:', {
                    vaultName,
                    requestedTemplateName: templateName,
                    searchedPath: pluginTemplatePath,
                    folderPath,
                    folderExists: Boolean(folderInfo),
                    filesInFolder
                });
            } catch (diagErr) {
                console.info('[TemplateManager] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞:', diagErr);
            }
            return null;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ ${templateName}:`, error);
            return null;
        }
    }

    /**
     * –ó–∞–ø–æ–ª–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω –¥–∞–Ω–Ω—ã–º–∏
     */
    async fillTemplate(template, data) {
        try {
            const augmented = this._augmentData(data);
            if (this.handlebars && typeof this.handlebars.compile === 'function') {
                const templateFunc = this.handlebars.compile(template);
                return templateFunc(augmented);
            }
            // –§–æ–ª–±—ç–∫ –±–µ–∑ Handlebars
            let content = this._processConditionals(template, augmented);
            content = this._replacePlaceholders(content, augmented);
            return content;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error);
            return template;
        }
    }

    _processConditionals(content, data) {
        const regex = /{{#if\s+([^}]+)}}([\s\S]*?){{\/if}}/g;
        return content.replace(regex, (_m, rawCond, block) => {
            const condition = String(rawCond).trim();
            // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: key == value
            const eqMatch = condition.match(/^(\S+)\s*==\s*(\S+)$/);
            if (eqMatch) {
                const leftKey = eqMatch[1];
                let rightVal = eqMatch[2];
                rightVal = rightVal.replace(/^"|"$/g, '').replace(/^'|'$/g, '');
                const leftVal = Object.prototype.hasOwnProperty.call(data, leftKey) ? String(data[leftKey]) : '';
                return leftVal === rightVal ? block : '';
            }
            // –ë–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: {{#if key}}
            const key = condition;
            const value = Object.prototype.hasOwnProperty.call(data, key) ? data[key] : undefined;
            const truthy = value !== undefined && value !== null && value !== '';
            return truthy ? block : '';
        });
    }

    async _processIncludes(content, plugin) {
        try {
            const includeRegex = /{{include:([^}]+)}}/g;
            const adapter = plugin.app.vault.adapter;
            const tasks = [];
            const placeholders = [];
            let match;
            while ((match = includeRegex.exec(content)) !== null) {
                const rawPath = match[1].trim();
                placeholders.push(match[0]);
                tasks.push((async () => {
                    try {
                        let path = rawPath;
                        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏ sections/...
                        if (!path.toLowerCase().endsWith('.md')) path += '.md';
                        if (path.startsWith('sections/')) {
                            path = `.obsidian/plugins/literary-templates/templates/${path}`;
                        } else if (!path.startsWith('.obsidian/')) {
                            // –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫ –ø–∞–ø–∫–µ templates
                            path = `.obsidian/plugins/literary-templates/templates/${path}`;
                        }
                        const exists = await adapter.exists(path);
                        if (!exists) {
                            console.warn(`[TemplateManager] include –Ω–µ –Ω–∞–π–¥–µ–Ω: ${path}`);
                            return `<!-- include not found: ${rawPath} -->`;
                        }
                        return await adapter.read(path);
                    } catch (e) {
                        console.error('[TemplateManager] –û—à–∏–±–∫–∞ include', rawPath, e);
                        return `<!-- include error: ${rawPath} -->`;
                    }
                })());
            }
            if (tasks.length === 0) return content;
            const parts = await Promise.all(tasks);
            let result = content;
            for (let i = 0; i < placeholders.length; i++) {
                result = result.replace(placeholders[i], parts[i]);
            }
            return result;
        } catch (e) {
            console.error('[TemplateManager] _processIncludes error:', e);
            return content;
        }
    }

    _replacePlaceholders(content, data) {
        let result = content;
        for (const key in data) {
            if (!Object.prototype.hasOwnProperty.call(data, key)) continue;
            const re = new RegExp('\\{\\{' + key.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&') + '\\}\\}', 'g');
            result = result.replace(re, String(data[key]));
        }
        return result;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ —à–∞–±–ª–æ–Ω–∞
     */
    async createFileFromTemplate(templateName, data, filePath, plugin) {
        try {
            const content = await this.generateFromTemplate(templateName, data, plugin);
            await plugin.app.vault.create(filePath, content);
            return true;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞ ${templateName}:`, error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
     */
    async getAvailableTemplates(plugin) {
        try {
            const adapter = plugin.app.vault.adapter;
            const folderPath = '.obsidian/plugins/literary-templates/templates';
            const list = await adapter.list(folderPath);
            if (!list || !Array.isArray(list.files)) {
                return [];
            }
            return list.files
                .filter(p => p.toLowerCase().endsWith('.md'))
                .map(p => p.split('/').pop().replace(/\.md$/i, ''));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤:', error);
            return [];
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
     */
    async templateExists(templateName, plugin) {
        try {
            const adapter = plugin.app.vault.adapter;
            const templatePath = `.obsidian/plugins/literary-templates/templates/${templateName}.md`;
            return await adapter.exists(templatePath);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ ${templateName}:`, error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞
     */
    async getTemplateMetadata(templateName, plugin) {
        try {
            const templateContent = await this.readTemplateFile(templateName, plugin);
            if (!templateContent) {
                return null;
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ YAML frontmatter
            const yamlMatch = templateContent.match(/^---\s*\n([\s\S]*?)\n---\s*\n/);
            if (!yamlMatch) {
                return {};
            }

            const yamlContent = yamlMatch[1];
            const metadata = {};
            
            yamlContent.split('\n').forEach(line => {
                const match = line.match(/^([^:]+):\s*(.*)$/);
                if (match) {
                    const key = match[1].trim();
                    let value = match[2].trim();
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã
                    if (value.startsWith('[') && value.endsWith(']')) {
                        value = value.slice(1, -1).split(',').map(item => item.trim().replace(/['"]/g, ''));
                    }
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
                    else if (value.startsWith('"') && value.endsWith('"')) {
                        value = value.slice(1, -1);
                    }
                    
                    metadata[key] = value;
                }
            });

            return metadata;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞ ${templateName}:`, error);
            return {};
        }
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
     */
    validateTemplateData(templateName, data) {
        // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        if (!data || typeof data !== 'object') {
            return { valid: false, error: '–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º' };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        const requiredFields = this.getRequiredFields(templateName);
        for (const field of requiredFields) {
            if (!data[field] || data[field].toString().trim() === '') {
                return { valid: false, error: `–ü–æ–ª–µ '${field}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è` };
            }
        }

        return { valid: true };
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è —à–∞–±–ª–æ–Ω–∞
     */
    getRequiredFields(templateName) {
        const requiredFields = {
            '–ù–æ–≤—ã–π_–≥–æ—Ä–æ–¥': ['name'],
            '–ù–æ–≤–∞—è_–¥–µ—Ä–µ–≤–Ω—è': ['name'],
            '–ù–æ–≤–æ–µ_–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ': ['name'],
            '–ù–æ–≤–∞—è_–ø—Ä–æ–≤–∏–Ω—Ü–∏—è': ['name'],
            '–ù–æ–≤—ã–π_–∑–∞–º–æ–∫': ['name'],
            '–ù–æ–≤—ã–π_–ø–æ—Ä—Ç': ['name'],
            '–ù–æ–≤—ã–π_–ø–æ—Ä—Ç_scifi': ['name'],
            '–ù–æ–≤–∞—è_—Ñ–µ—Ä–º–∞': ['name'],
            '–ù–æ–≤–∞—è_—à–∞—Ö—Ç–∞': ['name'],
            '–ù–æ–≤–∞—è_—à–∞—Ö—Ç–∞_scifi': ['name'],
            '–ù–æ–≤—ã–π_–∑–∞–≤–æ–¥': ['name'],
            '–ù–æ–≤—ã–π_–ø–µ—Ä—Å–æ–Ω–∞–∂': ['name'],
            '–ù–æ–≤—ã–π_–º–æ–Ω—Å—Ç—Ä': ['name'],
            '–ù–æ–≤—ã–π_–Ω–∞—Ä–æ–¥': ['name'],
            '–ù–æ–≤–∞—è_–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è': ['name'],
            '–ù–æ–≤–∞—è_—Ä–µ–ª–∏–≥–∏—è': ['name'],
            '–ù–æ–≤—ã–π_–∫—É–ª—å—Ç': ['name'],
            '–ù–æ–≤–∞—è_—Ñ—Ä–∞–∫—Ü–∏—è': ['name'],
            '–ù–æ–≤—ã–π_–∫–≤–µ—Å—Ç': ['name'],
            '–ù–æ–≤–æ–µ_—Å–æ–±—ã—Ç–∏–µ': ['name'],
            '–ù–æ–≤—ã–π_–∫–æ–Ω—Ñ–ª–∏–∫—Ç': ['name'],
            '–ù–æ–≤–∞—è_—Å—Ü–µ–Ω–∞': ['name'],
            '–ù–æ–≤–∞—è_–≥–ª–∞–≤–∞': ['name'],
            '–ù–æ–≤–∞—è_–∑–∞–¥–∞—á–∞': ['name'],
            '–ù–æ–≤–æ–µ_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ': ['name'],
            '–ù–æ–≤–æ–µ_–∑–µ–ª—å–µ': ['name'],
            '–ù–æ–≤—ã–π_–∞—Ä—Ç–µ—Ñ–∞–∫—Ç': ['name'],
            '–ù–æ–≤—ã–π_–∞–ª—Ö–∏–º–∏—á–µ—Å–∫–∏–π_—Ä–µ—Ü–µ–ø—Ç': ['name'],
            '–ù–æ–≤—ã–π_—Ç–æ—Ä–≥–æ–≤—ã–π_–ø—É—Ç—å': ['name'],
            '–ù–æ–≤–æ–µ_–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ': ['name'],
            '–ù–æ–≤–∞—è_–ª–æ–∫–∞—Ü–∏—è': ['name'],
            '–ù–æ–≤–∞—è_–ª–æ–∫–∞—Ü–∏—è_scifi': ['name'],
            '–ù–æ–≤–∞—è_–º–µ—Ä—Ç–≤–∞—è_–∑–æ–Ω–∞': ['name'],
            '–ù–æ–≤—ã–π_—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π_–æ–±—ä–µ–∫—Ç': ['name']
        };

        return requiredFields[templateName] || ['name'];
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–∞
     */
    async createTemplatePreview(templateName, data, plugin) {
        try {
            const content = await this.generateFromTemplate(templateName, data, plugin);
            
            // –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–≤—å—é
            const maxLength = 500;
            const preview = content.length > maxLength 
                ? content.substring(0, maxLength) + '...' 
                : content;
            
            return preview;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–∞ ${templateName}:`, error);
            return '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é';
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –≤ —à–∞–±–ª–æ–Ω–∞—Ö
     */
    processSpecialTags(content, data) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–≥ {{imageBlock}}
        if (content.includes('{{imageBlock}}')) {
            const imageBlock = this.generateImageBlock(data);
            content = content.replace(/\{\{imageBlock\}\}/g, imageBlock);
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–≥ {{date}}
        if (content.includes('{{date}}')) {
            const date = new Date().toISOString().split('T')[0];
            content = content.replace(/\{\{date\}\}/g, date);
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–≥ {{timestamp}}
        if (content.includes('{{timestamp}}')) {
            const timestamp = new Date().toISOString();
            content = content.replace(/\{\{timestamp\}\}/g, timestamp);
        }

        return content;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–ª–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    generateImageBlock(data) {
        if (!data.project || !data.entityType) {
            return '';
        }

        const imagePath = this.findTagImage(data.project, data.entityType);
        if (!imagePath) {
            return '';
        }

        return `![${data.entityType}](images/${imagePath})`;
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ç–µ–≥—É
     */
    findTagImage(project, entityType) {
        // –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–≥—É
        // –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const tagImages = {
            '–ì–æ—Ä–æ–¥': 'city.png',
            '–î–µ—Ä–µ–≤–Ω—è': 'village.png',
            '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ': 'state.png',
            '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è': 'province.png',
            '–ó–∞–º–æ–∫': 'castle.png',
            '–ü–æ—Ä—Ç': 'port.png',
            '–§–µ—Ä–º–∞': 'farm.png',
            '–®–∞—Ö—Ç–∞': 'mine.png',
            '–ó–∞–≤–æ–¥': 'factory.png',
            '–ü–µ—Ä—Å–æ–Ω–∞–∂': 'character.png',
            '–ú–æ–Ω—Å—Ç—Ä': 'monster.png',
            '–ù–∞—Ä–æ–¥': 'people.png',
            '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è': 'organization.png',
            '–†–µ–ª–∏–≥–∏—è': 'religion.png',
            '–ö—É–ª—å—Ç': 'cult.png',
            '–§—Ä–∞–∫—Ü–∏—è': 'faction.png',
            '–ö–≤–µ—Å—Ç': 'quest.png',
            '–°–æ–±—ã—Ç–∏–µ': 'event.png',
            '–ö–æ–Ω—Ñ–ª–∏–∫—Ç': 'conflict.png',
            '–°—Ü–µ–Ω–∞': 'scene.png',
            '–ì–ª–∞–≤–∞': 'chapter.png',
            '–ó–∞–¥–∞—á–∞': 'task.png',
            '–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ': 'spell.png',
            '–ó–µ–ª—å–µ': 'potion.png',
            '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç': 'artifact.png',
            '–ê–ª—Ö–∏–º–∏—á–µ—Å–∫–∏–π —Ä–µ—Ü–µ–ø—Ç': 'alchemy.png',
            '–¢–æ—Ä–≥–æ–≤—ã–π –ø—É—Ç—å': 'trade.png',
            '–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ': 'work.png',
            '–õ–æ–∫–∞—Ü–∏—è': 'location.png',
            '–ú—ë—Ä—Ç–≤–∞—è –∑–æ–Ω–∞': 'deadzone.png',
            '–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ': 'institution.png'
        };

        return tagImages[entityType] || 'default.png';
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
module.exports = { TemplateManager };

// –ì–ª–æ–±–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.js
if (typeof window !== 'undefined') {
    window.TemplateManager = TemplateManager;
    // –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞
    if (typeof window.generateFromTemplate !== 'function') {
        window.generateFromTemplate = async function(templateName, data, plugin) {
            try {
                const manager = new TemplateManager(plugin);
                return await manager.generateFromTemplate(templateName, data, plugin);
            } catch (e) {
                console.error('window.generateFromTemplate error:', e);
                throw e;
            }
        };
    }
}
