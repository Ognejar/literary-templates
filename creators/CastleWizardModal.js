/**
 * @file       CastleWizardModal.js
 * @description –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–º–∫–∞/–∫—Ä–µ–ø–æ—Å—Ç–∏.
 * @author     [–∞–≤—Ç–æ—Ä]
 * @version    1.0.0
 * @license    [–ª–∏—Ü–µ–Ω–∑–∏—è]
 * @dependencies obsidian, utils/modals
 * @created    2023-10-27
 * @updated    2023-10-27
 * @docs       [—Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é]
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
const { EntityWizardBase } = require('./EntityWizardBase.js');

// Modal, Setting, Notice –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä

var CastleWizardModal = class extends EntityWizardBase {
    constructor(app, ModalClass, SettingClass, NoticeClass, projectRoot, onFinish) {
        super(app, ModalClass, SettingClass, NoticeClass);
        this.projectRoot = projectRoot;
        this.onFinish = onFinish;
        this.step = 0;
        this.data = {
            castleName: '',
            fortificationType: '–ó–∞–º–æ–∫', // –ó–∞–º–æ–∫ | –ö—Ä–µ–ø–æ—Å—Ç—å | –§–æ—Ä—Ç
            type: '–ó–∞–º–æ–∫',
            climate: '',
            dominantFaction: '',
            province: '',
            state: '',
            country: '',
            status: '–¥–µ–π—Å—Ç–≤—É–µ—Ç', // –¥–µ–π—Å—Ç–≤—É–µ—Ç, –∑–∞–±—Ä–æ—à–µ–Ω–æ, —Ä–∞–∑—Ä—É—à–µ–Ω–æ
            statusReason: '', // –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–±—Ä–æ—à–µ–Ω–Ω–æ—Å—Ç–∏/—Ä–∞–∑—Ä—É—à–µ–Ω–∏—è
            description: '',
            fortifications: [],
            garrison: [],
            garrisonSize: '',
            garrisonTier: '',
            notableFeatures: []
        };
        this.config = {
            locationTypes: [],
            climates: [],
            factions: [],
            provinces: [],
            states: [],
            statuses: [
                { value: '–¥–µ–π—Å—Ç–≤—É–µ—Ç', label: '–î–µ–π—Å—Ç–≤—É–µ—Ç', icon: '‚úÖ' },
                { value: '–∑–∞–±—Ä–æ—à–µ–Ω–æ', label: '–ó–∞–±—Ä–æ—à–µ–Ω–æ', icon: 'üèöÔ∏è' },
                { value: '—Ä–∞–∑—Ä—É—à–µ–Ω–æ', label: '–†–∞–∑—Ä—É—à–µ–Ω–æ', icon: 'üí•' }
            ]
        };


        this.steps = [
            '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–∏–ø',
            '–°—Ç–∞—Ç—É—Å —Ñ–æ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
            '–ö–ª–∏–º–∞—Ç –∏ —Ñ—Ä–∞–∫—Ü–∏—è',
            '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è',
            '–û–ø–∏—Å–∞–Ω–∏–µ',
            '–£–∫—Ä–µ–ø–ª–µ–Ω–∏—è',
            '–ì–∞—Ä–Ω–∏–∑–æ–Ω',
            '–ü—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏',
            '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä'
        ];
    }

    async onOpen() {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.modalEl.style.cssText = `
            max-width: 900px !important;
            width: 900px !important;
        `;
        this.contentEl.style.cssText = `
            padding: 20px;
            max-width: 900px !important;
            max-height: 80vh;
            overflow-y: auto;
        `;
        
        this.contentEl.empty();
        this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
        await this.loadConfig();
        // –ü—Ä–µ—Ñ–∏–ª–ª —Ç–∏–ø–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –∑–∞–ø—É—Å–∫–µ –∏–∑ –º–µ–Ω—é
        if (this.prefillType && typeof this.prefillType === 'string') {
            this.applyFortificationTypeDefaults(this.prefillType);
        }
        this.render();
    }

    async loadConfig() {
        try {
            const projectRoot = this.projectRoot;
            if (!projectRoot) {
                new this.Notice('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç.');
                this.close();
                return;
            }

            // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∏—Ä–∞
            const svc = window.litSettingsService;
            const ensureArray = (arr) => Array.isArray(arr) ? arr : (arr ? [arr] : []);
            if (svc && typeof svc.getClimates === 'function') {
                this.config.climates = ensureArray(await svc.getClimates(projectRoot));
                this.config.factions = ensureArray(await svc.getFactions(projectRoot));
                this.config.locationTypes = ensureArray(await svc.getLocationTypes(projectRoot));
            } else {
                // Fallback: —á–∏—Ç–∞–µ–º JSON –Ω–∞–ø—Ä—è–º—É—é
                try {
                    const jsonPath = `${projectRoot}/–ù–∞—Å—Ç—Ä–æ–π–∫–∏_–º–∏—Ä–∞.json`;
                    const raw = await this.app.vault.adapter.read(jsonPath);
                    const parsed = JSON.parse(raw || '{}');
                    const loc = parsed.locations || {};
                    this.config.climates = ensureArray(loc.climates);
                    this.config.factions = ensureArray(loc.factions);
                    this.config.locationTypes = ensureArray(loc.locationTypes);
                } catch {
                    this.config.climates = [];
                    this.config.factions = [];
                    this.config.locationTypes = [];
                }
            }

            // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –±–µ—Ä—ë–º –∏–∑ –ø–∞–ø–∫–∏ `–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏`
            this.config.allProvinces = this.loadFilesFromFolder(`${projectRoot}/–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏`, '–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏');
            this.config.provinces = []; // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞

            // –°–ø–∏—Å–æ–∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤ –±–µ—Ä—ë–º –∏–∑ –ø–∞–ø–∫–∏ `–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞`
            this.config.states = this.loadFilesFromFolder(`${projectRoot}/–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞`, '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞');

            this.data.climate = this.data.climate || (this.config.climates[0] || '');
            this.data.dominantFaction = this.data.dominantFaction || (this.config.factions[0] || '');

            console.log('DEBUG: CastleWizardModal - Config loaded. climates:', this.config.climates, 'factions:', this.config.factions);
            console.log('DEBUG: CastleWizardModal - Data initialized. climate:', this.data.climate, 'dominantFaction:', this.data.dominantFaction);

        } catch (e) {
            new this.Notice('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∑–∞–º–∫–∞: ' + e.message);
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∑–∞–º–∫–∞:', e);
            this.close();
        }
    }

    /**
     * –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É
     * @param {string} stateName - –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞
     */
    async filterProvincesByState(stateName) {
        if (!stateName) {
            this.config.provinces = [];
            return;
        }

        try {
            this.config.provinces = await super.filterProvincesByState(stateName, this.projectRoot, this.config.allProvinces);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π:', e);
            this.config.provinces = [];
        }
    }

    render() {
        this.contentEl.empty();
        const { contentEl } = this;
        let navButtons = '';

        switch (this.step) {
            case 0:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –®–∞–≥ 1/9: –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–∏–ø');
                this.renderNameAndType(contentEl);
                navButtons = '<button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 1:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –®–∞–≥ 2/9: –°—Ç–∞—Ç—É—Å —Ñ–æ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
                this.renderStatus(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 2:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –®–∞–≥ 3/9: –ö–ª–∏–º–∞—Ç –∏ —Ñ—Ä–∞–∫—Ü–∏—è');
                this.renderClimateDominantFaction(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 3:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –®–∞–≥ 4/9: –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è');
                this.renderProvince(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 4:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –®–∞–≥ 5/9: –û–ø–∏—Å–∞–Ω–∏–µ');
                this.renderDescription(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 5:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –®–∞–≥ 6/9: –£–∫—Ä–µ–ø–ª–µ–Ω–∏—è');
                this.renderFortifications(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 6:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –®–∞–≥ 7/9: –ì–∞—Ä–Ω–∏–∑–æ–Ω');
                this.renderGarrison(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 7:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –®–∞–≥ 8/9: –ü—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏');
                this.renderNotableFeatures(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 8:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –®–∞–≥ 9/9: –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä');
                this.renderPreview(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta">–°–æ–∑–¥–∞—Ç—å</button>';
                break;
            default:
                break;
        }

        this.renderNav(contentEl, navButtons);
    }

    renderNameAndType(contentEl) {
        new this.Setting(contentEl)
            .setName('–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
            .addText(text => {
                text.setPlaceholder('–ù–∞–∑–≤–∞–Ω–∏–µ (–∑–∞–º–æ–∫/–∫—Ä–µ–ø–æ—Å—Ç—å/—Ñ–æ—Ä—Ç)')
                    .setValue(this.data.castleName)
                    .onChange(value => {
                        this.data.castleName = value;
                    });
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è
                text.inputEl.style.width = '100%';
                text.inputEl.style.fontSize = '16px';
                text.inputEl.style.padding = '8px';
            });

        new this.Setting(contentEl)
            .setName('–¢–∏–ø —Ñ–æ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
            .addDropdown(d => {
                ['–ó–∞–º–æ–∫','–ö—Ä–µ–ø–æ—Å—Ç—å','–§–æ—Ä—Ç'].forEach(t => d.addOption(t, t));
                d.setValue(this.data.fortificationType || '–ó–∞–º–æ–∫');
                d.onChange(v => {
                    this.applyFortificationTypeDefaults(v);
                });
                d.selectEl.style.minWidth = '320px';
            });
    }

    renderStatus(contentEl) {
        new this.Setting(contentEl)
            .setName('–°—Ç–∞—Ç—É—Å —Ñ–æ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
            .addDropdown(dropdown => {
                this.config.statuses = this.ensureStatuses(this.config.statuses);
                this.addDropdownOptions(dropdown, this.config.statuses);
                dropdown.setValue(this.data.status);
                dropdown.onChange(value => {
                    this.data.status = value;
                    const reasonSetting = contentEl.querySelector('.status-reason-setting');
                    if (reasonSetting) {
                        reasonSetting.style.display = value === '–¥–µ–π—Å—Ç–≤—É–µ—Ç' ? 'none' : 'block';
                    }
                });
                dropdown.selectEl.style.minWidth = '320px';
                dropdown.selectEl.style.fontSize = '14px';
                dropdown.selectEl.style.padding = '6px';
            });

        const reasonSetting = new this.Setting(contentEl)
            .setName('–ü—Ä–∏—á–∏–Ω–∞')
            .addText(text => {
                text.setPlaceholder('–ù–∞–ø—Ä–∏–º–µ—Ä: –í–æ–π–Ω–∞, –æ—Å–∞–¥–∞, –∑–∞–±–≤–µ–Ω–∏–µ')
                    .setValue(this.data.statusReason)
                    .onChange(value => {
                        this.data.statusReason = value;
                    });
                text.inputEl.style.width = '100%';
                text.inputEl.style.fontSize = '16px';
                text.inputEl.style.padding = '8px';
            });
        reasonSetting.settingEl.addClass('status-reason-setting');
        if (this.data.status === '–¥–µ–π—Å—Ç–≤—É–µ—Ç') {
            reasonSetting.settingEl.style.display = 'none';
        }
    }

    applyFortificationTypeDefaults(v) {
        this.data.fortificationType = v;
        this.data.type = v;
        if (v === '–§–æ—Ä—Ç') { this.data.garrisonSize = '50‚Äì200'; this.data.garrisonTier = 'C'; }
        if (v === '–ó–∞–º–æ–∫') { this.data.garrisonSize = '200‚Äì800'; this.data.garrisonTier = 'B'; }
        if (v === '–ö—Ä–µ–ø–æ—Å—Ç—å') { this.data.garrisonSize = '800‚Äì3000'; this.data.garrisonTier = 'A'; }
    }

    renderClimateDominantFaction(contentEl) {
        new this.Setting(contentEl)
            .setName('–ö–ª–∏–º–∞—Ç')
            .addDropdown(dropdown => {
                this.config.climates.forEach(climate => dropdown.addOption(climate, climate));
                dropdown.setValue(this.data.climate || this.config.climates[0]);
                dropdown.onChange(value => this.data.climate = value);
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                dropdown.selectEl.style.minWidth = '280px';
                dropdown.selectEl.style.fontSize = '14px';
                dropdown.selectEl.style.padding = '6px';
            });

        new this.Setting(contentEl)
            .setName('–î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —Ñ—Ä–∞–∫—Ü–∏—è')
            .addDropdown(dropdown => {
                this.config.factions.forEach(faction => dropdown.addOption(faction, faction));
                dropdown.setValue(this.data.dominantFaction || this.config.factions[0]);
                dropdown.onChange(value => this.data.dominantFaction = value);
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                dropdown.selectEl.style.minWidth = '280px';
                dropdown.selectEl.style.fontSize = '14px';
                dropdown.selectEl.style.padding = '6px';
            });
    }

    renderProvince(contentEl) {
        new this.Setting(contentEl)
            .setName('–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ')
            .addDropdown(dropdown => {
                dropdown.addOption('', '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ');
                this.config.states.forEach(state => dropdown.addOption(state, state));
                dropdown.setValue(this.data.state);
                dropdown.onChange(async (value) => { 
                    this.data.state = value; 
                    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É
                    await this.filterProvincesByState(value);
                    this.render(); 
                });
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                dropdown.selectEl.style.minWidth = '320px';
                dropdown.selectEl.style.fontSize = '14px';
                dropdown.selectEl.style.padding = '6px';
            });

        new this.Setting(contentEl)
            .setName('–ü—Ä–æ–≤–∏–Ω—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
            .addDropdown(dropdown => {
                dropdown.addOption('', '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
                this.config.provinces.forEach(province => dropdown.addOption(province, province));
                dropdown.setValue(this.data.province);
                dropdown.onChange(value => this.data.province = value);
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                dropdown.selectEl.style.minWidth = '320px';
                dropdown.selectEl.style.fontSize = '14px';
                dropdown.selectEl.style.padding = '6px';
            });
    }

    renderDescription(contentEl) {
        new this.Setting(contentEl)
            .setName('–û–ø–∏—Å–∞–Ω–∏–µ')
            .addTextArea(text => {
                text.setPlaceholder('–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–º–∫–∞/–∫—Ä–µ–ø–æ—Å—Ç–∏')
                    .setValue(this.data.description)
                    .onChange(value => {
                        this.data.description = value;
                    });
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
                text.inputEl.style.width = '100%';
                text.inputEl.style.minHeight = '140px';
                text.inputEl.style.fontSize = '14px';
                text.inputEl.style.lineHeight = '1.4';
                text.inputEl.style.padding = '8px';
            });
    }

    renderFortifications(contentEl) {
        new this.Setting(contentEl)
            .setName('–£–∫—Ä–µ–ø–ª–µ–Ω–∏—è (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)')
            .addTextArea(text => {
                text.setPlaceholder('–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–π, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏')
                    .setValue(this.data.fortifications.join('\n'))
                    .onChange(value => {
                        this.data.fortifications = value.split('\n').map(f => f.trim()).filter(f => f.length > 0);
                    });
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
                text.inputEl.style.width = '100%';
                text.inputEl.style.minHeight = '120px';
                text.inputEl.style.fontSize = '14px';
                text.inputEl.style.lineHeight = '1.4';
                text.inputEl.style.padding = '8px';
            });
    }

    renderGarrison(contentEl) {
        new this.Setting(contentEl)
            .setName('–ì–∞—Ä–Ω–∏–∑–æ–Ω (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)')
            .addTextArea(text => {
                text.setPlaceholder('–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–∞—Ä–Ω–∏–∑–æ–Ω–µ, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏')
                    .setValue(this.data.garrison.join('\n'))
                    .onChange(value => {
                        this.data.garrison = value.split('\n').map(g => g.trim()).filter(g => g.length > 0);
                    });
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
                text.inputEl.style.width = '100%';
                text.inputEl.style.minHeight = '120px';
                text.inputEl.style.fontSize = '14px';
                text.inputEl.style.lineHeight = '1.4';
                text.inputEl.style.padding = '8px';
            });
    }

    renderNotableFeatures(contentEl) {
        new this.Setting(contentEl)
            .setName('–ü—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)')
            .addTextArea(text => {
                text.setPlaceholder('–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏')
                    .setValue(this.data.notableFeatures.join('\n'))
                    .onChange(value => {
                        this.data.notableFeatures = value.split('\n').map(f => f.trim()).filter(f => f.length > 0);
                    });
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
                text.inputEl.style.width = '100%';
                text.inputEl.style.minHeight = '120px';
                text.inputEl.style.fontSize = '14px';
                text.inputEl.style.lineHeight = '1.4';
                text.inputEl.style.padding = '8px';
            });
    }

    renderPreview(contentEl) {
        const previewEl = contentEl.createEl('div', { cls: 'preview-section' });
        previewEl.createEl('h3', { text: '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:' });
        previewEl.createEl('p', { text: `**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${this.data.castleName}` });
        previewEl.createEl('p', { text: `**–¢–∏–ø:** ${this.data.fortificationType}` });
        previewEl.createEl('p', { text: `**–ö–ª–∏–º–∞—Ç:** ${this.data.climate}` });
        previewEl.createEl('p', { text: `**–î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —Ñ—Ä–∞–∫—Ü–∏—è:** ${this.data.dominantFaction}` });
        if (this.data.state) {
            previewEl.createEl('p', { text: `**–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ:** ${this.data.state}` });
        }
        if (this.data.province) {
            previewEl.createEl('p', { text: `**–ü—Ä–æ–≤–∏–Ω—Ü–∏—è:** ${this.data.province}` });
        }
        previewEl.createEl('p', { text: `**–ì–∞—Ä–Ω–∏–∑–æ–Ω (–æ—Ü–µ–Ω–∫–∞):** ${this.data.garrisonSize || ''} (—É—Ä–æ–≤–µ–Ω—å ${this.data.garrisonTier || ''})` });
        previewEl.createEl('p', { text: `**–û–ø–∏—Å–∞–Ω–∏–µ:** ${this.data.description.substring(0, 100)}...` });
        previewEl.createEl('p', { text: `**–£–∫—Ä–µ–ø–ª–µ–Ω–∏—è:** ${this.data.fortifications.join(', ')}` });
        previewEl.createEl('p', { text: `**–ì–∞—Ä–Ω–∏–∑–æ–Ω:** ${this.data.garrison.join(', ')}` });
        previewEl.createEl('p', { text: `**–ü—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:** ${this.data.notableFeatures.join(', ')}` });
    }

    renderNav(contentEl, buttonsHtml) {
        const navEl = contentEl.createEl('div', { cls: 'modal-nav' });
        navEl.innerHTML = buttonsHtml;

        navEl.querySelector('#prev')?.addEventListener('click', () => {
            this.step--;
            this.render();
        });

        navEl.querySelector('#next')?.addEventListener('click', () => {
            if (this.validateCurrentStep()) {
                this.step++;
                this.render();
            }
        });

        navEl.querySelector('.mod-cta:not(#next)')?.addEventListener('click', () => {
            if (this.validateCurrentStep()) {
                this.onFinish(this.data);
                this.close();
            }
        });
    }

    validateCurrentStep() {
        switch (this.step) {
            case 0: // –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–∏–ø
                if (!this.data.castleName.trim()) {
                    new this.Notice('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–∫–∞/–∫—Ä–µ–ø–æ—Å—Ç–∏.');
                    return false;
                }
                break;
            case 1: // –°—Ç–∞—Ç—É—Å ‚Äî —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ—Ç
                break;
            case 2: // –ö–ª–∏–º–∞—Ç –∏ —Ñ—Ä–∞–∫—Ü–∏—è
                if ((this.config.climates.length > 0 && (!this.data.climate || this.data.climate.trim() === '')) ||
                    (this.config.factions.length > 0 && (!this.data.dominantFaction || this.data.dominantFaction.trim() === '')))
                {
                    new this.Notice('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–º–∞—Ç –∏ –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —Ñ—Ä–∞–∫—Ü–∏—é.');
                    return false;
                }
                break;
            case 3: // –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è (–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                if (!this.data.state || this.data.state.trim() === '') {
                    new this.Notice('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ.');
                    return false;
                }
                break;
            case 4: // –û–ø–∏—Å–∞–Ω–∏–µ
                if (!this.data.description.trim()) {
                    new this.Notice('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–º–∫–∞/–∫—Ä–µ–ø–æ—Å—Ç–∏.');
                    return false;
                }
                break;
            case 5: // –£–∫—Ä–µ–ø–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            case 6: // –ì–∞—Ä–Ω–∏–∑–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            case 7: // –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            case 8: // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                break;
        }
        return true;
    }

    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}

module.exports = { CastleWizardModal };
