/**
 * @file       createCity.js
 * @description –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞ Literary Templates
 * @author     AI Assistant
 * @version    1.0.0
 * @license    MIT
 * @dependencies main.js, modals.js, CityWizardModal
 * @created    2025-01-09
 * @updated    2025-01-09
 * @docs       docs/project.md
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ main.js
const { findProjectRoot, generateFromTemplate, ensureEntityInfrastructure, safeCreateFile } = require('../main.js');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TFile –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
const { TFile } = require('obsidian');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
const { CityWizardModal } = require('../CityWizardModal.js');

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
 */
var createCity = async function(plugin, startPath = '', options = {}) {
    try {
        await plugin.logDebug('[DEBUG] createCity: –¢–ï–°–¢–û–í–´–ô –õ–û–ì ‚Äî –≠–¢–û –¢–û–ß–ù–û –ù–û–í–´–ô –ö–û–î!');
        await plugin.logDebug('=== createCity –≤—ã–∑–≤–∞–Ω–∞ ===');
        await plugin.logDebug('startPath: ' + startPath);

        console.log('createCity –≤—ã–∑–≤–∞–Ω–∞!');

        let resolvedProjectRoot = '';
        if (startPath) {
            resolvedProjectRoot = findProjectRoot(plugin.app, startPath) || startPath;
        }
        let project = '';
        if (resolvedProjectRoot) {
            project = resolvedProjectRoot;
        } else {
            const allFiles = plugin.app.vault.getMarkdownFiles();
            const projectFiles = allFiles.filter(f => f.basename === '–ù–∞—Å—Ç—Ä–æ–π–∫–∏_–º–∏—Ä–∞');
            const projects = projectFiles.map(f => f.parent.path);
            if (projects.length === 0) {
                new Notice('–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
                await plugin.logDebug('–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
                return;
            }
            project = await plugin.selectProject(projects);
            if (!project) return;
        }
        await plugin.logDebug('project: ' + project);

        const modal = new CityWizardModal(plugin.app, Modal, Setting, Notice, project, async (cityData) => {
            try {
                await plugin.logDebug('=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞ ===');
                await plugin.logDebug('cityData: ' + JSON.stringify(cityData));
                
                const cleanName = cityData.cityName.trim().replace(/[^–∞-—è–ê-–Ø—ë–Å\w\s-.]/g, '').replace(/\s+/g, '_');
                await plugin.logDebug('cleanName: ' + cleanName);
                
                const featuresContent = cityData.features.map(f => `- ${f}`).join('\n');
                const mainIndustriesContent = cityData.mainIndustries ? cityData.mainIndustries.map(i => `- ${i}`).join('\n') : '';
                const districtsContent = cityData.districts ? cityData.districts.map(d => `- ${d}`).join('\n') : '';
                const uniqueFeaturesContent = cityData.uniqueFeatures ? cityData.uniqueFeatures.map(f => `- ${f}`).join('\n') : '';

                // –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¢–µ–≥–æ–≤—ã–µ_–∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ —Ç–∏–ø—É
                const tagFolder = `${project}/–¢–µ–≥–æ–≤—ã–µ_–∫–∞—Ä—Ç–∏–Ω–∫–∏`;
                const baseName = cityData.type || '–ì–æ—Ä–æ–¥';
                const exts = ['jpg','jpeg','png','webp'];
                let tagImage = '';
                for (const ext of exts) {
                    const p = `${tagFolder}/${baseName}.${ext}`;
                    const f = plugin.app.vault.getAbstractFileByPath(p);
                    if (f && f instanceof TFile) { tagImage = p; break; }
                }
                const imageBlock = tagImage ? `![[${tagImage}]]` : '';

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (—Å –∞–≤—Ç–æ-–Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ)
                const targetFolder = `${project}/–õ–æ–∫–∞—Ü–∏–∏/–ì–æ—Ä–æ–¥–∞`;
                await plugin.logDebug('targetFolder: ' + targetFolder);
                await ensureEntityInfrastructure(targetFolder, cleanName, plugin.app);
                
                let fileName = cleanName;
                const makePath = (name) => `${targetFolder}/${name}.md`;
                let attempt = 1;
                // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å _2, _3, ...
                while (plugin.app.vault.getAbstractFileByPath(makePath(fileName))) {
                    attempt += 1;
                    fileName = `${cleanName}_${attempt}`;
                }
                await plugin.logDebug('final fileName: ' + fileName);
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                const cityNameForFile = fileName;
                
                // –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ì–û–°–£–î–ê–†–°–¢–í–û - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
                let country = '';
                console.log('üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞...');
                console.log('–†–µ–∂–∏–º —é—Ä–∏—Å–¥–∏–∫—Ü–∏–∏:', cityData.jurisdictionMode);
                console.log('–ü—Ä–æ–≤–∏–Ω—Ü–∏—è:', cityData.province);
                console.log('State –∏–∑ –¥–∞–Ω–Ω—ã—Ö:', cityData.state);
                console.log('Country –∏–∑ –¥–∞–Ω–Ω—ã—Ö:', cityData.country);
                
                if (cityData.jurisdictionMode === 'province' && cityData.province) {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≤–∏–Ω—Ü–∏—è, –∏—â–µ–º –µ—ë –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ
                    const provinceFilePath = `${project}/–õ–æ–∫–∞—Ü–∏–∏/–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏/${cityData.province}.md`;
                    console.log('üìÅ –ò—â–µ–º —Ñ–∞–π–ª –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏:', provinceFilePath);
                    
                    const provinceFile = plugin.app.vault.getAbstractFileByPath(provinceFilePath);
                    if (provinceFile) {
                        try {
                            const provinceContent = await plugin.app.vault.read(provinceFile);
                            console.log('üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏:', provinceContent.substring(0, 200));
                            
                            // –ò—â–µ–º state –∏–ª–∏ country –≤ —Ñ—Ä–æ–Ω—Ç–º–∞—Ç—Ç–µ—Ä–µ
                            const stateMatch = provinceContent.match(/state\s*:\s*(.*)/i);
                            const countryMatch = provinceContent.match(/country\s*:\s*(.*)/i);
                            
                            console.log('üèõÔ∏è State –ø–æ–ª–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏:', stateMatch ? stateMatch[1] : '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                            console.log('üá∫üá≥ Country –ø–æ–ª–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏:', countryMatch ? countryMatch[1] : '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                            
                            // –ë–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ state –∏–ª–∏ country, –æ—á–∏—â–∞–µ–º –æ—Ç –∫–∞–≤—ã—á–µ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
                            const stateValue = stateMatch ? stateMatch[1].trim().replace(/['"]/g, '') : '';
                            const countryValue = countryMatch ? countryMatch[1].trim().replace(/['"]/g, '') : '';
                            
                            country = stateValue || countryValue;
                            console.log('‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –∏–∑ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏:', country);
                            
                        } catch (e) {
                            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏:', e.message);
                            await plugin.logDebug('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞: ' + e.message);
                        }
                    } else {
                        console.error('‚ùå –§–∞–π–ª –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:', provinceFilePath);
                    }
                } else if (cityData.jurisdictionMode === 'countryOnly') {
                    // –ï—Å–ª–∏ –ø—Ä—è–º–æ–π —Ä–µ–∂–∏–º, –±–µ—Ä–µ–º –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –Ω–∞–ø—Ä—è–º—É—é
                    country = (cityData.country === 'manual') ? (cityData.countryManual || '') : (cityData.country || '');
                    console.log('‚úÖ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –∏–∑ –ø—Ä—è–º–æ–≥–æ –≤—ã–±–æ—Ä–∞:', country);
                }
                
                // –ó–ê–ü–ê–°–ù–´–ï –í–ê–†–ò–ê–ù–¢–´ - –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–∞—è
                if (!country) {
                    if (cityData.state) {
                        country = cityData.state;
                        console.log('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º state –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:', country);
                    } else if (cityData.country) {
                        country = cityData.country;
                        console.log('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º country –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:', country);
                    } else {
                        console.warn('‚ö†Ô∏è  –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º');
                    }
                }
                
                console.log('üéØ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ country:', country);

                const data = {
                    cityName: cityData.cityName,
                    type: cityData.type || '–ì–æ—Ä–æ–¥',
                    typeLower: cityData.type ? cityData.type.toLowerCase() : '–≥–æ—Ä–æ–¥',
                    province: cityData.province || '',
                    country: country, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    climate: cityData.climate || '',
                    dominantFaction: cityData.dominantFaction || '',
                    // –°—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏—á–∏–Ω–∞
                    status: cityData.status || '–¥–µ–π—Å—Ç–≤—É–µ—Ç',
                    statusReason: cityData.statusReason || '',
                    statusLabel: (cityData.status === '–∑–∞–±—Ä–æ—à–µ–Ω–æ' ? 'üèöÔ∏è –ó–∞–±—Ä–æ—à–µ–Ω–æ' : (cityData.status === '—Ä–∞–∑—Ä—É—à–µ–Ω–æ' ? 'üí• –†–∞–∑—Ä—É—à–µ–Ω–æ' : '‚úÖ –î–µ–π—Å—Ç–≤—É–µ—Ç')),
                    description: cityData.description || `[[${cityNameForFile}_–û–ø–∏—Å–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞]]`,
                    history: cityData.history || `[[${cityNameForFile}_–ò—Å—Ç–æ—Ä–∏—è|–ò—Å—Ç–æ—Ä–∏—è –≥–æ—Ä–æ–¥–∞]]`,
                    infrastructure: cityData.infrastructure || `[[${cityNameForFile}_–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞|–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–∞]]`,
                    economy: cityData.economy || `[[${cityNameForFile}_–≠–∫–æ–Ω–æ–º–∏–∫–∞|–≠–∫–æ–Ω–æ–º–∏–∫–∞ –≥–æ—Ä–æ–¥–∞]]`,
                    culture: cityData.culture || `[[${cityNameForFile}_–ö—É–ª—å—Ç—É—Ä–∞|–ö—É–ª—å—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–∞]]`,
                    date: window.moment ? window.moment().format('YYYY-MM-DD') : new Date().toISOString().slice(0, 10),
                    projectName: project.split('/').pop(),
                    mainIndustriesSection: mainIndustriesContent || '–ù–µ —É–∫–∞–∑–∞–Ω—ã',
                    districtsSection: districtsContent || '–ù–µ —É–∫–∞–∑–∞–Ω—ã',
                    featuresContent: featuresContent || '–ù–µ —É–∫–∞–∑–∞–Ω—ã',
                    uniqueFeaturesSection: uniqueFeaturesContent || '–ù–µ —É–∫–∞–∑–∞–Ω—ã',
                    imageBlock
                };
                
                await plugin.logDebug('data –¥–ª—è —à–∞–±–ª–æ–Ω–∞: ' + JSON.stringify(data));

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
                await plugin.logDebug('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞...');
                const content = await generateFromTemplate('–ù–æ–≤—ã–π_–≥–æ—Ä–æ–¥', data, plugin);
                await plugin.logDebug('–ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: ' + content.length);
                
                const targetPath = makePath(fileName);
                await plugin.logDebug('targetPath: ' + targetPath);
                await plugin.logDebug('targetPath —Ç–∏–ø: ' + typeof targetPath);
                await plugin.logDebug('targetPath –¥–ª–∏–Ω–∞: ' + targetPath.length);
                
                await plugin.logDebug('–°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª...');
                const file = await safeCreateFile(targetPath, content, plugin.app);
                
                if (file instanceof TFile) {
                    await plugin.logDebug('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º...');
                    await plugin.app.workspace.getLeaf().openFile(file);
                    new Notice(`–°–æ–∑–¥–∞–Ω –≥–æ—Ä–æ–¥: ${fileName}`);
                }
            } catch (error) {
                await plugin.logDebug('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞: ' + error.message);
                new Notice('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: ' + error.message);
                console.error('–û—à–∏–±–∫–∞ –≤ createCity:', error);
                // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –º–∞—Å—Ç–µ—Ä –Ω–µ –∑–∞–∫—Ä—ã–ª—Å—è
                throw error;
            }
        });
        modal.open();
    } catch (error) {
        new Notice('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: ' + error.message);
        await plugin.logDebug('–û—à–∏–±–∫–∞: ' + error.message);
        console.error('–û—à–∏–±–∫–∞ –≤ createCity:', error);
    }
};

module.exports = { createCity };