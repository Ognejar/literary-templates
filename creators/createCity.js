/**
 * @file       createCity.js
 * @description –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞ Literary Templates
 * @author     AI Assistant
 * @version    1.0.0
 * @license    MIT
 * @dependencies main.js, modals.js, CityWizardModal
 * @created    2025-01-09
 * @updated    2025-01-09
 * @docs       docs/project.md
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ main.js
const { findProjectRoot, generateFromTemplate, ensureEntityInfrastructure, safeCreateFile } = require('../main.js');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TFile –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
const { TFile } = require('obsidian');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
const { CityWizardModal } = require('../CityWizardModal.js');

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
 */
async function createCity(plugin, startPath = '') {
    try {
        await plugin.logDebug('[DEBUG] createCity: –¢–ï–°–¢–û–í–´–ô –õ–û–ì ‚Äî –≠–¢–û –¢–û–ß–ù–û –ù–û–í–´–ô –ö–û–î!');
        await plugin.logDebug('=== createCity –≤—ã–∑–≤–∞–Ω–∞ ===');
        await plugin.logDebug('startPath: ' + startPath);

        console.log('createCity –≤—ã–∑–≤–∞–Ω–∞!');

        let projectRoot = '';
        if (startPath) {
            projectRoot = findProjectRoot(plugin.app, startPath);
        }
        let project = '';
        if (projectRoot) {
            project = projectRoot;
        } else {
            const allFiles = plugin.app.vault.getMarkdownFiles();
            const projectFiles = allFiles.filter(f => f.basename === '–ù–∞—Å—Ç—Ä–æ–π–∫–∏_–º–∏—Ä–∞');
            const projects = projectFiles.map(f => f.parent.path);
            if (projects.length === 0) {
                new Notice('–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
                await plugin.logDebug('–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
                return;
            }
            project = await plugin.selectProject(projects);
            if (!project) return;
        }
        await plugin.logDebug('project: ' + project);

        const modal = new CityWizardModal(plugin.app, Modal, Setting, Notice, project, async (cityData) => {
            try {
                await plugin.logDebug('=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞ ===');
                await plugin.logDebug('cityData: ' + JSON.stringify(cityData));
                
                const cleanName = cityData.cityName.trim().replace(/[^–∞-—è–ê-–Ø—ë–Å\w\s-.]/g, '').replace(/\s+/g, '_');
                await plugin.logDebug('cleanName: ' + cleanName);
                
                const featuresContent = cityData.features.map(f => `- ${f}`).join('\n');
                const mainIndustriesContent = cityData.mainIndustries ? cityData.mainIndustries.map(i => `- ${i}`).join('\n') : '';
                const districtsContent = cityData.districts ? cityData.districts.map(d => `- ${d}`).join('\n') : '';
                const uniqueFeaturesContent = cityData.uniqueFeatures ? cityData.uniqueFeatures.map(f => `- ${f}`).join('\n') : '';

                // –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¢–µ–≥–æ–≤—ã–µ_–∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ —Ç–∏–ø—É
                const tagFolder = `${project}/–¢–µ–≥–æ–≤—ã–µ_–∫–∞—Ä—Ç–∏–Ω–∫–∏`;
                const baseName = cityData.type || '–ì–æ—Ä–æ–¥';
                const exts = ['jpg','jpeg','png','webp'];
                let tagImage = '';
                for (const ext of exts) {
                    const p = `${tagFolder}/${baseName}.${ext}`;
                    const f = plugin.app.vault.getAbstractFileByPath(p);
                    if (f && f instanceof TFile) { tagImage = p; break; }
                }
                const imageBlock = tagImage ? `![[${tagImage}]]` : '';

                // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∑–∞–º–µ—Ç–∫–∏
                const cityNameForFile = cleanName;
                const data = {
                    cityName: cityData.cityName,
                    type: cityData.type || '–ì–æ—Ä–æ–¥',
                    typeLower: cityData.type ? cityData.type.toLowerCase() : '–≥–æ—Ä–æ–¥',
                    province: cityData.province || '',
                    climate: cityData.climate || '',
                    dominantFaction: cityData.dominantFaction || '',
                    // –°—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏—á–∏–Ω–∞
                    status: cityData.status || '–¥–µ–π—Å—Ç–≤—É–µ—Ç',
                    statusReason: cityData.statusReason || '',
                    statusLabel: (cityData.status === '–∑–∞–±—Ä–æ—à–µ–Ω–æ' ? 'üèöÔ∏è –ó–∞–±—Ä–æ—à–µ–Ω–æ' : (cityData.status === '—Ä–∞–∑—Ä—É—à–µ–Ω–æ' ? 'üí• –†–∞–∑—Ä—É—à–µ–Ω–æ' : '‚úÖ –î–µ–π—Å—Ç–≤—É–µ—Ç')),
                    description: cityData.description || `[[${cityNameForFile}_–û–ø–∏—Å–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞]]`,
                    history: cityData.history || `[[${cityNameForFile}_–ò—Å—Ç–æ—Ä–∏—è|–ò—Å—Ç–æ—Ä–∏—è –≥–æ—Ä–æ–¥–∞]]`,
                    infrastructure: cityData.infrastructure || `[[${cityNameForFile}_–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞|–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–∞]]`,
                    economy: cityData.economy || `[[${cityNameForFile}_–≠–∫–æ–Ω–æ–º–∏–∫–∞|–≠–∫–æ–Ω–æ–º–∏–∫–∞ –≥–æ—Ä–æ–¥–∞]]`,
                    culture: cityData.culture || `[[${cityNameForFile}_–ö—É–ª—å—Ç—É—Ä–∞|–ö—É–ª—å—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–∞]]`,
                    date: window.moment ? window.moment().format('YYYY-MM-DD') : new Date().toISOString().slice(0, 10),
                    projectName: project.split('/').pop(),
                    mainIndustriesSection: mainIndustriesContent || '–ù–µ —É–∫–∞–∑–∞–Ω—ã',
                    districtsSection: districtsContent || '–ù–µ —É–∫–∞–∑–∞–Ω—ã',
                    featuresContent: featuresContent || '–ù–µ —É–∫–∞–∑–∞–Ω—ã',
                    uniqueFeaturesSection: uniqueFeaturesContent || '–ù–µ —É–∫–∞–∑–∞–Ω—ã',
                    imageBlock
                };
                
                await plugin.logDebug('data –¥–ª—è —à–∞–±–ª–æ–Ω–∞: ' + JSON.stringify(data));

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
                await plugin.logDebug('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞...');
                const content = await generateFromTemplate('–ù–æ–≤—ã–π_–≥–æ—Ä–æ–¥', data, plugin);
                await plugin.logDebug('–ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: ' + content.length);
                
                const fileName = cleanName;
                const targetFolder = `${project}/–õ–æ–∫–∞—Ü–∏–∏/–ì–æ—Ä–æ–¥–∞`;
                await plugin.logDebug('targetFolder: ' + targetFolder);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
                const folderExists = plugin.app.vault.getAbstractFileByPath(targetFolder);
                await plugin.logDebug('–ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ' + (folderExists ? '–î–∞' : '–ù–µ—Ç'));
                if (folderExists) {
                    await plugin.logDebug('–¢–∏–ø –ø–∞–ø–∫–∏: ' + folderExists.constructor.name);
                    await plugin.logDebug('–ü—É—Ç—å –ø–∞–ø–∫–∏: ' + folderExists.path);
                }
                
                await plugin.logDebug('–°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É...');
                await ensureEntityInfrastructure(targetFolder, fileName, plugin.app);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                const folderAfterCreation = plugin.app.vault.getAbstractFileByPath(targetFolder);
                await plugin.logDebug('–ü–∞–ø–∫–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ' + (folderAfterCreation ? '–î–∞' : '–ù–µ—Ç'));
                
                const targetPath = `${targetFolder}/${fileName}.md`;
                await plugin.logDebug('targetPath: ' + targetPath);
                await plugin.logDebug('targetPath —Ç–∏–ø: ' + typeof targetPath);
                await plugin.logDebug('targetPath –¥–ª–∏–Ω–∞: ' + targetPath.length);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –ø—É—Ç–µ–º
                const existingFileCheck = plugin.app.vault.getAbstractFileByPath(targetPath);
                await plugin.logDebug('–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ –ø—É—Ç–∏: ' + (existingFileCheck ? '–î–∞' : '–ù–µ—Ç'));
                if (existingFileCheck) {
                    await plugin.logDebug('–¢–∏–ø —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞: ' + existingFileCheck.constructor.name);
                    await plugin.logDebug('–ü—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞: ' + existingFileCheck.path);
                }
                
                await plugin.logDebug('–°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª...');
                const file = await safeCreateFile(targetPath, content, plugin.app);
                
                if (file instanceof TFile) {
                    await plugin.logDebug('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º...');
                    await plugin.app.workspace.getLeaf().openFile(file);
                    new Notice(`–°–æ–∑–¥–∞–Ω –≥–æ—Ä–æ–¥: ${fileName}`);
                } else {
                    await plugin.logDebug('–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª, –æ—Ç–∫—Ä—ã–≤–∞–µ–º...');
                    const existingFile = plugin.app.vault.getAbstractFileByPath(targetPath);
                    if (existingFile instanceof TFile) {
                        await plugin.app.workspace.getLeaf().openFile(existingFile);
                        new Notice(`–û—Ç–∫—Ä—ã—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥: ${fileName}`);
                    }
                }
            } catch (error) {
                await plugin.logDebug('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞: ' + error.message);
                new Notice('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: ' + error.message);
                console.error('–û—à–∏–±–∫–∞ –≤ createCity:', error);
            }
        });
        modal.open();
    } catch (error) {
        new Notice('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: ' + error.message);
        await plugin.logDebug('–û—à–∏–±–∫–∞: ' + error.message);
        console.error('–û—à–∏–±–∫–∞ –≤ createCity:', error);
    }
}

module.exports = { createCity };
