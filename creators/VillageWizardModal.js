/**
 * @file       VillageWizardModal.js
 * @description –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –¥–µ—Ä–µ–≤–Ω–∏.
 * @author     Cursor
 * @version    1.0.0
 * @license    MIT
 * @dependencies obsidian, ../utils/modals
 * @created    [–¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è]
 * @updated    [–¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è]
 * @docs       /docs/project.md
 */

const { Modal, Setting } = require('obsidian');
const { EntityWizardBase } = require('./EntityWizardBase.js');

class VillageWizardModal extends EntityWizardBase {
    constructor(app, ModalClass, SettingClass, NoticeClass, autocompleteData, onFinish) {
        super(app, ModalClass, SettingClass, NoticeClass);
        this.autocompleteData = autocompleteData; // { provincesList }
        this.onFinish = onFinish;
        this.state = {
            step: 0,
            villageName: '',
            climate: '',
            faction: '',
            province: '',
            state: '', // –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ (—É–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é)
            status: '–¥–µ–π—Å—Ç–≤—É–µ—Ç', // –¥–µ–π—Å—Ç–≤—É–µ—Ç, –∑–∞–±—Ä–æ—à–µ–Ω–æ, —Ä–∞–∑—Ä—É—à–µ–Ω–æ
            statusReason: '', // –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–±—Ä–æ—à–µ–Ω–Ω–æ—Å—Ç–∏/—Ä–∞–∑—Ä—É—à–µ–Ω–∏—è
            description: '',
            population: '',
            mainCrops: [],
            crafts: [],
            features: [],
        };
        this.steps = [
            '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–Ω–∏',
            '–°—Ç–∞—Ç—É—Å –¥–µ—Ä–µ–≤–Ω–∏',
            '–ö–ª–∏–º–∞—Ç –∏ —Ñ—Ä–∞–∫—Ü–∏—è',
            '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ',
            '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è',
            '–û–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ',
            '–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ',
            '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏',
            '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä',
        ];
    }
    
    async onOpen() {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.applyBaseUI();
        this.modalEl.style.cssText = `
            max-width: 900px !important;
            width: 900px !important;
        `;
        this.contentEl.style.cssText = `
            padding: 20px;
            max-width: 900px !important;
            max-height: 80vh;
            overflow-y: auto;
        `;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∏–∑ –ø–∞–ø–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
        try {
            const projectRoot = this.autocompleteData?.projectRoot;
            if (projectRoot) {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–º–∞—Ç—ã –∏ —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–∑ –ø–∞–ø–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
                Promise.all([
                    this.loadClimatesFromProject(projectRoot),
                    this.loadFactionsFromProject(projectRoot)
                ]).then(async ([climates, factions]) => {
                    this._climates = climates;
                    this._factions = factions;
                    console.log('üîß –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–ª–∏–º–∞—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞:', climates);
                    console.log('üîß –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞:', factions);
                    await this.render();
                }).catch(async (error) => {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:', error);
                    await this.render();
                });
            } else {
                console.warn('‚ö†Ô∏è projectRoot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                await this.render();
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:', error);
            await this.render();
        }

        await this.render();
    }
    
    async render() {
        const { contentEl } = this;
        contentEl.empty();
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const progress = contentEl.createDiv('progress-indicator');
        progress.style.cssText = `
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            padding: 10px;
            background: var(--background-secondary);
            border-radius: 8px;
        `;
        
        this.steps.forEach((step, index) => {
            const stepEl = progress.createDiv('step');
            stepEl.style.cssText = `
                padding: 5px 10px;
                border-radius: 4px;
                font-size: 12px;
                font-weight: ${index === this.state.step ? '600' : '400'};
                color: ${index === this.state.step ? 'var(--text-on-accent)' : 'var(--text-muted)'};
                background: ${index === this.state.step ? 'var(--interactive-accent)' : 'transparent'};
            `;
            stepEl.textContent = step;
        });
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        switch (this.state.step) {
            case 0: this.renderVillageName(contentEl); break;
            case 1: this.renderStatus(contentEl); break;
            case 2: this.renderClimateFaction(contentEl); break;
            case 3: this.renderState(contentEl); break;
            case 4: this.renderProvince(contentEl); break;
            case 5: this.renderDescriptionPopulation(contentEl); break;
            case 6: this.renderAgriculture(contentEl); break;
            case 7: this.renderFeatures(contentEl); break;
            case 8: this.renderPreview(contentEl); break;
        }
    }
    
    renderVillageName(el) {
        // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const header = el.createEl('h2', { text: '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–Ω–∏' });
        header.style.cssText = `
            margin: 20px 0;
            color: var(--text-accent);
            font-size: 20px;
            font-weight: 600;
            border-bottom: 2px solid var(--background-modifier-border);
            padding-bottom: 10px;
        `;
        
        // –°–ø—Ä–∞–≤–∫–∞
        const help = el.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üèòÔ∏è –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–Ω–∏. –≠—Ç–æ –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ.
            </div>
        `;
        
        const input = el.createEl('input', { 
            type: 'text', 
            value: this.state.villageName, 
            placeholder: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–Ω–∏' 
        });
        input.style.cssText = `
            width: 100%;
            padding: 12px;
            border: 1px solid var(--background-modifier-border);
            border-radius: 6px;
            font-size: 16px;
            background: var(--background-primary);
            color: var(--text-normal);
        `;
        input.addEventListener('input', e => { this.state.villageName = input.value; });
        
        this.renderNav(el, async () => {
            if (!this.state.villageName.trim()) {
                console.warn('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!');
                return;
            }
            this.state.step++;
            await this.render();
        });
    }

    renderStatus(el) {
        // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const header = el.createEl('h2', { text: '–°—Ç–∞—Ç—É—Å –¥–µ—Ä–µ–≤–Ω–∏' });
        header.style.cssText = `
            margin: 20px 0;
            color: var(--text-accent);
            font-size: 20px;
            font-weight: 600;
            border-bottom: 2px solid var(--background-modifier-border);
            padding-bottom: 10px;
        `;
        
        // –°–ø—Ä–∞–≤–∫–∞
        const help = el.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üèöÔ∏è –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–µ—Ä–µ–≤–Ω–∏. –î–ª—è –∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã—Ö –∏–ª–∏ —Ä–∞–∑—Ä—É—à–µ–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–µ–Ω—å —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É.
            </div>
        `;
        
        // –°—Ç–∞—Ç—É—Å
        el.createEl('h3', { text: '–°—Ç–∞—Ç—É—Å' });
        const statuses = [
            { value: '–¥–µ–π—Å—Ç–≤—É–µ—Ç', label: '‚úÖ –î–µ–π—Å—Ç–≤—É–µ—Ç', icon: '‚úÖ' },
            { value: '–∑–∞–±—Ä–æ—à–µ–Ω–æ', label: 'üèöÔ∏è –ó–∞–±—Ä–æ—à–µ–Ω–æ', icon: 'üèöÔ∏è' },
            { value: '—Ä–∞–∑—Ä—É—à–µ–Ω–æ', label: 'üí• –†–∞–∑—Ä—É—à–µ–Ω–æ', icon: 'üí•' }
        ];
        const statusContainer = el.createDiv();
        statusContainer.style.cssText = `
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-bottom: 20px;
        `;
        statuses.forEach(status => {
            const btn = statusContainer.createEl('button', { text: status.label });
            btn.style.cssText = `
                padding: 8px 16px;
                border: 1px solid var(--background-modifier-border);
                border-radius: 6px;
                background: ${this.state.status === status.value ? 'var(--interactive-accent)' : 'var(--background-primary)'};
                color: ${this.state.status === status.value ? 'var(--text-on-accent)' : 'var(--text-normal)'};
                cursor: pointer;
                font-size: 14px;
            `;
            btn.addEventListener('click', () => {
                this.state.status = status.value;
                this.render();
            });
        });
        
        // –ü—Ä–∏—á–∏–Ω–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤)
        if (this.state.status !== '–¥–µ–π—Å—Ç–≤—É–µ—Ç') {
            el.createEl('h3', { text: '–ü—Ä–∏—á–∏–Ω–∞' });
            const reasonInput = el.createEl('input', { 
                type: 'text', 
                value: this.state.statusReason, 
                placeholder: '–ù–∞–ø—Ä–∏–º–µ—Ä: –í–æ–π–Ω–∞, —ç–ø–∏–¥–µ–º–∏—è, –º–∏–≥—Ä–∞—Ü–∏—è' 
            });
            reasonInput.style.cssText = `
                width: 100%;
                padding: 12px;
                border: 1px solid var(--background-modifier-border);
                border-radius: 6px;
                font-size: 16px;
                background: var(--background-primary);
                color: var(--text-normal);
                margin-bottom: 20px;
            `;
            reasonInput.addEventListener('input', e => { this.state.statusReason = reasonInput.value; });
        }
        
        this.renderNav(el, async () => {
            if (this.state.status !== '–¥–µ–π—Å—Ç–≤—É–µ—Ç' && !this.state.statusReason.trim()) {
                console.warn('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –Ω–µ–¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞!');
                return;
            }
            this.state.step++;
            await this.render();
        });
    }
    
    renderClimateFaction(el) {
        // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const header = el.createEl('h2', { text: '–ö–ª–∏–º–∞—Ç –∏ —Ñ—Ä–∞–∫—Ü–∏—è' });
        header.style.cssText = `
            margin: 20px 0;
            color: var(--text-accent);
            font-size: 20px;
            font-weight: 600;
            border-bottom: 2px solid var(--background-modifier-border);
            padding-bottom: 10px;
        `;
        
        // –°–ø—Ä–∞–≤–∫–∞
        const help = el.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üåç –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–æ–Ω—É –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ñ—Ä–∞–∫—Ü–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–µ—Ä–µ–≤–Ω—è. –≠—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∫—É, –∫—É–ª—å—Ç—É—Ä—É –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–≥–∏–æ–Ω–∞.
            </div>
        `;
        
        // –ö–ª–∏–º–∞—Ç
        el.createEl('h3', { text: '–ö–ª–∏–º–∞—Ç' });
        const climates = (this._climates && this._climates.length > 0) ? this._climates : ['–£–º–µ—Ä–µ–Ω–Ω—ã–π', '–•–æ–ª–æ–¥–Ω—ã–π', '–¢—ë–ø–ª—ã–π', '–ó–∞—Å—É—à–ª–∏–≤—ã–π', '–í–ª–∞–∂–Ω—ã–π', '–ì–æ—Ä–Ω—ã–π'];
        console.log('üåç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∏–º–∞—Ç—ã:', climates);
        console.log('üåç –ò—Å—Ç–æ—á–Ω–∏–∫ –∫–ª–∏–º–∞—Ç–æ–≤:', this._climates && this._climates.length > 0 ? '–∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞' : '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        const climateContainer = el.createDiv();
        climateContainer.style.cssText = `
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-bottom: 20px;
        `;
        climates.forEach(climate => {
            const btn = climateContainer.createEl('button', { text: climate });
            btn.style.cssText = `
                padding: 8px 16px;
                margin: 0;
                background: ${this.state.climate === climate ? 'var(--interactive-accent)' : 'var(--background-secondary)'};
                color: ${this.state.climate === climate ? 'var(--text-on-accent)' : 'var(--text-normal)'};
                border: 1px solid var(--background-modifier-border);
                border-radius: 6px;
                font-size: 14px;
                cursor: pointer;
                transition: all 0.2s ease;
            `;
            btn.addEventListener('mouseenter', () => {
                if (this.state.climate !== climate) {
                    btn.style.background = 'var(--background-modifier-hover)';
                }
            });
            btn.addEventListener('mouseleave', () => {
                if (this.state.climate !== climate) {
                    btn.style.background = 'var(--background-secondary)';
                }
            });
            btn.onclick = () => {
                this.state.climate = climate;
                this.render();
            };
        });
        
        // –§—Ä–∞–∫—Ü–∏—è
        el.createEl('h3', { text: '–§—Ä–∞–∫—Ü–∏—è' });
        const factions = (this._factions && this._factions.length > 0) ? this._factions : ['–í–µ–ª—é–≥—Ä–∞–¥–∏—è', '–ì–∞–ª–∏–Ω–¥–∏—è', '–î—Ä–∞–∫–æ–Ω–∏–π —Ö—Ä–µ–±–µ—Ç', '–ö—Ä–∞–∫–æ–≤–µ–π', '–î—Ä—É–≥–æ–µ'];
        console.log('üèõÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏:', factions);
        console.log('üèõÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ —Ñ—Ä–∞–∫—Ü–∏–π:', this._factions && this._factions.length > 0 ? '–∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞' : '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        const factionContainer = el.createDiv();
        factionContainer.style.cssText = `
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-bottom: 20px;
        `;
        factions.forEach(faction => {
            const btn = factionContainer.createEl('button', { text: faction });
            btn.style.cssText = `
                padding: 8px 16px;
                margin: 0;
                background: ${this.state.faction === faction ? 'var(--interactive-accent)' : 'var(--background-secondary)'};
                color: ${this.state.faction === faction ? 'var(--text-on-accent)' : 'var(--text-normal)'};
                border: 1px solid var(--background-modifier-border);
                border-radius: 6px;
                font-size: 14px;
                cursor: pointer;
                transition: all 0.2s ease;
            `;
            btn.addEventListener('mouseenter', () => {
                if (this.state.faction !== faction) {
                    btn.style.background = 'var(--background-modifier-hover)';
                }
            });
            btn.addEventListener('mouseleave', () => {
                if (this.state.faction !== faction) {
                    btn.style.background = 'var(--background-secondary)';
                }
            });
            btn.onclick = () => {
                this.state.faction = faction;
                this.render();
            };
        });
        
        this.renderNav(el, async () => {
            if (!this.state.climate || !this.state.faction) {
                console.warn('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–º–∞—Ç –∏ —Ñ—Ä–∞–∫—Ü–∏—é!');
                return;
            }
            this.state.step++;
            await this.render();
        }, true);
    }
    
    renderState(el) {
        // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const header = el.createEl('h2', { text: '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ' });
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('üîç renderState –≤—ã–∑–≤–∞–Ω');
        console.log('üîç autocompleteData:', this.autocompleteData);
        console.log('üîç projectRoot:', this.autocompleteData?.projectRoot);
        header.style.cssText = `
            margin: 20px 0;
            color: var(--text-accent);
            font-size: 20px;
            font-weight: 600;
            border-bottom: 2px solid var(--background-modifier-border);
            padding-bottom: 10px;
        `;
        
        // –°–ø—Ä–∞–≤–∫–∞
        const help = el.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üèõÔ∏è –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é. –≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –∫–∞–∫–∏–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.
            </div>
        `;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤
        const statesList = this.loadStatesList();
        console.log('üèõÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞:', statesList);
        console.log('üèõÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤:', statesList.length);
        
        if (statesList && statesList.length > 0) {
            el.createEl('h3', { text: '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ:' });
            const stateContainer = el.createDiv();
            stateContainer.style.cssText = `
                display: flex;
                flex-wrap: wrap;
                gap: 8px;
                margin-bottom: 20px;
            `;
            statesList.forEach(state => {
                const btn = stateContainer.createEl('button', { text: state });
                btn.style.cssText = `
                    padding: 8px 16px;
                    margin: 0;
                    background: ${this.state.state === state ? 'var(--interactive-accent)' : 'var(--background-secondary)'};
                    color: ${this.state.state === state ? 'var(--text-on-accent)' : 'var(--text-normal)'};
                    border: 1px solid var(--background-modifier-border);
                    border-radius: 6px;
                    font-size: 14px;
                    cursor: pointer;
                    transition: all 0.2s ease;
                `;
                btn.addEventListener('mouseenter', () => {
                    if (this.state.state !== state) {
                        btn.style.background = 'var(--background-modifier-hover)';
                    }
                });
                btn.addEventListener('mouseleave', () => {
                    if (this.state.state !== state) {
                        btn.style.background = 'var(--background-secondary)';
                    }
                });
                btn.onclick = () => {
                    this.state.state = state;
                    this.render();
                };
            });
        }
        
        // –†—É—á–Ω–æ–π –≤–≤–æ–¥
        el.createEl('h3', { text: '–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:' });
        const input = el.createEl('input', { 
            type: 'text', 
            value: this.state.state, 
            placeholder: '–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ì–∞—Ä–¥–∞—Ä—Å–∫–∏–π_–°–æ—é–∑)' 
        });
        input.style.cssText = `
            width: 100%;
            padding: 12px;
            border: 1px solid var(--background-modifier-border);
            border-radius: 6px;
            font-size: 16px;
            background: var(--background-primary);
            color: var(--text-normal);
            margin-bottom: 20px;
        `;
        input.addEventListener('input', e => { this.state.state = input.value; });
        
        this.renderNav(el, async () => {
            if (!this.state.state.trim()) {
                console.warn('‚ùå –£–∫–∞–∂–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ!');
                return;
            }
            this.state.step++;
            await this.render();
        }, true);
    }
    
    async renderProvince(el) {
        // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const header = el.createEl('h2', { text: '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è' });
        header.style.cssText = `
            margin: 20px 0;
            color: var(--text-accent);
            font-size: 20px;
            font-weight: 600;
            border-bottom: 2px solid var(--background-modifier-border);
            padding-bottom: 10px;
        `;
        
        // –°–ø—Ä–∞–≤–∫–∞
        const help = el.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üó∫Ô∏è –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é. –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É.
            </div>
        `;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É
        const filteredProvinces = await this.getProvincesByState(this.state.state);
        console.log(`üó∫Ô∏è –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏ –¥–ª—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ "${this.state.state}":`, filteredProvinces);
        
        if (filteredProvinces.length > 0) {
            el.createEl('h3', { text: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏—é:' });
            const provinceContainer = el.createDiv();
            provinceContainer.style.cssText = `
                display: flex;
                wrap: wrap;
                gap: 8px;
                margin-bottom: 20px;
            `;
            filteredProvinces.forEach(province => {
                const btn = provinceContainer.createEl('button', { text: province });
                btn.style.cssText = `
                    padding: 8px 16px;
                    margin: 0;
                    background: ${this.state.province === province ? 'var(--interactive-accent)' : 'var(--background-secondary)'};
                    color: ${this.state.province === province ? 'var(--text-on-accent)' : 'var(--text-normal)'};
                    border: 1px solid var(--background-modifier-border);
                    border-radius: 6px;
                    font-size: 14px;
                    cursor: pointer;
                    transition: all 0.2s ease;
                `;
                btn.addEventListener('mouseenter', () => {
                    if (this.state.province !== province) {
                        btn.style.background = 'var(--background-modifier-hover)';
                    }
                });
                btn.addEventListener('mouseleave', () => {
                    if (this.state.province !== province) {
                        btn.style.background = 'var(--background-secondary)';
                    }
                });
                btn.onclick = () => {
                    this.state.province = province;
                    this.render();
                };
            });
        } else {
            el.createEl('p', { text: `–î–ª—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ "${this.state.state}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π.` });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –∫–∞–∫ fallback
            if (this.autocompleteData.provincesList && this.autocompleteData.provincesList.length > 0) {
                el.createEl('h3', { text: '–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏:' });
                el.createEl('p', { text: '–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏ –Ω–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É. –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é:' });
                
                const fallbackContainer = el.createDiv();
                fallbackContainer.style.cssText = `
                    display: flex;
                    flex-wrap: wrap;
                    gap: 8px;
                    margin-bottom: 20px;
                `;
                this.autocompleteData.provincesList.forEach(province => {
                    const btn = fallbackContainer.createEl('button', { text: province });
                    btn.style.cssText = `
                        padding: 8px 16px;
                        margin: 0;
                        background: ${this.state.province === province ? 'var(--interactive-accent)' : 'var(--background-secondary)'};
                        color: ${this.state.province === province ? 'var(--text-on-accent)' : 'var(--text-normal)'};
                        border: 1px solid var(--background-modifier-border);
                        border-radius: 6px;
                        font-size: 14px;
                        cursor: pointer;
                        transition: all 0.2s ease;
                    `;
                    btn.addEventListener('mouseenter', () => {
                        if (this.state.province !== province) {
                            btn.style.background = 'var(--background-modifier-hover)';
                        }
                    });
                    btn.addEventListener('mouseleave', () => {
                        if (this.state.province !== province) {
                            btn.style.background = 'var(--background-secondary)';
                        }
                    });
                    btn.onclick = () => {
                        this.state.province = province;
                        this.render();
                    };
                });
            }
        }
        
        // –†—É—á–Ω–æ–π –≤–≤–æ–¥
        el.createEl('h3', { text: '–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:' });
        const input = el.createEl('input', { 
            type: 'text', 
            value: this.state.province, 
            placeholder: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏' 
        });
        input.style.cssText = `
            width: 100%;
            padding: 12px;
            border: 1px solid var(--background-modifier-border);
            border-radius: 6px;
            font-size: 16px;
            background: var(--background-primary);
            color: var(--text-normal);
        `;
        input.addEventListener('input', e => { this.state.province = input.value; });
        
        this.renderNav(el, async () => {
            if (!this.state.province.trim()) {
                console.warn('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏—é!');
                return;
            }
            
            this.state.step++;
            await this.render();
        }, true);
    }
    
    renderDescriptionPopulation(el) {
        // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const header = el.createEl('h2', { text: '–û–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ' });
        header.style.cssText = `
            margin: 20px 0;
            color: var(--text-accent);
            font-size: 20px;
            font-weight: 600;
            border-bottom: 2px solid var(--background-modifier-border);
            padding-bottom: 10px;
        `;
        
        // –°–ø—Ä–∞–≤–∫–∞
        const help = el.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üìù –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –û–ø–∏—à–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ—Ä–µ–≤–Ω–∏. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—É—é —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞ –ø–æ—Å–µ–ª–µ–Ω–∏—è.
            </div>
        `;
        
        // –û–ø–∏—Å–∞–Ω–∏–µ
        el.createEl('h3', { text: '–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–Ω–∏' });
        const descInput = el.createEl('textarea', { 
            value: this.state.description, 
            placeholder: '–û–ø–∏—à–∏—Ç–µ –¥–µ—Ä–µ–≤–Ω—é' 
        });
        descInput.style.cssText = `
            width: 100%;
            height: 100px;
            padding: 12px;
            border: 1px solid var(--background-modifier-border);
            border-radius: 6px;
            font-size: 16px;
            background: var(--background-primary);
            color: var(--text-normal);
            resize: vertical;
        `;
        descInput.addEventListener('input', e => { this.state.description = descInput.value; });
        
        // –ù–∞—Å–µ–ª–µ–Ω–∏–µ
        el.createEl('h3', { text: '–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è' });
        const popInput = el.createEl('input', { 
            type: 'text', 
            value: this.state.population, 
            placeholder: '–ù–∞–ø—Ä–∏–º–µ—Ä: 150 —á–µ–ª–æ–≤–µ–∫' 
        });
        popInput.style.cssText = `
            width: 100%;
            padding: 12px;
            border: 1px solid var(--background-modifier-border);
            border-radius: 6px;
            font-size: 16px;
            background: var(--background-primary);
            color: var(--text-normal);
        `;
        popInput.addEventListener('input', e => { this.state.population = popInput.value; });
        
        this.renderNav(el, async () => {
            this.state.step++;
            await this.render();
        }, true);
    }
    
    renderAgriculture(el) {
        // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const header = el.createEl('h2', { text: '–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ' });
        header.style.cssText = `
            margin: 20px 0;
            color: var(--text-accent);
            font-size: 20px;
            font-weight: 600;
            border-bottom: 2px solid var(--background-modifier-border);
            padding-bottom: 10px;
        `;
        
        // –°–ø—Ä–∞–≤–∫–∞
        const help = el.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üåæ –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –£–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä—ã –∏ —Ä–µ–º—ë—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–º–∏ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –∂–∏—Ç–µ–ª–∏ –¥–µ—Ä–µ–≤–Ω–∏. –≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ—Å–µ–ª–µ–Ω–∏—è.
            </div>
        `;
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä—ã
        el.createEl('h3', { text: '–û—Å–Ω–æ–≤–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä—ã' });
        const cropsInput = el.createEl('input', { 
            type: 'text', 
            value: this.state.mainCrops.join(', '), 
            placeholder: '–ü—à–µ–Ω–∏—Ü–∞, —Ä–æ–∂—å, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å' 
        });
        cropsInput.style.cssText = `
            width: 100%;
            padding: 12px;
            border: 1px solid var(--background-modifier-border);
            border-radius: 6px;
            font-size: 16px;
            background: var(--background-primary);
            color: var(--text-normal);
        `;
        cropsInput.addEventListener('input', e => { 
            this.state.mainCrops = cropsInput.value.split(',').map(s => s.trim()).filter(Boolean); 
        });
        
        // –†–µ–º—ë—Å–ª–∞
        el.createEl('h3', { text: '–†–µ–º—ë—Å–ª–∞' });
        const craftsInput = el.createEl('input', { 
            type: 'text', 
            value: this.state.crafts.join(', '), 
            placeholder: '–ö—É–∑–Ω–µ—á–Ω–æ–µ –¥–µ–ª–æ, —Ç–∫–∞—á–µ—Å—Ç–≤–æ, –≥–æ–Ω—á–∞—Ä—Å—Ç–≤–æ' 
        });
        craftsInput.style.cssText = `
            width: 100%;
            padding: 12px;
            border: 1px solid var(--background-modifier-border);
            border-radius: 6px;
            font-size: 16px;
            background: var(--background-primary);
            color: var(--text-normal);
        `;
        craftsInput.addEventListener('input', e => { 
            this.state.crafts = craftsInput.value.split(',').map(s => s.trim()).filter(Boolean); 
        });
        
        this.renderNav(el, async () => {
            this.state.step++;
            await this.render();
        }, true);
    }
    
    renderFeatures(el) {
        // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const header = el.createEl('h2', { text: '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ—Ä–µ–≤–Ω–∏' });
        header.style.cssText = `
            margin: 20px 0;
            color: var(--text-accent);
            font-size: 20px;
            font-weight: 600;
            border-bottom: 2px solid var(--background-modifier-border);
            padding-bottom: 10px;
        `;
        
        // –°–ø—Ä–∞–≤–∫–∞
        const help = el.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üèõÔ∏è –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –£–∫–∞–∂–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ—Ä–µ–≤–Ω–∏: –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≤–∞–∂–Ω—ã–µ –∑–¥–∞–Ω–∏—è, –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –º–µ—Å—Ç–æ–º.
            </div>
        `;
        
        el.createEl('h3', { text: '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ—Ä–µ–≤–Ω–∏' });
        const featuresInput = el.createEl('input', { 
            type: 'text', 
            value: this.state.features.join(', '), 
            placeholder: '–°—Ç–∞—Ä–∞—è –º–µ–ª—å–Ω–∏—Ü–∞, —Å–≤—è—â–µ–Ω–Ω–∞—è —Ä–æ—â–∞, —Ç–æ—Ä–≥–æ–≤—ã–π –ø—É—Ç—å' 
        });
        featuresInput.style.cssText = `
            width: 100%;
            padding: 12px;
            border: 1px solid var(--background-modifier-border);
            border-radius: 6px;
            font-size: 16px;
            background: var(--background-primary);
            color: var(--text-normal);
        `;
        featuresInput.addEventListener('input', e => { 
            this.state.features = featuresInput.value.split(',').map(s => s.trim()).filter(Boolean); 
        });
        
        this.renderNav(el, async () => {
            this.state.step++;
            await this.render();
        }, true);
    }
    
    renderPreview(el) {
        // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const header = el.createEl('h2', { text: '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä' });
        header.style.cssText = `
            margin: 20px 0;
            color: var(--text-accent);
            font-size: 20px;
            font-weight: 600;
            border-bottom: 2px solid var(--background-modifier-border);
            padding-bottom: 10px;
        `;
        
        // –°–ø—Ä–∞–≤–∫–∞
        const help = el.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üëÅÔ∏è –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–≤—è–∑—è–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏.
            </div>
        `;
        
        const cleanName = this.state.villageName.trim().replace(/[^–∞-—è–ê-–Ø—ë–Å\w\s-.]/g, '').replace(/\s+/g, '_');
        const mainCropsContent = this.state.mainCrops.map(crop => `- ${crop}`).join('\n');
        const craftsContent = this.state.crafts.map(craft => `- ${craft}`).join('\n');
        const featuresContent = this.state.features.map(feature => `- ${feature}`).join('\n');
        const descriptionBlock = this.state.description.trim() ? this.state.description : `[[${cleanName}_–û–ø–∏—Å–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–Ω–∏]]`;
        const preview = `---\ncreated: "${window.moment().format('YYYY-MM-DD')}"\nname: "${cleanName}"\naliases: ["${cleanName}"]\ntype: "–î–µ—Ä–µ–≤–Ω—è"\nclimate: "${this.state.climate}"\ntags: [place, village]\nfaction: "${this.state.faction}"\nprovince: "${this.state.province}"\n---\n\n# ${this.state.villageName}\n\n**–¢–∏–ø:** –î–µ—Ä–µ–≤–Ω—è  \n**–ö–ª–∏–º–∞—Ç:** ${this.state.climate}  \n**–§—Ä–∞–∫—Ü–∏—è:** ${this.state.faction}  \n**–ü—Ä–æ–≤–∏–Ω—Ü–∏—è:** [[${this.state.province}]]\n\n## –û–ø–∏—Å–∞–Ω–∏–µ\n${descriptionBlock}\n\n## –ù–∞—Å–µ–ª–µ–Ω–∏–µ\n- **–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å:** ${this.state.population}\n- **–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è:** –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ, —Ä–µ–º—ë—Å–ª–∞\n\n## –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ\n### –û—Å–Ω–æ–≤–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä—ã\n${mainCropsContent}\n\n### –†–µ–º—ë—Å–ª–∞\n${craftsContent}\n\n## –≠–∫–æ–Ω–æ–º–∏–∫–∞\n- **–û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç—Ä–∞—Å–ª–∏:** –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ\n- **–¢–æ—Ä–≥–æ–≤–ª—è:** –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è, —Ä–µ–º–µ—Å–ª–µ–Ω–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è\n- **–°–≤—è–∑–∏:** –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –±–ª–∏–∂–∞–π—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞\n\n## –ö—É–ª—å—Ç—É—Ä–∞\n- **–†–µ–ª–∏–≥–∏—è:** –û–±—ã—á–Ω–æ —Å–≤—è–∑–∞–Ω–∞ —Å –±–ª–∏–∂–∞–π—à–∏–º —Ö—Ä–∞–º–æ–º\n- **–û–±—ã—á–∞–∏:** –°–µ–ª—å—Å–∫–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏\n- **–ü—Ä–∞–∑–¥–Ω–∏–∫–∏:** –°–≤—è–∑–∞–Ω—ã —Å —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º\n\n## –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã\n- **–ó–∞—Ç–æ–ø–ª–µ–Ω–∏–µ:** \n- **–ú–∏–≥—Ä–∞—Ü–∏—è –≤ –≥–æ—Ä–æ–¥–∞:** \n- **–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏:** \n\n## –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏\n### –û–±–∏—Ç–∞—Ç–µ–ª–∏\n\`\`\`dataview\nLIST FROM #people OR #character\nWHERE (\n    contains(file.outlinks, [[${cleanName}]]) OR\n    contains(file.tags, "${cleanName}") OR\n    regexmatch(file.text, "#${cleanName}") OR\n    regexmatch(file.text, "\\[\\[${cleanName}(\\||\\]\\])")\n) AND file.name != this.file.name\n\`\`\`\n\n### –ù–∞—Å–µ–ª—ë–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã\n\`\`\`dataview\nLIST FROM #place\nWHERE (\n    contains(file.outlinks, [[${cleanName}]]) OR\n    contains(file.tags, "${cleanName}") OR\n    regexmatch(file.text, "#${cleanName}") OR\n    regexmatch(file.text, "\\[\\[${cleanName}(\\||\\]\\])")\n    AND (type = "–ì–æ—Ä–æ–¥" OR type = "–î–µ—Ä–µ–≤–Ω—è")\n    AND file.name != this.file.name\n)\n\`\`\`\n\n### –ü–æ–¥–ª–æ–∫–∞—Ü–∏–∏\n\`\`\`dataview\nLIST FROM #place\nWHERE (\n    (contains(file.outlinks, [[${cleanName}]]) OR\n     contains(file.tags, "${cleanName}") OR\n     regexmatch(file.text, "#${cleanName}") OR\n     regexmatch(file.text, "\\[\\[${cleanName}(\\||\\]\\])")\n    AND (type != "–ì–æ—Ä–æ–¥" AND type != "–î–µ—Ä–µ–≤–Ω—è")\n    AND file.name != this.file.name\n)\n\`\`\`\n\n## –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n${featuresContent}`;
        
        // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        const previewContainer = el.createDiv('preview-content');
        previewContainer.style.cssText = `
            background: var(--background-secondary);
            border: 1px solid var(--background-modifier-border);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            max-height: 400px;
            overflow-y: auto;
        `;
        
        const previewEl = previewContainer.createEl('pre', { text: preview });
        previewEl.style.cssText = `
            margin: 0;
            white-space: pre-wrap;
            font-family: var(--font-monospace);
            font-size: 12px;
            color: var(--text-normal);
        `;
        
        this.renderNav(el, null, true, true);
    }
    
    renderNav(el, onNext, showBack = false, showOnlyBack = false) {
        const nav = el.createDiv('nav-buttons');
        nav.style.cssText = `
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid var(--background-modifier-border);
        `;
        
        const leftButtons = nav.createDiv('nav-left');
        const rightButtons = nav.createDiv('nav-right');
        
        if (showBack && this.state.step > 0) {
            const prevBtn = leftButtons.createEl('button', { text: '‚Üê –ù–∞–∑–∞–¥' });
            prevBtn.style.cssText = `
                padding: 8px 16px;
                background: var(--background-secondary);
                color: var(--text-muted);
                border: 1px solid var(--background-modifier-border);
                border-radius: 6px;
                font-size: 14px;
                font-weight: 500;
                cursor: pointer;
                transition: background-color 0.2s ease;
            `;
            prevBtn.addEventListener('mouseenter', () => {
                prevBtn.style.background = 'var(--background-modifier-hover)';
            });
            prevBtn.addEventListener('mouseleave', () => {
                prevBtn.style.background = 'var(--background-secondary)';
            });
            prevBtn.onclick = async () => {
                this.state.step--;
                await this.render();
            };
        }
        
        if (onNext && !showOnlyBack) {
            const nextBtn = rightButtons.createEl('button', { text: '–î–∞–ª–µ–µ ‚Üí' });
            nextBtn.style.cssText = `
                padding: 8px 16px;
                background: var(--interactive-accent);
                color: var(--text-on-accent);
                border: none;
                border-radius: 6px;
                font-size: 14px;
                font-weight: 500;
                cursor: pointer;
                transition: background-color 0.2s ease;
            `;
            nextBtn.addEventListener('mouseenter', () => {
                nextBtn.style.background = 'var(--interactive-accent-hover)';
            });
            nextBtn.addEventListener('mouseleave', () => {
                nextBtn.style.background = 'var(--interactive-accent)';
            });
            nextBtn.onclick = onNext;
        } else if (showOnlyBack) {
            const finishBtn = rightButtons.createEl('button', { text: '‚úì –°–æ–∑–¥–∞—Ç—å –¥–µ—Ä–µ–≤–Ω—é' });
            finishBtn.style.cssText = `
                padding: 10px 20px;
                background: var(--interactive-accent);
                color: var(--text-on-accent);
                border: none;
                border-radius: 6px;
                font-size: 14px;
                font-weight: 600;
                cursor: pointer;
                transition: background-color 0.2s ease;
            `;
            finishBtn.addEventListener('mouseenter', () => {
                finishBtn.style.background = 'var(--interactive-accent-hover)';
            });
            finishBtn.addEventListener('mouseleave', () => {
                finishBtn.style.background = 'var(--interactive-accent)';
            });
            finishBtn.onclick = () => {
                this.onFinish(this.state);
                this.close();
            };
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–ª–∏–º–∞—Ç—ã –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
     */
    async loadClimatesFromProject(projectRoot) {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø–∞–ø–∫–∏ –∫–ª–∏–º–∞—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
            const climatesFolder = `${projectRoot}/–õ–æ–∫–∞—Ü–∏–∏/–ö–ª–∏–º–∞—Ç—ã`;
            const folder = this.app.vault.getAbstractFileByPath(climatesFolder);
            
            if (folder && folder.children && folder.children.length > 0) {
                const climates = folder.children
                    .filter(f => f.extension === 'md' && !f.basename.startsWith('Index') && !f.basename.startsWith('.'))
                    .map(f => f.basename);
                console.log('üåç –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–ª–∏–º–∞—Ç—ã –∏–∑ –ø–∞–ø–∫–∏:', climates);
                return climates;
            }
            
            // Fallback –Ω–∞ —É–º–æ–ª—á–∞–Ω–∏—è
            console.log('‚ÑπÔ∏è –ü–∞–ø–∫–∞ –∫–ª–∏–º–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–æ–ª—á–∞–Ω–∏—è');
            return ['–£–º–µ—Ä–µ–Ω–Ω—ã–π', '–•–æ–ª–æ–¥–Ω—ã–π', '–¢—ë–ø–ª—ã–π', '–ó–∞—Å—É—à–ª–∏–≤—ã–π', '–í–ª–∞–∂–Ω—ã–π', '–ì–æ—Ä–Ω—ã–π'];
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–º–∞—Ç–æ–≤:', error);
            return ['–£–º–µ—Ä–µ–Ω–Ω—ã–π', '–•–æ–ª–æ–¥–Ω—ã–π', '–¢—ë–ø–ª—ã–π', '–ó–∞—Å—É—à–ª–∏–≤—ã–π', '–í–ª–∞–∂–Ω—ã–π', '–ì–æ—Ä–Ω—ã–π'];
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–∑ –ø–∞–ø–∫–∏ –õ–æ–∫–∞—Ü–∏–∏/–§—Ä–∞–∫—Ü–∏–∏
     */
    async loadFactionsFromProject(projectRoot) {
        try {
            const factionsFolder = `${projectRoot}/–õ–æ–∫–∞—Ü–∏–∏/–§—Ä–∞–∫—Ü–∏–∏`;
            const folder = this.app.vault.getAbstractFileByPath(factionsFolder);
            
            if (folder && folder.children && folder.children.length > 0) {
                const factions = folder.children
                    .filter(f => f.extension === 'md' && !f.basename.startsWith('Index') && !f.basename.startsWith('.'))
                    .map(f => f.basename);
                console.log('üèõÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–∑ –ø–∞–ø–∫–∏:', factions);
                return factions;
            }
            
            // Fallback –Ω–∞ —É–º–æ–ª—á–∞–Ω–∏—è
            console.log('‚ÑπÔ∏è –ü–∞–ø–∫–∞ —Ñ—Ä–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–æ–ª—á–∞–Ω–∏—è');
            return ['–í–µ–ª—é–≥—Ä–∞–¥–∏—è', '–ì–∞–ª–∏–Ω–¥–∏—è', '–î—Ä–∞–∫–æ–Ω–∏–π —Ö—Ä–µ–±–µ—Ç', '–ö—Ä–∞–∫–æ–≤–µ–π', '–î—Ä—É–≥–æ–µ'];
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–∞–∫—Ü–∏–π:', error);
            return ['–í–µ–ª—é–≥—Ä–∞–¥–∏—è', '–ì–∞–ª–∏–Ω–¥–∏—è', '–î—Ä–∞–∫–æ–Ω–∏–π —Ö—Ä–µ–±–µ—Ç', '–ö—Ä–∞–∫–æ–≤–µ–π', '–î—Ä—É–≥–æ–µ'];
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤ –∏–∑ –ø–∞–ø–∫–∏ –õ–æ–∫–∞—Ü–∏–∏/–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞
     */
    loadStatesList() {
        if (!this.autocompleteData?.projectRoot) {
            console.warn('‚ö†Ô∏è projectRoot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤');
            return [];
        }
        
        try {
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–µ–π
            const possiblePaths = [
                `${this.autocompleteData.projectRoot}/–õ–æ–∫–∞—Ü–∏–∏/–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞`,
                `${this.autocompleteData.projectRoot}/–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞`,
                '–õ–æ–∫–∞—Ü–∏–∏/–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞',
                '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞'
            ];
            
            console.log('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤:', possiblePaths);
            
            for (const statesFolder of possiblePaths) {
                console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å: ${statesFolder}`);
                const folder = this.app.vault.getAbstractFileByPath(statesFolder);
                
                if (folder && folder.children && folder.children.length > 0) {
                    const states = folder.children
                        .filter(f => f.extension === 'md' && !f.basename.startsWith('Index') && !f.basename.startsWith('.'))
                        .map(f => f.basename);
                    console.log(`üèõÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –∏–∑ –ø–∞–ø–∫–∏ ${statesFolder}:`, states);
                    return states;
                } else {
                    console.log(`‚ÑπÔ∏è –ü–∞–ø–∫–∞ ${statesFolder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞`);
                }
            }
            
            // Fallback –Ω–∞ —É–º–æ–ª—á–∞–Ω–∏—è
            const defaultStates = ['–ì–∞—Ä–¥–∞—Ä—Å–∫–∏–π_–°–æ—é–∑', '–í–µ–ª—é–≥—Ä–∞–¥–∏—è', '–ì–∞–ª–∏–Ω–¥–∏—è', '–î—Ä–∞–∫–æ–Ω–∏–π_—Ö—Ä–µ–±–µ—Ç', '–ö—Ä–∞–∫–æ–≤–µ–π'];
            console.log('üèõÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', defaultStates);
            return defaultStates;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤:', error);
            // Fallback –Ω–∞ —É–º–æ–ª—á–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            const defaultStates = ['–ì–∞—Ä–¥–∞—Ä—Å–∫–∏–π_–°–æ—é–∑', '–í–µ–ª—é–≥—Ä–∞–¥–∏—è', '–ì–∞–ª–∏–Ω–¥–∏—è', '–î—Ä–∞–∫–æ–Ω–∏–π_—Ö—Ä–µ–±–µ—Ç', '–ö—Ä–∞–∫–æ–≤–µ–π'];
            console.log('üèõÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏:', defaultStates);
            return defaultStates;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞
     */
    async getProvincesByState(stateName) {
        if (!stateName || !this.autocompleteData?.projectRoot) {
            console.warn('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π');
            return [];
        }
        
        try {
            const projectRoot = this.autocompleteData.projectRoot;
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–µ–π –¥–ª—è –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
            const possiblePaths = [
                `${projectRoot}/–õ–æ–∫–∞—Ü–∏–∏/–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏`,
                `${projectRoot}/–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏`,
                '–õ–æ–∫–∞—Ü–∏–∏/–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏',
                '–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏'
            ];
            
            console.log('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–∏–Ω—Ü–∏–π:', possiblePaths);
            
            let allProvinces = [];
            let foundPath = '';
            
            for (const provincesFolder of possiblePaths) {
                console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –ø—Ä–æ–≤–∏–Ω—Ü–∏–π: ${provincesFolder}`);
                const folder = this.app.vault.getAbstractFileByPath(provincesFolder);
                
                if (folder && folder.children && folder.children.length > 0) {
                    allProvinces = folder.children
                        .filter(f => f.extension === 'md' && !f.basename.startsWith('Index') && !f.basename.startsWith('.'))
                        .map(f => f.basename);
                    foundPath = provincesFolder;
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –≤ ${provincesFolder}:`, allProvinces);
                    break;
                } else {
                    console.log(`‚ÑπÔ∏è –ü–∞–ø–∫–∞ ${provincesFolder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞`);
                }
            }
            
            if (allProvinces.length === 0) {
                console.log('‚ö†Ô∏è –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ');
                return [];
            }
            
            console.log(`üîç –ò—â–µ–º –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –¥–ª—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ "${stateName}" —Å—Ä–µ–¥–∏:`, allProvinces);
            
            // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —á–∏—Ç–∞–µ–º YAML –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ state
            const filteredProvinces = [];
            
            for (const provinceName of allProvinces) {
                try {
                    const provinceFile = this.app.vault.getAbstractFileByPath(`${foundPath}/${provinceName}.md`);
                    if (provinceFile) {
                        const content = await this.app.vault.read(provinceFile);
                        
                        // –ò—â–µ–º –ø–æ–ª–µ state –∏–ª–∏ country –≤ YAML (—É–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é)
                        let provinceState = null;
                        
                        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º state
                        const stateMatch = content.match(/^state:\s*"?([^"\n]+)"?/m);
                        if (stateMatch) {
                            provinceState = stateMatch[1];
                            console.log(`üîç –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${provinceName}" –∏–º–µ–µ—Ç state: "${provinceState}"`);
                        } else {
                            // –ï—Å–ª–∏ state –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º country
                            const countryMatch = content.match(/^country:\s*"?([^"\n]+)"?/m);
                            if (countryMatch) {
                                provinceState = countryMatch[1];
                                console.log(`üîç –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${provinceName}" –∏–º–µ–µ—Ç country: "${provinceState}"`);
                            } else {
                                console.log(`‚ö†Ô∏è –í –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ "${provinceName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ state, –Ω–∏ country`);
                            }
                        }
                        
                        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º
                        if (provinceState) {
                            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
                            const normalizedProvinceState = provinceState.toLowerCase().replace(/\s+/g, '_');
                            const normalizedStateName = stateName.toLowerCase().replace(/\s+/g, '_');
                            
                            console.log(`üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: "${provinceState}" (–Ω–æ—Ä–º: "${normalizedProvinceState}") —Å "${stateName}" (–Ω–æ—Ä–º: "${normalizedStateName}")`);
                            
                            if (normalizedProvinceState === normalizedStateName) {
                                filteredProvinces.push(provinceName);
                                console.log(`‚úÖ –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${provinceName}" –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ "${stateName}"`);
                            } else {
                                console.log(`‚ùå –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${provinceName}" –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç: "${normalizedProvinceState}" ‚â† "${normalizedStateName}"`);
                            }
                        }
                    }
                } catch (e) {
                    console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ "${provinceName}":`, e.message);
                }
            }
            
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –¥–ª—è "${stateName}":`, filteredProvinces);
            
            return filteredProvinces;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π:', error);
            return [];
        }
    }
    

}