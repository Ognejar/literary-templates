/**
 * @file       EntityWizardBase.js
 * @description –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –º–∞—Å—Ç–µ—Ä–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π: —Å—Ç–∏–ª–∏, –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã, —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ–ª–µ–π
 * @author     AI Assistant
 * @version    1.0.0
 * @license    MIT
 * @dependencies HtmlWizardModal
 * @created    2025-08-13
 * @updated    2025-08-13
 * @docs       docs/–ö–∞—Ä—Ç–æ—á–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.md
 */

const { HtmlWizardModal } = require('./HtmlWizardModal');
const { TFile } = require('obsidian');

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å UI, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
class EntityWizardBase extends HtmlWizardModal {
    
    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
     * @param {Object} app - —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Obsidian
     * @param {Function} ModalClass - –∫–ª–∞—Å—Å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     * @param {Function} SettingClass - –∫–ª–∞—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     * @param {Function} NoticeClass - –∫–ª–∞—Å—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    constructor(app, ModalClass, SettingClass, NoticeClass) {
        super(app, ModalClass, NoticeClass);
        this.Setting = SettingClass;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ UI –∫ –º–æ–¥–∞–ª—å–Ω–æ–º—É –æ–∫–Ω—É
     */
    applyBaseUI() {
        try { 
            this.applyBaseStyles(); 
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏:', error);
        }
    }

    /**
     * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–≤–æ–∏
     * @param {Array} statuses - –º–∞—Å—Å–∏–≤ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {Array} - –º–∞—Å—Å–∏–≤ —Å—Ç–∞—Ç—É—Å–æ–≤ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ)
     */
    ensureStatuses(statuses) {
        if (!Array.isArray(statuses) || statuses.length === 0) {
            return [
                { value: '–¥–µ–π—Å—Ç–≤—É–µ—Ç', label: '–î–µ–π—Å—Ç–≤—É–µ—Ç', icon: '‚úÖ' },
                { value: '–∑–∞–±—Ä–æ—à–µ–Ω–æ', label: '–ó–∞–±—Ä–æ—à–µ–Ω–æ', icon: 'üèöÔ∏è' },
                { value: '—Ä–∞–∑—Ä—É—à–µ–Ω–æ', label: '–†–∞–∑—Ä—É—à–µ–Ω–æ', icon: 'üí•' }
            ];
        }
        return statuses;
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø—Ü–∏–∏ –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
     * @param {Object} dropdown - –æ–±—ä–µ–∫—Ç –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
     * @param {Array} options - –º–∞—Å—Å–∏–≤ –æ–ø—Ü–∏–π (—Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –æ–±—ä–µ–∫—Ç—ã {value, label, icon})
     */
    addDropdownOptions(dropdown, options) {
        (options || []).forEach(opt => {
            if (typeof opt === 'string') {
                dropdown.addOption(opt, opt);
            } else if (opt && typeof opt === 'object' && opt.value !== undefined) {
                const displayText = `${opt.icon ? opt.icon + ' ' : ''}${opt.label || opt.value}`;
                dropdown.addOption(opt.value, displayText);
            }
        });
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
     * @param {HTMLElement} container - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è
     * @param {string} name - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
     * @param {string} value - –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     * @param {Function} onChange - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
     */
    addTextInput(container, name, value, onChange) {
        new this.Setting(container)
            .setName(name)
            .addText(text => {
                text.setValue(value || '');
                text.onChange(onChange);
            });
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
     * @param {HTMLElement} container - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è
     * @param {string} name - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
     * @param {string} value - –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     * @param {Function} onChange - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
     */
    addTextAreaInput(container, name, value, onChange) {
        new this.Setting(container)
            .setName(name)
            .addTextArea(textArea => {
                textArea.setValue(value || '');
                textArea.onChange(onChange);
            });
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
     * @param {HTMLElement} container - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞
     * @param {string} name - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
     * @param {string} value - –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     * @param {Array} options - –º–∞—Å—Å–∏–≤ –æ–ø—Ü–∏–π
     * @param {Function} onChange - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
     */
    addDropdownInput(container, name, value, options, onChange) {
        new this.Setting(container)
            .setName(name)
            .addDropdown(dropdown => {
                options.forEach(opt => dropdown.addOption(opt, opt));
                dropdown.setValue(value || '');
                dropdown.onChange(onChange);
            });
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏, –∏—Å–∫–ª—é—á–∞—è —Ñ–∞–π–ª—ã-—É–ø—Ä–∞–≤–ª—è—é—â–∏–µ
     * @param {string} folderPath - –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
     * @param {string} excludeName - –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–º–µ–Ω–µ–º –ø–∞–ø–∫–∏)
     * @returns {string[]} - –º–∞—Å—Å–∏–≤ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤
     */
    loadFilesFromFolder(folderPath, excludeName = null) {
        const folderObj = this.app.vault.getAbstractFileByPath(folderPath);
        let files = [];
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± ‚Äî –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –¥–µ—Ç–µ–π –ø–∞–ø–∫–∏
        if (folderObj && Array.isArray(folderObj.children) && folderObj.children.length > 0) {
            for (const child of folderObj.children) {
                if (child.extension === 'md' &&
                    !child.basename.startsWith('.') &&
                    (!excludeName || child.basename !== excludeName)) {
                    files.push(child.basename);
                }
            }
        }
        
        // –§–æ–ª–±—ç–∫ ‚Äî —Å–∫–∞–Ω –≤—Å–µ—Ö markdown-—Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–æ—á–Ω–æ–º—É –ø—É—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª—è
        if (files.length === 0) {
            const allMd = this.app.vault.getMarkdownFiles() || [];
            for (const f of allMd) {
                if (f.parent && f.parent.path === folderPath) {
                    if (!excludeName || f.basename !== excludeName) {
                        files.push(f.basename);
                    }
                }
            }
        }
        
        return files;
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö
     * @param {string} string - —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {string} - —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
     */
    escapeRegex(string) {
        return string.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –ø–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É
 * –ò—â–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ñ—Ä–æ–Ω—Ç–º–∞—Ç—Ç–µ—Ä–µ (–ø–æ–ª—è state/country) –∏ wiki-—Å—Å—ã–ª–∫–∞—Ö
 * @param {string} stateName - –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞
 * @param {string} projectRoot - –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
 * @param {string[]} allProvinces - –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
 * @returns {Promise<string[]>} - –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
 */
async filterProvincesByState(stateName, projectRoot, allProvinces) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!stateName || !projectRoot || !Array.isArray(allProvinces)) {
        console.warn('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π');
        return [];
    }

    console.log('üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –¥–ª—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞:', stateName);
    console.log('üìÅ –ü—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞:', projectRoot);
    console.log('üìä –í—Å–µ–≥–æ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', allProvinces.length);

    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    const variants = [
        stateName, // –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
        stateName.replace(/\s+/g, '_'), // —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
        stateName.replace(/\s+/g, '-'), // —Å –¥–µ—Ñ–∏—Å–∞–º–∏
        stateName.toLowerCase(), // –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        stateName.replace(/\s+/g, '_').toLowerCase(), // —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏—è—Ö
        stateName.replace(/_/g, ' '), // –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è -> –ø—Ä–æ–±–µ–ª—ã
        stateName.replace(/_/g, ' ').toLowerCase(), // –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è -> –ø—Ä–æ–±–µ–ª—ã + –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    ];

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const uniqueVariants = [...new Set(variants.filter(v => v && v.trim()))];

    console.log('üî§ –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞:', uniqueVariants);

    try {
        const filteredProvinces = [];
        let processedCount = 0;
        
        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        for (const provinceName of allProvinces) {
            processedCount++;
            const filePath = `${projectRoot}/–õ–æ–∫–∞—Ü–∏–∏/–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏/${provinceName}.md`;
            const provinceFile = this.app.vault.getAbstractFileByPath(filePath);
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            if (!provinceFile) {
                console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
                continue;
            }
            
            try {
                const content = await this.app.vault.read(provinceFile);
                // console.log(`üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ${provinceName}:`, content.substring(0, 200) + '...');
                
                // –ò—â–µ–º —Ñ—Ä–æ–Ω—Ç–º–∞—Ç—Ç–µ—Ä –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
                const fmMatch = content.match(/^---[\s\S]*?---/m);
                
                if (fmMatch) {
                    const frontmatter = fmMatch[0];
                    // console.log(`üìã –§—Ä–æ–Ω—Ç–º–∞—Ç—Ç–µ—Ä ${provinceName}:`, frontmatter);
                    
                    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ - –∏—â–µ–º –ø—Ä–æ—Å—Ç–æ –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–ª—è—Ö state –∏ country
                    const stateFieldMatch = frontmatter.match(/state\s*:\s*(.*)/i);
                    const countryFieldMatch = frontmatter.match(/country\s*:\s*(.*)/i);
                    
                    // console.log(`üèõÔ∏è State –ø–æ–ª–µ:`, stateFieldMatch ? stateFieldMatch[1] : '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                    // console.log(`üá∫üá≥ Country –ø–æ–ª–µ:`, countryFieldMatch ? countryFieldMatch[1] : '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ª—é–±—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
                    const checkFieldValue = (fieldValue) => {
                        if (!fieldValue) return false;
                        
                        // –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –∫–∞–≤—ã—á–µ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
                        const cleanValue = fieldValue.trim().replace(/['"]/g, '');
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                        return uniqueVariants.some(variant => {
                            const normalizedVariant = variant.trim();
                            const normalizedValue = cleanValue.trim();
                            
                            // console.log(`üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: "${normalizedValue}" —Å "${normalizedVariant}"`);
                            
                            return normalizedValue === normalizedVariant ||
                                   normalizedValue.toLowerCase() === normalizedVariant.toLowerCase();
                        });
                    };
                    
                    if (stateFieldMatch && checkFieldValue(stateFieldMatch[1])) {
                        // console.log(`‚úÖ –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${provinceName}" –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø–æ–ª—é state`);
                        filteredProvinces.push(provinceName);
                        continue;
                    }
                    
                    if (countryFieldMatch && checkFieldValue(countryFieldMatch[1])) {
                        // console.log(`‚úÖ –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${provinceName}" –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø–æ–ª—é country`);
                        filteredProvinces.push(provinceName);
                        continue;
                    }
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∏—â–µ–º wiki-—Å—Å—ã–ª–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                const wikiLinks = content.match(/\[\[(.*?)\]\]/g) || [];
                const hasWikiLink = wikiLinks.some(link => {
                    const linkContent = link.replace(/\[\[|\]\]/g, '');
                    return uniqueVariants.some(variant => {
                        const normalizedVariant = variant.trim();
                        const normalizedLink = linkContent.split('|')[0].trim(); // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –¥–æ |
                        
                        // console.log(`üîó –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º wiki: "${normalizedLink}" —Å "${normalizedVariant}"`);
                        
                        return normalizedLink === normalizedVariant ||
                               normalizedLink.toLowerCase() === normalizedVariant.toLowerCase();
                    });
                });
                
                if (hasWikiLink) {
                    // console.log(`‚úÖ –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${provinceName}" –Ω–∞–π–¥–µ–Ω–∞ –ø–æ wiki-—Å—Å—ã–ª–∫–µ`);
                    filteredProvinces.push(provinceName);
                } else {
                    // console.log(`‚ùå –ü—Ä–æ–≤–∏–Ω—Ü–∏—è "${provinceName}" –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É "${stateName}"`);
                }
                
            } catch (readError) {
                console.error(`üìñ –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ "${provinceName}":`, readError);
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if (processedCount % 10 === 0) {
                // console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount}/${allProvinces.length} –ø—Ä–æ–≤–∏–Ω—Ü–∏–π`);
            }
        }
        
        //console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π: ${filteredProvinces.length}`, filteredProvinces);
        return filteredProvinces;
        
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π:', error);
        return [];
    }
}

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ—Ä-–∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     * @param {string} contentType - —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (potion, artifact, character, etc.)
     * @param {string} projectRoot - –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
     * @returns {Promise<Object>} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
     */
    async analyzeLoreContext(contentType, projectRoot) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞
            if (!window.loreAnalyzerService) {
                throw new Error('–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ä-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞
            const content = this.getCurrentContent();
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            const analysis = await window.loreAnalyzerService.analyzeContent(content, contentType, projectRoot);
            
            return analysis;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ä-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞
     * @returns {string} - —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
     */
    getCurrentContent() {
        // –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
        return JSON.stringify(this.data || {}, null, 2);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ä-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     * @param {HTMLElement} container - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏
     * @param {string} contentType - —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     * @param {string} projectRoot - –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
     * @returns {HTMLElement} - —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
     */
    createLoreAnalysisButton(container, contentType, projectRoot) {
        const button = container.createEl('button', { text: 'üìä –ê–Ω–∞–ª–∏–∑ –ª–æ—Ä–∞' });
        
        // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
        button.style.cssText = `
            padding: 8px 16px;
            background: #2196F3;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 10px;
            font-size: 14px;
            transition: background-color 0.2s ease;
        `;
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        button.addEventListener('mouseenter', () => {
            button.style.backgroundColor = '#1976D2';
        });
        
        button.addEventListener('mouseleave', () => {
            button.style.backgroundColor = '#2196F3';
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω async
        button.onclick = async () => {
            try {
                button.disabled = true;
                button.textContent = '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...';
                button.style.opacity = '0.7';
                
                const analysis = await this.analyzeLoreContext(contentType, projectRoot);
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω–æ await –∏–∑ require
                const LoreAnalysisModal = require('./LoreAnalysisModal.js').LoreAnalysisModal;
                const modal = new LoreAnalysisModal(this.app, this.Modal, this.Setting, this.Notice, analysis);
                modal.open();
                
            } catch (error) {
                if (this.Notice) {
                    new this.Notice(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
                }
                console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ä–∞:', error);
            } finally {
                button.disabled = false;
                button.textContent = 'üìä –ê–Ω–∞–ª–∏–∑ –ª–æ—Ä–∞';
                button.style.opacity = '1';
            }
        };
        
        return button;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
     * @param {HTMLElement} container - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–∞–Ω–µ–ª–∏
     * @param {string} title - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
     * @param {string} content - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
     * @returns {HTMLElement} - —Å–æ–∑–¥–∞–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
     */
    createInfoPanel(container, title, content) {
        const panel = container.createEl('div', { cls: 'entity-wizard-info-panel' });
        
        panel.style.cssText = `
            background: #f5f5f5;
            border-left: 4px solid #2196F3;
            padding: 12px;
            margin: 10px 0;
            border-radius: 4px;
            font-size: 14px;
        `;
        
        if (title) {
            const titleEl = panel.createEl('strong', { text: title });
            titleEl.style.display = 'block';
            titleEl.style.marginBottom = '8px';
            titleEl.style.color = '#2196F3';
        }
        
        if (content) {
            panel.createEl('div', { text: content });
        }
        
        return panel;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏
     * @param {HTMLElement} container - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
     * @returns {HTMLElement} - —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
     */
    createDivider(container) {
        const divider = container.createEl('hr');
        divider.style.cssText = `
            margin: 20px 0;
            border: none;
            border-top: 1px solid #e0e0e0;
        `;
        return divider;
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è
     * @param {string} modulePath - –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
     * @returns {Promise<Object>} - –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å
     */
    async safeRequire(modulePath) {
        try {
            // –î–ª—è Obsidian –ø–ª–∞–≥–∏–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º app.plugins
            if (this.app && this.app.plugins) {
                const plugin = this.app.plugins.getPlugin('literary-templates');
                if (plugin && plugin.require) {
                    return plugin.require(modulePath);
                }
            }
            // –§–æ–ª–±—ç–∫: –æ–±—ã—á–Ω—ã–π require
            return require(modulePath);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${modulePath}:`, error);
            throw error;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
module.exports = { EntityWizardBase };

// –î–µ–ª–∞–µ–º –∫–ª–∞—Å—Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
if (typeof window !== 'undefined') {
    window.EntityWizardBase = EntityWizardBase;
}