/**
 * @file       EntityWizardBase.js
 * @description –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –º–∞—Å—Ç–µ—Ä–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π: —Å—Ç–∏–ª–∏, –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã, —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ–ª–µ–π
 * @author     AI Assistant
 * @version    1.0.0
 * @license    MIT
 * @dependencies HtmlWizardModal
 * @created    2025-08-13
 * @updated    2025-08-13
 * @docs       docs/–ö–∞—Ä—Ç–æ—á–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.md
 */

const { HtmlWizardModal } = require('./HtmlWizardModal');
const { TFile } = require('obsidian');

class EntityWizardBase extends HtmlWizardModal {
    constructor(app, ModalClass, SettingClass, NoticeClass) {
        super(app, ModalClass, NoticeClass);
        this.Setting = SettingClass;
    }

    applyBaseUI() {
        try { this.applyBaseStyles(); } catch {}
    }

    ensureStatuses(statuses) {
        if (!Array.isArray(statuses) || statuses.length === 0) {
            return [
                { value: '–¥–µ–π—Å—Ç–≤—É–µ—Ç', label: '–î–µ–π—Å—Ç–≤—É–µ—Ç', icon: '‚úÖ' },
                { value: '–∑–∞–±—Ä–æ—à–µ–Ω–æ', label: '–ó–∞–±—Ä–æ—à–µ–Ω–æ', icon: 'üèöÔ∏è' },
                { value: '—Ä–∞–∑—Ä—É—à–µ–Ω–æ', label: '–†–∞–∑—Ä—É—à–µ–Ω–æ', icon: 'üí•' }
            ];
        }
        return statuses;
    }

    addDropdownOptions(dropdown, options) {
        (options || []).forEach(opt => {
            if (typeof opt === 'string') dropdown.addOption(opt, opt);
            else if (opt && typeof opt === 'object' && opt.value !== undefined) {
                dropdown.addOption(opt.value, opt.label !== undefined ? `${opt.icon ? opt.icon + ' ' : ''}${opt.label}` : String(opt.value));
            }
        });
    }

    addTextInput(container, name, value, onChange) {
        new this.Setting(container)
            .setName(name)
            .addText(t => {
                t.setValue(value || '');
                t.onChange(onChange);
            });
    }

    addTextAreaInput(container, name, value, onChange) {
        new this.Setting(container)
            .setName(name)
            .addTextArea(t => {
                t.setValue(value || '');
                t.onChange(onChange);
            });
    }

    addDropdownInput(container, name, value, options, onChange) {
        new this.Setting(container)
            .setName(name)
            .addDropdown(d => {
                options.forEach(opt => d.addOption(opt, opt));
                d.setValue(value || '');
                d.onChange(onChange);
            });
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏, –∏—Å–∫–ª—é—á–∞—è —Ñ–∞–π–ª—ã-—É–ø—Ä–∞–≤–ª—è—é—â–∏–µ
     * @param {string} folderPath - –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
     * @param {string} excludeName - –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–º–µ–Ω–µ–º –ø–∞–ø–∫–∏)
     * @returns {string[]} - –º–∞—Å—Å–∏–≤ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤
     */
    loadFilesFromFolder(folderPath, excludeName = null) {
        const folderObj = this.app.vault.getAbstractFileByPath(folderPath);
        let files = [];
        // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± ‚Äî –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –¥–µ—Ç–µ–π –ø–∞–ø–∫–∏
        if (folderObj && Array.isArray(folderObj.children) && folderObj.children.length > 0) {
            for (const child of folderObj.children) {
                if (child.extension === 'md' &&
                    !child.basename.startsWith('.') &&
                    (!excludeName || child.basename !== excludeName)) {
                    files.push(child.basename);
                }
            }
        }
        // –§–æ–ª–±—ç–∫ ‚Äî —Å–∫–∞–Ω –≤—Å–µ—Ö markdown-—Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–æ—á–Ω–æ–º—É –ø—É—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª—è
        if (files.length === 0) {
            const allMd = this.app.vault.getMarkdownFiles() || [];
            for (const f of allMd) {
                if (f.parent && f.parent.path === folderPath) {
                    if (!excludeName || f.basename !== excludeName) {
                        files.push(f.basename);
                    }
                }
            }
        }
        return files;
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –ø–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É
     * @param {string} stateName - –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞
     * @param {string} projectRoot - –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
     * @param {string[]} allProvinces - –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
     * @returns {Promise<string[]>} - –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
     */
    async filterProvincesByState(stateName, projectRoot, allProvinces) {
        if (!stateName || !projectRoot || !Array.isArray(allProvinces)) {
            return [];
        }

        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ RegExp
        const esc = (s) => s.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
        const nameRe = esc(stateName);
        // –ò—â–µ–º –∫–ª—é—á–∏ state –∏–ª–∏ country, –¥–æ–ø—É—Å–∫–∞–µ–º –∫–∞–≤—ã—á–∫–∏ ' –∏–ª–∏ ", –∞ —Ç–∞–∫–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–∞–≤—ã—á–µ–∫
        const yamlKeyRe = new RegExp(`\\b(state|country)\\s*:\\s*['\"]?${nameRe}['\"]?\\b`, 'i');
        // –§–æ–ª–±—ç–∫: –≤—Å—Ç—Ä–µ—á–∞ –≤ —Ç–µ–∫—Å—Ç–µ wiki-—Å—Å—ã–ª–∫–∏ –Ω–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ, –ª–∏–±–æ —è–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ: [[...]]"
        const wikiLinkRe = new RegExp(`\\[\\[${nameRe}(?:\\||\\\\]\\])`, 'i');
        const labelLineRe = new RegExp(`–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ\\s*:\\s*\\[\\[${nameRe}(?:\\||\\\\]\\])`, 'i');

        try {
            const filteredProvinces = [];
            for (const provinceName of allProvinces) {
                const provinceFile = this.app.vault.getAbstractFileByPath(`${projectRoot}/–õ–æ–∫–∞—Ü–∏–∏/–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏/${provinceName}.md`);
                if (!provinceFile) continue;
                try {
                    const content = await this.app.vault.read(provinceFile);
                    // –ü—ã—Ç–∞–µ–º—Å—è –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç–º–∞—Ç—Ç–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    const fmMatch = content.match(/^---[\s\S]*?---/m);
                    const scope = fmMatch ? fmMatch[0] : content;
                    if (yamlKeyRe.test(scope) || wikiLinkRe.test(content) || labelLineRe.test(content)) {
                        filteredProvinces.push(provinceName);
                    }
                } catch {}
            }
            return filteredProvinces;
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π:', e);
            return [];
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ—Ä-–∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     * @param {string} contentType - —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (potion, artifact, character, etc.)
     * @param {string} projectRoot - –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
     * @returns {Promise<Object>} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
     */
    async analyzeLoreContext(contentType, projectRoot) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞
            if (!window.loreAnalyzerService) {
                throw new Error('–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ä-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞
            const content = this.getCurrentContent();
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            const analysis = await window.loreAnalyzerService.analyzeContent(content, contentType, projectRoot);
            
            return analysis;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ä-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞
     * @returns {string} - —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
     */
    getCurrentContent() {
        // –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
        return JSON.stringify(this.data || {}, null, 2);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ä-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     * @param {HTMLElement} container - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏
     * @param {string} contentType - —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     * @param {string} projectRoot - –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
     */
    createLoreAnalysisButton(container, contentType, projectRoot) {
        const button = container.createEl('button', { text: 'üìä –ê–Ω–∞–ª–∏–∑ –ª–æ—Ä–∞' });
        button.style.cssText = `
            padding: 8px 16px;
            background: #2196F3;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 10px;
            font-size: 14px;
        `;
        
        button.onclick = async () => {
            try {
                button.disabled = true;
                button.textContent = '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...';
                
                const analysis = await this.analyzeLoreContext(contentType, projectRoot);
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                const { LoreAnalysisModal } = require('./LoreAnalysisModal.js');
                const modal = new LoreAnalysisModal(this.app, Modal, Setting, Notice, analysis);
                modal.open();
                
            } catch (error) {
                new Notice(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
            } finally {
                button.disabled = false;
                button.textContent = 'üìä –ê–Ω–∞–ª–∏–∑ –ª–æ—Ä–∞';
            }
        };
        
        return button;
    }
}

module.exports = { EntityWizardBase };


