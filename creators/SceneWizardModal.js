/**
 * @file       SceneWizardModal.js
 * @description –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ü–µ–Ω—ã.
 * @author     Cursor
 * @version    1.0.0
 * @license    MIT
 * @dependencies obsidian, ../utils/modals
 * @created    [–¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è]
 * @updated    [–¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è]
 * @docs       /docs/project.md
 */

// Modal, Setting, Notice –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä

class SceneWizardModal extends Modal {
    constructor(app, ModalClass, SettingClass, NoticeClass, autocompleteData, onFinish) {
        super(app);
        this.Modal = ModalClass;
        this.Setting = SettingClass;
        this.Notice = NoticeClass;
        this.autocompleteData = autocompleteData; // { plotLinesList, charactersList, locationsList, chapterChoices }
        this.onFinish = onFinish;
        this.state = {
            step: 0,
            sceneName: '',
            chapterNum: '',
            // chapterManual: '', // –£–¥–∞–ª–µ–Ω–æ: —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –≥–ª–∞–≤—ã –Ω–µ –Ω—É–∂–µ–Ω
            plotLines: [],
            characters: [],
            locations: [],
            tags: [],
        };
        this.steps = [
            '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã',
            '–ù–æ–º–µ—Ä –≥–ª–∞–≤—ã',
            '–°—é–∂–µ—Ç–Ω—ã–µ –ª–∏–Ω–∏–∏',
            '–ü–µ—Ä—Å–æ–Ω–∞–∂–∏',
            '–õ–æ–∫–∞—Ü–∏–∏',
            '–¢–µ–≥–∏',
            '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä',
        ];
    }
    onOpen() {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.modalEl.style.cssText = `
            max-width: 900px !important;
            width: 900px !important;
        `;
        this.contentEl.style.cssText = `
            padding: 20px;
            max-width: 900px !important;
            max-height: 80vh;
            overflow-y: auto;
        `;
        
        this.render();
    }
    render() {
        const { contentEl } = this;
        contentEl.empty();
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const progress = contentEl.createDiv('progress-indicator');
        progress.style.cssText = `
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            padding: 10px;
            background: var(--background-secondary);
            border-radius: 8px;
        `;
        
        this.steps.forEach((step, index) => {
            const stepEl = progress.createDiv('step');
            stepEl.style.cssText = `
                padding: 5px 10px;
                border-radius: 4px;
                font-size: 12px;
                font-weight: ${index === this.state.step ? '600' : '400'};
                color: ${index === this.state.step ? 'var(--text-on-accent)' : 'var(--text-muted)'};
                background: ${index === this.state.step ? 'var(--interactive-accent)' : 'transparent'};
            `;
            stepEl.textContent = step;
        });
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —à–∞–≥–∞
        const header = contentEl.createEl('h2', { text: this.steps[this.state.step] });
        header.style.cssText = `
            margin: 20px 0;
            color: var(--text-accent);
            font-size: 20px;
            font-weight: 600;
            border-bottom: 2px solid var(--background-modifier-border);
            padding-bottom: 10px;
        `;
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        switch (this.state.step) {
            case 0: this.renderSceneName(contentEl); break;
            case 1: this.renderChapterNumber(contentEl); break;
            case 2: this.renderPlotLines(contentEl); break;
            case 3: this.renderCharacters(contentEl); break;
            case 4: this.renderLocations(contentEl); break;
            case 5: this.renderTags(contentEl); break;
            case 6: this.renderPreview(contentEl); break;
        }
    }
    renderSceneName(el) {
        // –°–ø—Ä–∞–≤–∫–∞
        const help = el.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üé¨ –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã. –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç—Ä–∞–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Å—Ü–µ–Ω–µ.
            </div>
        `;
        
        new this.Setting(el)
            .setName('–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã')
            .addText(text => {
                text.setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã')
                .setValue(this.state.sceneName)
                .onChange(value => {
                    this.state.sceneName = value;
                    });
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è
                text.inputEl.style.width = '100%';
                text.inputEl.style.fontSize = '16px';
                text.inputEl.style.padding = '8px';
            });
        this.renderNav(el, () => {
            if (!this.state.sceneName.trim()) {
                new this.Notice('–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!');
                return;
            }
            this.state.step++;
            this.render();
        });
    }
    renderChapterNumber(el) {
        // –°–ø—Ä–∞–≤–∫–∞
        const help = el.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üìñ –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∞ —Å—Ü–µ–Ω–∞. –°—Ü–µ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–º–µ—â–µ–Ω–∞ –≤ –ø–∞–ø–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥–ª–∞–≤—ã.
            </div>
        `;
        
        const chapters = this.autocompleteData.chapterChoices || [];
        const container = el.createDiv();
        el.appendChild(container);
        
        if (chapters.length === 0) {
            const noChaptersDiv = container.createDiv();
            noChaptersDiv.style.cssText = `
                padding: 20px;
                text-align: center;
                color: var(--text-muted);
                background: var(--background-secondary);
                border-radius: 8px;
                margin-bottom: 15px;
            `;
            noChaptersDiv.innerHTML = `
                <div style="font-size: 16px; margin-bottom: 8px;">üìö</div>
                <div>–ì–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
                <div style="font-size: 12px; margin-top: 5px;">–°–æ–∑–¥–∞–π—Ç–µ –≥–ª–∞–≤—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è</div>
            `;
        } else {
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã
            chapters.forEach(chapter => {
                const chapterBtn = container.createEl('button', { 
                    text: `${chapter.num} - ${chapter.name}` 
                });
                
                const isSelected = this.state.chapterNum === chapter.num;
                
                chapterBtn.style.cssText = `
                    display: block;
                    width: 100%;
                    padding: 12px 16px;
                    margin: 8px 0;
                    background: ${isSelected ? 'var(--interactive-accent)' : 'var(--background-secondary)'};
                    color: ${isSelected ? 'var(--text-on-accent)' : 'var(--text-normal)'};
                    border: 2px solid ${isSelected ? 'var(--interactive-accent)' : 'var(--background-modifier-border)'};
                    border-radius: 8px;
                    font-size: 14px;
                    font-weight: ${isSelected ? '600' : '500'};
                    cursor: pointer;
                    transition: all 0.2s ease;
                    text-align: left;
                `;
                
                chapterBtn.addEventListener('mouseenter', () => {
                    if (!isSelected) {
                        chapterBtn.style.background = 'var(--background-modifier-hover)';
                        chapterBtn.style.borderColor = 'var(--interactive-accent)';
                    }
                });
                
                chapterBtn.addEventListener('mouseleave', () => {
                    if (!isSelected) {
                        chapterBtn.style.background = 'var(--background-secondary)';
                        chapterBtn.style.borderColor = 'var(--background-modifier-border)';
                    }
                });
                
                chapterBtn.onclick = () => {
                    this.state.chapterNum = chapter.num;
                    this.render();
                };
            });
        }
        
        this.renderNav(el, () => {
            if (!this.state.chapterNum) {
                new this.Notice('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É –∏–∑ —Å–ø–∏—Å–∫–∞.');
                return;
            }
            this.state.step++;
            this.render();
        });
    }
    renderPlotLines(el) {
        // –°–ø—Ä–∞–≤–∫–∞
        const help = el.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üìà –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –í—ã–±–µ—Ä–∏—Ç–µ —Å—é–∂–µ—Ç–Ω—ã–µ –ª–∏–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ü–µ–Ω–µ. –£–∫–∞–∂–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å —É—á–∞—Å—Ç–∏—è: –ø—Ä—è–º–∞—è (–æ—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è), —Å–≤—è–∑–∞–Ω–Ω–∞—è (–≤—Ç–æ—Ä–∏—á–Ω–∞—è) –∏–ª–∏ —Ñ–æ–Ω–æ–≤–∞—è (—É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è).
            </div>
        `;
        
        const list = this.autocompleteData.plotLinesList;
        const selected = [...this.state.plotLines];
        const container = el.createDiv();
        el.appendChild(container);
        
        // –ö—Ä–∞—Å–∏–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        const addBtn = container.createEl('button', { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—é–∂–µ—Ç–Ω—É—é –ª–∏–Ω–∏—é' });
        addBtn.style.cssText = `
            padding: 8px 16px;
            background: var(--interactive-accent);
            color: var(--text-on-accent);
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease;
            margin-bottom: 15px;
        `;
        addBtn.addEventListener('mouseenter', () => {
            addBtn.style.background = 'var(--interactive-accent-hover)';
        });
        addBtn.addEventListener('mouseleave', () => {
            addBtn.style.background = 'var(--interactive-accent)';
        });
        
        addBtn.onclick = () => {
            const choices = list.filter(l => !selected.find(s => s.id === l.id)).map(l => `${l.name} - ${l.description}`);
            if (choices.length === 0) return;
            new SuggesterModal(this.app, this.Modal, this.Setting, this.Notice, choices, choices, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—é–∂–µ—Ç–Ω—É—é –ª–∏–Ω–∏—é').openAndGetValue().then(choice => {
                if (!choice) return;
                const lineObj = list.find(l => `${l.name} - ${l.description}` === choice);
                if (!lineObj) return;
                // –°—Ç–µ–ø–µ–Ω—å
                const degrees = [ '–ü—Ä—è–º–∞—è', '–°–≤—è–∑–∞–Ω–Ω–∞—è', '–§–æ–Ω–æ–≤–∞—è' ];
                new SuggesterModal(this.app, this.Modal, this.Setting, this.Notice, degrees, degrees, `–°—Ç–µ–ø–µ–Ω—å –¥–ª—è "${lineObj.name}"`).openAndGetValue().then(degree => {
                    if (!degree) return;
                    // –û–ø–∏—Å–∞–Ω–∏–µ
                    const descPrompt = new PromptModal(this.app, this.Modal, this.Setting, this.Notice, `–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ —Å—Ü–µ–Ω—ã –≤ –ª–∏–Ω–∏–∏ "${lineObj.name}":`);
                    descPrompt.openAndGetValue().then(description => {
                        selected.push({
                            id: lineObj.id,
                            line: lineObj.name,
                            degree: degree.toLowerCase(),
                            description: description || `–†–∞–∑–≤–∏—Ç–∏–µ –ª–∏–Ω–∏–∏ "${lineObj.name}"`
                        });
                        this.state.plotLines = selected;
                        this.render();
                    });
                });
            });
        };
        
        // –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        if (selected.length > 0) {
            const selectedContainer = container.createDiv('selected-plot-lines');
            selectedContainer.style.cssText = `
                background: var(--background-secondary);
                border-radius: 8px;
                padding: 15px;
                margin-top: 10px;
            `;
            
        selected.forEach((pl, idx) => {
                const itemDiv = selectedContainer.createDiv('plot-line-item');
                itemDiv.style.cssText = `
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 8px 12px;
                    margin: 5px 0;
                    background: var(--background-primary);
                    border-radius: 6px;
                    border-left: 3px solid var(--interactive-accent);
                `;
                
                const infoDiv = itemDiv.createDiv('plot-line-info');
                infoDiv.innerHTML = `
                    <div style="font-weight: 600; color: var(--text-accent);">${pl.line}</div>
                    <div style="font-size: 12px; color: var(--text-muted);">${pl.degree} ‚Ä¢ ${pl.description}</div>
                `;
                
                const deleteBtn = itemDiv.createEl('button', { text: 'üóëÔ∏è' });
                deleteBtn.style.cssText = `
                    background: var(--background-modifier-error);
                    color: var(--text-on-accent);
                    border: none;
                    border-radius: 4px;
                    padding: 4px 8px;
                    cursor: pointer;
                    font-size: 12px;
                `;
                deleteBtn.onclick = () => {
                    this.state.plotLines.splice(idx, 1);
                this.render();
            };
        });
        }
        
        this.renderNav(el, () => {
            if (!this.state.plotLines.length) {
                new this.Notice('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—é–∂–µ—Ç–Ω—É—é –ª–∏–Ω–∏—é!');
                return;
            }
            this.state.step++;
            this.render();
        }, true);
    }
    renderCharacters(el) {
        // –°–ø—Ä–∞–≤–∫–∞
        const help = el.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üë• –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ —ç—Ç–æ–π —Å—Ü–µ–Ω–µ. –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω—ã —Å—Å—ã–ª–∫–∞–º–∏ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ —Å—Ü–µ–Ω—ã.
            </div>
        `;
        
        const list = this.autocompleteData.charactersList;
        const selected = [...this.state.characters];
        const container = el.createDiv();
        el.appendChild(container);
        
        // –ö—Ä–∞—Å–∏–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        const addBtn = container.createEl('button', { text: 'üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' });
        addBtn.style.cssText = `
            padding: 8px 16px;
            background: var(--interactive-accent);
            color: var(--text-on-accent);
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease;
            margin-bottom: 15px;
        `;
        addBtn.addEventListener('mouseenter', () => {
            addBtn.style.background = 'var(--interactive-accent-hover)';
        });
        addBtn.addEventListener('mouseleave', () => {
            addBtn.style.background = 'var(--interactive-accent)';
        });
        
        addBtn.onclick = () => {
            const choices = list.filter(c => !selected.includes(c));
            if (choices.length === 0) return;
            new SuggesterModal(this.app, this.Modal, this.Setting, this.Notice, choices, choices, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞').openAndGetValue().then(choice => {
                if (!choice) return;
                selected.push(choice);
                this.state.characters = selected;
                this.render();
            });
        };
        
        // –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        if (selected.length > 0) {
            const selectedContainer = container.createDiv('selected-characters');
            selectedContainer.style.cssText = `
                background: var(--background-secondary);
                border-radius: 8px;
                padding: 15px;
                margin-top: 10px;
            `;
            
            selected.forEach((character, idx) => {
                const itemDiv = selectedContainer.createDiv('character-item');
                itemDiv.style.cssText = `
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 8px 12px;
                    margin: 5px 0;
                    background: var(--background-primary);
                    border-radius: 6px;
                    border-left: 3px solid var(--interactive-accent);
                `;
                
                const infoDiv = itemDiv.createDiv('character-info');
                infoDiv.innerHTML = `
                    <div style="font-weight: 600; color: var(--text-accent);">${character}</div>
                `;
                
                const deleteBtn = itemDiv.createEl('button', { text: 'üóëÔ∏è' });
                deleteBtn.style.cssText = `
                    background: var(--background-modifier-error);
                    color: var(--text-on-accent);
                    border: none;
                    border-radius: 4px;
                    padding: 4px 8px;
                    cursor: pointer;
                    font-size: 12px;
                `;
                deleteBtn.onclick = () => {
                    this.state.characters.splice(idx, 1);
                this.render();
            };
        });
        }
        
        this.renderNav(el, () => {
            this.state.step++;
            this.render();
        }, true);
    }
    renderLocations(el) {
        // –°–ø—Ä–∞–≤–∫–∞
        const help = el.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üìç –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏–∏, –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ —Å—Ü–µ–Ω—ã. –õ–æ–∫–∞—Ü–∏–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω—ã —Å—Å—ã–ª–∫–∞–º–∏ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ —Å—Ü–µ–Ω—ã.
            </div>
        `;
        
        const list = this.autocompleteData.locationsList;
        const selected = [...this.state.locations];
        const container = el.createDiv();
        el.appendChild(container);
        
        // –ö—Ä–∞—Å–∏–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        const addBtn = container.createEl('button', { text: 'üìç –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é' });
        addBtn.style.cssText = `
            padding: 8px 16px;
            background: var(--interactive-accent);
            color: var(--text-on-accent);
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease;
            margin-bottom: 15px;
        `;
        addBtn.addEventListener('mouseenter', () => {
            addBtn.style.background = 'var(--interactive-accent-hover)';
        });
        addBtn.addEventListener('mouseleave', () => {
            addBtn.style.background = 'var(--interactive-accent)';
        });
        
        addBtn.onclick = () => {
            const choices = list.filter(l => !selected.includes(l));
            if (choices.length === 0) return;
            new SuggesterModal(this.app, this.Modal, this.Setting, this.Notice, choices, choices, '–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é').openAndGetValue().then(choice => {
                if (!choice) return;
                selected.push(choice);
                this.state.locations = selected;
                this.render();
            });
        };
        
        // –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        if (selected.length > 0) {
            const selectedContainer = container.createDiv('selected-locations');
            selectedContainer.style.cssText = `
                background: var(--background-secondary);
                border-radius: 8px;
                padding: 15px;
                margin-top: 10px;
            `;
            
            selected.forEach((location, idx) => {
                const itemDiv = selectedContainer.createDiv('location-item');
                itemDiv.style.cssText = `
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 8px 12px;
                    margin: 5px 0;
                    background: var(--background-primary);
                    border-radius: 6px;
                    border-left: 3px solid var(--interactive-accent);
                `;
                
                const infoDiv = itemDiv.createDiv('location-info');
                infoDiv.innerHTML = `
                    <div style="font-weight: 600; color: var(--text-accent);">${location}</div>
                `;
                
                const deleteBtn = itemDiv.createEl('button', { text: 'üóëÔ∏è' });
                deleteBtn.style.cssText = `
                    background: var(--background-modifier-error);
                    color: var(--text-on-accent);
                    border: none;
                    border-radius: 4px;
                    padding: 4px 8px;
                    cursor: pointer;
                    font-size: 12px;
                `;
                deleteBtn.onclick = () => {
                    this.state.locations.splice(idx, 1);
                this.render();
            };
        });
        }
        
        this.renderNav(el, () => {
            this.state.step++;
            this.render();
        }, true);
    }
    renderTags(el) {
        // –°–ø—Ä–∞–≤–∫–∞
        const help = el.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üè∑Ô∏è –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è —Å—Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –¢–µ–≥–∏ –ø–æ–º–æ–≥—É—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω—É –∏ –Ω–∞–π—Ç–∏ –µ—ë –≤ –±—É–¥—É—â–µ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: "—ç–∫—à–Ω", "–¥–∏–∞–ª–æ–≥", "–≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ".
            </div>
        `;
        
        new this.Setting(el)
            .setName('–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
            .addText(text => {
                text.setPlaceholder('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
                    .setValue(this.state.tags.join(', '))
                    .onChange(value => {
                        this.state.tags = value.split(',').map(s => s.trim()).filter(Boolean);
                    });
            });
        this.renderNav(el, () => {
            this.state.step++;
            this.render();
        }, true);
    }
    renderPreview(el) {
        // –°–ø—Ä–∞–≤–∫–∞
        const help = el.createDiv('help-section');
        help.style.cssText = `
            background: var(--background-secondary-alt);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--interactive-accent);
        `;
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üëÅÔ∏è –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ü–µ–Ω–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —à–∞–≥–∞–º.
            </div>
        `;
        
        const previewEl = el.createEl('div', { cls: 'preview-section' });
        previewEl.style.cssText = `
            background: var(--background-secondary);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        `;
        
        const previewHeader = previewEl.createEl('h3', { text: '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ü–µ–Ω—ã' });
        previewHeader.style.cssText = `
            color: var(--text-accent);
            margin-bottom: 15px;
            font-size: 18px;
            font-weight: 600;
        `;
        
        const previewContent = previewEl.createDiv('preview-content');
        previewContent.style.cssText = `
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        `;
        
        // –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
        const leftCol = previewContent.createDiv('preview-left');
        leftCol.innerHTML = `
            <div style="margin-bottom: 10px;">
                <strong style="color: var(--text-accent);">üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ:</strong><br>
                <span style="color: var(--text-normal);">${this.state.sceneName}</span>
            </div>
            <div style="margin-bottom: 10px;">
                <strong style="color: var(--text-accent);">üìñ –ì–ª–∞–≤–∞:</strong><br>
                <span style="color: var(--text-normal);">${this.state.chapterNum}</span>
            </div>
            <div style="margin-bottom: 10px;">
                <strong style="color: var(--text-accent);">üè∑Ô∏è –¢–µ–≥–∏:</strong><br>
                <span style="color: var(--text-normal);">${this.state.tags.join(', ') || '–ù–µ—Ç'}</span>
            </div>
        `;
        
        // –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
        const rightCol = previewContent.createDiv('preview-right');
        rightCol.innerHTML = `
            <div style="margin-bottom: 10px;">
                <strong style="color: var(--text-accent);">üìà –°—é–∂–µ—Ç–Ω—ã–µ –ª–∏–Ω–∏–∏:</strong><br>
                <span style="color: var(--text-normal);">${this.state.plotLines.map(pl => pl.line).join(', ') || '–ù–µ—Ç'}</span>
            </div>
            <div style="margin-bottom: 10px;">
                <strong style="color: var(--text-accent);">üë• –ü–µ—Ä—Å–æ–Ω–∞–∂–∏:</strong><br>
                <span style="color: var(--text-normal);">${this.state.characters.join(', ') || '–ù–µ—Ç'}</span>
            </div>
            <div style="margin-bottom: 10px;">
                <strong style="color: var(--text-accent);">üìç –õ–æ–∫–∞—Ü–∏–∏:</strong><br>
                <span style="color: var(--text-normal);">${this.state.locations.join(', ') || '–ù–µ—Ç'}</span>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        this.renderNav(el, null, true, false);
    }
    renderNav(el, onNext, showBack = false, showOnlyBack = false) {
        const navEl = el.createEl('div', { cls: 'modal-nav' });
        navEl.style.cssText = `
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid var(--background-modifier-border);
        `;
        
        const leftButtons = navEl.createDiv('nav-left');
        const rightButtons = navEl.createDiv('nav-right');
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if (this.state.step > 0) {
            const prevBtn = leftButtons.createEl('button', { text: '‚Üê –ù–∞–∑–∞–¥' });
            prevBtn.style.cssText = `
                padding: 8px 16px;
                background: var(--background-secondary);
                color: var(--text-muted);
                border: 1px solid var(--background-modifier-border);
                border-radius: 6px;
                font-size: 14px;
                font-weight: 500;
                cursor: pointer;
                transition: background-color 0.2s ease;
            `;
            prevBtn.addEventListener('mouseenter', () => {
                prevBtn.style.background = 'var(--background-modifier-hover)';
            });
            prevBtn.addEventListener('mouseleave', () => {
                prevBtn.style.background = 'var(--background-secondary)';
            });
            prevBtn.onclick = () => {
                this.state.step--;
                this.render();
            };
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –∏–ª–∏ "–°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω—É"
        if (this.state.step < this.steps.length - 1) {
            const nextBtn = rightButtons.createEl('button', { text: '–î–∞–ª–µ–µ ‚Üí' });
            nextBtn.style.cssText = `
                padding: 8px 16px;
                background: var(--interactive-accent);
                color: var(--text-on-accent);
                border: none;
                border-radius: 6px;
                font-size: 14px;
                font-weight: 500;
                cursor: pointer;
                transition: background-color 0.2s ease;
            `;
            nextBtn.addEventListener('mouseenter', () => {
                nextBtn.style.background = 'var(--interactive-accent-hover)';
            });
            nextBtn.addEventListener('mouseleave', () => {
                nextBtn.style.background = 'var(--interactive-accent)';
            });
            nextBtn.onclick = () => {
            if (this.validateCurrentStep()) {
                this.state.step++;
                this.render();
            }
            };
        } else {
            const finishBtn = rightButtons.createEl('button', { text: '‚úì –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω—É' });
            finishBtn.style.cssText = `
                padding: 10px 20px;
                background: var(--interactive-accent);
                color: var(--text-on-accent);
                border: none;
                border-radius: 6px;
                font-size: 14px;
                font-weight: 600;
                cursor: pointer;
                transition: background-color 0.2s ease;
            `;
            finishBtn.addEventListener('mouseenter', () => {
                finishBtn.style.background = 'var(--interactive-accent-hover)';
            });
            finishBtn.addEventListener('mouseleave', () => {
                finishBtn.style.background = 'var(--interactive-accent)';
            });
            finishBtn.onclick = () => {
                this.onFinish(this.state);
                this.close();
            };
        }
    }
    validateCurrentStep() {
        switch (this.state.step) {
            case 0: // Scene Name
                if (!this.state.sceneName.trim()) {
                    new this.Notice('–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!');
                    return false;
                }
                break;
            case 1: // Chapter Number (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞)
                if (!this.state.chapterNum.trim()) {
                    new this.Notice('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É –∏–∑ —Å–ø–∏—Å–∫–∞.');
                    return false;
                }
                break;
            case 2: // Plot Lines (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            case 3: // Characters (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            case 4: // Locations (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            case 5: // Tags (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                // –≠—Ç–∏ –ø–æ–ª—è —Ç–µ–ø–µ—Ä—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
                break;
            case 6: // Preview
                // –î–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
                break;
        }
        return true;
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}

module.exports = SceneWizardModal;
