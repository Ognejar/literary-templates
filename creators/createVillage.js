/**
 * @file       createVillage.js
 * @description –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ä–µ–≤–Ω–∏ –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞ Literary Templates
 * @author     AI Assistant
 * @version    1.0.1
 * @license    MIT
 * @dependencies main.js, VillageWizardModal.js
 * @created    2025-01-09
 * @updated    2025-01-09
 * @docs       docs/project.md
 */

// –ò–º–ø–æ—Ä—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ main.js
const { findProjectRoot, generateFromTemplate, ensureEntityInfrastructure, safeCreateFile } = require('../main.js');
const { TFile } = require('obsidian');

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–Ω–∏
 */
var createVillage = async function(plugin, projectRoot, options = {}) {
    try {
        await plugin.logDebug('=== createVillage –≤—ã–∑–≤–∞–Ω–∞ ===');
        await plugin.logDebug('startPath: ' + projectRoot);
        // 1. –ù–∞–π—Ç–∏ projectRoot –æ—Ç startPath
        let project = '';
        if (projectRoot) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º findProjectRoot –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
            project = findProjectRoot(plugin.app, projectRoot);
            if (!project) {
                await plugin.logDebug('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è: ' + projectRoot);
                // Fallback: –≤—ã–±–æ—Ä –∏–∑ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
                const allFiles = plugin.app.vault.getMarkdownFiles();
                const projectFiles = allFiles.filter(f => f.basename === '–ù–∞—Å—Ç—Ä–æ–π–∫–∏_–º–∏—Ä–∞');
                const projects = projectFiles.map(f => f.parent.path);
                if (projects.length === 0) {
                    new Notice('–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
                    await plugin.logDebug('–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
                    return;
                }
                project = await plugin.selectProject(projects);
                if (!project) return;
            }
        } else {
            // Fallback: –≤—ã–±–æ—Ä –∏–∑ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            const allFiles = plugin.app.vault.getMarkdownFiles();
            const projectFiles = allFiles.filter(f => f.basename === '–ù–∞—Å—Ç—Ä–æ–π–∫–∏_–º–∏—Ä–∞');
            const projects = projectFiles.map(f => f.parent.path);
            if (projects.length === 0) {
                new Notice('–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
                await plugin.logDebug('–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
                return;
            }
            project = await plugin.selectProject(projects);
            if (!project) return;
        }
        await plugin.logDebug('project: ' + project);
        // --- –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ ---
        // 1. –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏
        let provincesList = [];
        try {
            const provincesFolder = `${project}/–õ–æ–∫–∞—Ü–∏–∏/–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏`;
            const folder = plugin.app.vault.getAbstractFileByPath(provincesFolder);
            if (folder && folder.children) {
                provincesList = folder.children
                    .filter(f => f instanceof TFile && f.extension === 'md' && !f.basename.startsWith('Index') && !f.basename.startsWith('.'))
                    .map(f => f.basename);
                await plugin.logDebug('provincesList: ' + provincesList.join(', '));
            } else {
                provincesList = [];
                await plugin.logDebug('No provinces found');
            }
        } catch (e) { 
            provincesList = []; 
            await plugin.logDebug('Error loading provinces: ' + e.message);
        }
        // --- –ó–∞–ø—É—Å–∫ VillageWizardModal ---
        const modal = new VillageWizardModal(plugin.app, Modal, Setting, Notice, { provincesList, projectRoot: project }, async (villageData) => {
            // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –¥–µ—Ä–µ–≤–Ω–∏ –ø–æ —à–∞–±–ª–æ–Ω—É
            const cleanName = villageData.villageName.trim().replace(/[^–∞-—è–ê-–Ø—ë–Å\w\s-.]/g, '').replace(/\s+/g, '_');
            const createdDate = window.moment().format('YYYY-MM-DD');
            
            // –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–µ—Ä–µ–≤–Ω–∏
            const baseName = '–î–µ—Ä–µ–≤–Ω—è';
            const tagImage = window.litSettingsService ? window.litSettingsService.findTagImage(plugin.app, project, baseName) : '';
            const imageBlock = tagImage ? `![[${tagImage}]]` : '';
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –¥–ª—è –¥–µ—Ä–µ–≤–Ω–∏
            let state = villageData.state || '';
            if (!state && villageData.province) {
                try {
                    const provinceFile = plugin.app.vault.getAbstractFileByPath(`${project}/–õ–æ–∫–∞—Ü–∏–∏/–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏/${villageData.province}.md`);
                    if (provinceFile) {
                        const provinceContent = await plugin.app.vault.read(provinceFile);
                        // –ò—â–µ–º –∏ state, –∏ country –≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
                        const stateMatch = provinceContent.match(/^state:\s*"?([^"\n]+)"?/m);
                        const countryMatch = provinceContent.match(/^country:\s*"?([^"\n]+)"?/m);
                        if (stateMatch) {
                            state = stateMatch[1];
                        } else if (countryMatch) {
                            state = countryMatch[1];
                        }
                    }
                } catch (e) {
                    await plugin.logDebug('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –∏–∑ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏: ' + e.message);
                }
            }
            
            // –ï—Å–ª–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –≤—Å—ë –µ—â—ë –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (!state) {
                state = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
            }

            // --- –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ---
            const data = {
              date: createdDate,
              villageName: villageData.villageName?.trim() || cleanName,
              climate: villageData.climate || '',
              faction: villageData.faction || '',
              province: villageData.province || '',
              country: state, // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ
              // –°—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏—á–∏–Ω–∞
              status: villageData.status || '–¥–µ–π—Å—Ç–≤—É–µ—Ç',
              statusReason: villageData.statusReason || '',
              statusLabel: (villageData.status === '–∑–∞–±—Ä–æ—à–µ–Ω–æ' ? 'üèöÔ∏è –ó–∞–±—Ä–æ—à–µ–Ω–æ' : (villageData.status === '—Ä–∞–∑—Ä—É—à–µ–Ω–æ' ? 'üí• –†–∞–∑—Ä—É—à–µ–Ω–æ' : '‚úÖ –î–µ–π—Å—Ç–≤—É–µ—Ç')),
              description: villageData.description || `[[${cleanName}_–û–ø–∏—Å–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–Ω–∏]]`,
              population: villageData.population || '',
              mainCropsSection: (villageData.mainCrops || []).map(c => `- ${c}`).join('\n') || '‚Äî',
              craftsSection: (villageData.crafts || []).map(c => `- ${c}`).join('\n') || '‚Äî',
              featuresSection: (villageData.features || []).map(f => `- ${f}`).join('\n') || '‚Äî',
              projectName: project.split('/').pop(),
              imageBlock
            };
            const content = await generateFromTemplate('–ù–æ–≤–∞—è_–¥–µ—Ä–µ–≤–Ω—è', data, plugin);

            const fileName = cleanName;
            const targetFolder = `${project}/–õ–æ–∫–∞—Ü–∏–∏/–î–µ—Ä–µ–≤–Ω–∏`;
            await ensureEntityInfrastructure(targetFolder, fileName, plugin.app);
            const targetPath = `${targetFolder}/${fileName}.md`;
            try {
              await safeCreateFile(targetPath, content, plugin.app);
              await plugin.logDebug(`[Village] –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${targetPath}`);
            } catch (e) {
              await plugin.logDebug('[Village] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–µ—Ä–µ–≤–Ω–∏: ' + e.message);
              return;
            }
            const file = plugin.app.vault.getAbstractFileByPath(targetPath);
            if (file instanceof TFile) {
                await plugin.app.workspace.getLeaf().openFile(file);
            }
            new Notice(`–°–æ–∑–¥–∞–Ω–∞ –¥–µ—Ä–µ–≤–Ω—è: ${fileName}`);
        });
        modal.open();
    } catch (error) {
        new Notice('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ—Ä–µ–≤–Ω–∏: ' + error.message);
        await plugin.logDebug('–û—à–∏–±–∫–∞: ' + error.message);
    }
};

module.exports = { createVillage };
