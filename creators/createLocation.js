/**
 * @file       createLocation.js
 * @description –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞ Literary Templates
 * @author     AI Assistant
 * @version    1.0.0
 * @license    MIT
 * @dependencies main.js, modals.js, LocationWizardModal
 * @created    2025-01-09
 * @updated    2025-01-09
 * @docs       docs/project.md
 */

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
 */
var createLocation = async function(plugin, startPath = '', options = {}) {
    try {
        await plugin.logDebug('=== createLocation –≤—ã–∑–≤–∞–Ω–∞ ===');
        await plugin.logDebug('startPath: ' + startPath);

        let resolvedProjectRoot = '';
        if (startPath) {
            resolvedProjectRoot = findProjectRoot(plugin.app, startPath) || startPath;
        }
        let project = '';
        if (resolvedProjectRoot) {
            project = resolvedProjectRoot;
        } else {
            const allFiles = plugin.app.vault.getMarkdownFiles();
            const projectFiles = allFiles.filter(f => f.basename === '–ù–∞—Å—Ç—Ä–æ–π–∫–∏_–º–∏—Ä–∞');
            const projects = projectFiles.map(f => f.parent.path);
            if (projects.length === 0) {
                new Notice('–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
                await plugin.logDebug('–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
                return;
            }
            project = await plugin.selectProject(projects);
            if (!project) return;
        }
        await plugin.logDebug('project: ' + project);

        const modal = new LocationWizardModal(plugin.app, Modal, Setting, Notice, project, async (locationData) => {
            const cleanName = locationData.locationName.trim().replace(/[^–∞-—è–ê-–Ø—ë–Å\w\s-.]/g, '').replace(/\s+/g, '_');
            const featuresContent = locationData.features.map(f => `- ${f}`).join('\n');

            // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            const data = {
                ...locationData,
                cleanName: cleanName,
                date: window.moment ? window.moment().format('YYYY-MM-DD') : new Date().toISOString().slice(0, 10),
                typeLowercase: locationData.type.toLowerCase(),
                // –°—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏—á–∏–Ω–∞
                status: locationData.status || '–¥–µ–π—Å—Ç–≤—É–µ—Ç',
                statusReason: locationData.statusReason || '',
                statusLabel: (locationData.status === '–∑–∞–±—Ä–æ—à–µ–Ω–æ' ? 'üèöÔ∏è –ó–∞–±—Ä–æ—à–µ–Ω–æ' : (locationData.status === '—Ä–∞–∑—Ä—É—à–µ–Ω–æ' ? 'üí• –†–∞–∑—Ä—É—à–µ–Ω–æ' : '‚úÖ –î–µ–π—Å—Ç–≤—É–µ—Ç')),
                featuresContent: featuresContent
            };

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
            const content = await generateFromTemplate('–ù–æ–≤–∞—è_–ª–æ–∫–∞—Ü–∏—è', data, plugin);
            
            const fileName = cleanName;
            const targetFolder = `${project}/–õ–æ–∫–∞—Ü–∏–∏`;
            await ensureEntityInfrastructure(targetFolder, fileName, plugin.app);
            const targetPath = `${targetFolder}/${fileName}.md`;
            await safeCreateFile(targetPath, content, plugin.app);

            const file = plugin.app.vault.getAbstractFileByPath(targetPath);
            if (file instanceof TFile) {
                await plugin.app.workspace.getLeaf().openFile(file);
            }
            new Notice(`–°–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: ${fileName}`);
        });
        modal.open();
    } catch (error) {
        new Notice('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏: ' + error.message);
        await plugin.logDebug('–û—à–∏–±–∫–∞: ' + error.message);
    }
};

module.exports = { createLocation };
