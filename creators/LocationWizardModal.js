/**
 * @file       LocationWizardModal.js
 * @description –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏.
 * @author     Cursor
 * @version    1.0.0
 * @license    MIT
 * @dependencies obsidian, ../utils/modals
 * @created    2024-07-29
 * @updated    2024-07-29
 * @docs       /docs/project.md
 */

// Modal, Setting, Notice –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä


const { EntityWizardBase } = require('./EntityWizardBase.js');

class LocationWizardModal extends EntityWizardBase {
    constructor(app, ModalClass, SettingClass, NoticeClass, projectRoot, onFinish) {
        super(app, ModalClass, SettingClass, NoticeClass);
        this.projectRoot = projectRoot;
        this.onFinish = onFinish;
        this.step = 0;
        this.data = {
            locationName: '',
            type: '–õ–æ–∫–∞—Ü–∏—è',
            description: '',
            region: '',
            climate: '',
            faction: '',
            status: '–¥–µ–π—Å—Ç–≤—É–µ—Ç', // –¥–µ–π—Å—Ç–≤—É–µ—Ç, –∑–∞–±—Ä–æ—à–µ–Ω–æ, —Ä–∞–∑—Ä—É—à–µ–Ω–æ
            statusReason: '', // –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–±—Ä–æ—à–µ–Ω–Ω–æ—Å—Ç–∏/—Ä–∞–∑—Ä—É—à–µ–Ω–∏—è
        };
        this.config = {
            locationTypes: [],
            climates: [],
            factions: [],
            provinces: [],
            statuses: [
                { value: '–¥–µ–π—Å—Ç–≤—É–µ—Ç', label: '–î–µ–π—Å—Ç–≤—É–µ—Ç', icon: '‚úÖ' },
                { value: '–∑–∞–±—Ä–æ—à–µ–Ω–æ', label: '–ó–∞–±—Ä–æ—à–µ–Ω–æ', icon: 'üèöÔ∏è' },
                { value: '—Ä–∞–∑—Ä—É—à–µ–Ω–æ', label: '–†–∞–∑—Ä—É—à–µ–Ω–æ', icon: 'üí•' }
            ]
        };
    }

    async onOpen() {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.applyBaseUI();
        this.modalEl.style.cssText = `
            max-width: 900px !important;
            width: 900px !important;
        `;
        this.contentEl.style.cssText = `
            padding: 20px;
            max-width: 900px !important;
            max-height: 80vh;
            overflow-y: auto;
        `;
        
        this.contentEl.empty();
        this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏');
        await this.loadConfig();
        this.render();
    }

    async loadConfig() {
        try {
            const projectRoot = this.projectRoot; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π projectRoot
            if (!projectRoot) {
                new this.Notice('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç.');
                this.close();
                return;
            }
            const settingsFile = this.app.vault.getAbstractFileByPath(`${projectRoot}/–ù–∞—Å—Ç—Ä–æ–π–∫–∏_–º–∏—Ä–∞.md`);
            if (settingsFile instanceof TFile) {
                const content = await this.app.vault.read(settingsFile);
                const configMatch = content.match(/```json\n([\s\S]*?)\n```/);
                if (configMatch && configMatch[1]) {
                    const parsedConfig = JSON.parse(configMatch[1]);
                    this.config.locationTypes = parsedConfig.locations.locationTypes || [];
                    this.config.climates = parsedConfig.locations.climates || [];
                    this.config.factions = parsedConfig.locations.factions || [];
                }
            }

            const locationsFolder = `${projectRoot}/–õ–æ–∫–∞—Ü–∏–∏`;
            const folder = this.app.vault.getAbstractFileByPath(locationsFolder);
            if (folder && folder.children) {
                this.config.provinces = folder.children
                    .filter(f => f instanceof TFile && f.extension === 'md' && f.basename.includes('–ü—Ä–æ–≤–∏–Ω—Ü–∏—è') && !f.basename.startsWith('Index') && !f.basename.startsWith('.'))
                    .map(f => f.basename);
            }
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º this.data.type, this.data.climate –∏ this.data.faction –∑–¥–µ—Å—å, –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞
            this.data.type = this.data.type || this.config.locationTypes[0] || '';
            this.data.climate = this.data.climate || this.config.climates[0] || '';
            this.data.faction = this.data.faction || this.config.factions[0] || '';

            console.log('DEBUG: LocationWizardModal - Config loaded. this.config.locationTypes:', this.config.locationTypes, 'climates:', this.config.climates, 'factions:', this.config.factions);
            console.log('DEBUG: LocationWizardModal - Data initialized. type:', this.data.type, 'climate:', this.data.climate, 'faction:', this.data.faction);
        } catch (e) {
            new this.Notice('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ' + e.message);
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', e);
            this.close();
        }
    }

    render() {
        this.contentEl.empty();
        const { contentEl } = this;
        let navButtons = '';

        switch (this.step) {
            case 0:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏ - –®–∞–≥ 1/6: –ù–∞–∑–≤–∞–Ω–∏–µ');
                this.renderLocationName(contentEl);
                navButtons = '<button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 1:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏ - –®–∞–≥ 2/6: –°—Ç–∞—Ç—É—Å –ª–æ–∫–∞—Ü–∏–∏');
                this.renderStatus(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 2:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏ - –®–∞–≥ 3/6: –¢–∏–ø, –ö–ª–∏–º–∞—Ç, –§—Ä–∞–∫—Ü–∏—è');
                this.renderTypeClimateFaction(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 3:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏ - –®–∞–≥ 4/6: –ü—Ä–æ–≤–∏–Ω—Ü–∏—è');
                this.renderProvince(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 4:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏ - –®–∞–≥ 5/6: –û–ø–∏—Å–∞–Ω–∏–µ');
                this.renderDescription(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta" id="next">–î–∞–ª–µ–µ</button>';
                break;
            case 5:
                this.titleEl.setText('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏ - –®–∞–≥ 6/6: –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä');
                this.renderFeatures(contentEl);
                this.renderPreview(contentEl);
                navButtons = '<button id="prev">–ù–∞–∑–∞–¥</button><button class="mod-cta">–°–æ–∑–¥–∞—Ç—å</button>';
                break;
            default:
                break;
        }

        this.renderNav(contentEl, navButtons);
    }

    renderLocationName(contentEl) {
        new this.Setting(contentEl)
            .setName('–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏')
            .addText(text => {
                text.setPlaceholder('–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏')
                    .setValue(this.data.locationName)
                    .onChange(value => {
                        this.data.locationName = value;
                    });
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è
                text.inputEl.style.width = '100%';
                text.inputEl.style.fontSize = '16px';
                text.inputEl.style.padding = '8px';
            });
    }

    renderStatus(contentEl) {
        new this.Setting(contentEl)
            .setName('–°—Ç–∞—Ç—É—Å –ª–æ–∫–∞—Ü–∏–∏')
            .addDropdown(dropdown => {
                this.config.statuses = this.ensureStatuses(this.config.statuses);
                this.addDropdownOptions(dropdown, this.config.statuses);
                dropdown.setValue(this.data.status);
                dropdown.onChange(value => {
                    this.data.status = value;
                    const reasonSetting = contentEl.querySelector('.status-reason-setting');
                    if (reasonSetting) {
                        reasonSetting.style.display = value === '–¥–µ–π—Å—Ç–≤—É–µ—Ç' ? 'none' : 'block';
                    }
                });
                dropdown.selectEl.style.minWidth = '320px';
                dropdown.selectEl.style.fontSize = '14px';
                dropdown.selectEl.style.padding = '6px';
            });

        const reasonSetting = new this.Setting(contentEl)
            .setName('–ü—Ä–∏—á–∏–Ω–∞')
            .addText(text => {
                text.setPlaceholder('–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞, –∑–∞–±–≤–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞')
                    .setValue(this.data.statusReason)
                    .onChange(value => {
                        this.data.statusReason = value;
                    });
                text.inputEl.style.width = '100%';
                text.inputEl.style.fontSize = '16px';
                text.inputEl.style.padding = '8px';
            });
        reasonSetting.settingEl.addClass('status-reason-setting');
        if (this.data.status === '–¥–µ–π—Å—Ç–≤—É–µ—Ç') {
            reasonSetting.settingEl.style.display = 'none';
        }
    }

    renderTypeClimateFaction(contentEl) {
        new this.Setting(contentEl)
            .setName('–¢–∏–ø –ª–æ–∫–∞—Ü–∏–∏')
            .addDropdown(dropdown => {
                this.config.locationTypes.forEach(type => dropdown.addOption(type, type));
                dropdown.setValue(this.data.type || this.config.locationTypes[0]);
                dropdown.onChange(value => this.data.type = value);
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                dropdown.selectEl.style.minWidth = '280px';
                dropdown.selectEl.style.fontSize = '14px';
                dropdown.selectEl.style.padding = '6px';
            });

        new this.Setting(contentEl)
            .setName('–ö–ª–∏–º–∞—Ç')
            .addDropdown(dropdown => {
                this.config.climates.forEach(climate => dropdown.addOption(climate, climate));
                dropdown.setValue(this.data.climate || this.config.climates[0]);
                dropdown.onChange(value => this.data.climate = value);
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                dropdown.selectEl.style.minWidth = '280px';
                dropdown.selectEl.style.fontSize = '14px';
                dropdown.selectEl.style.padding = '6px';
            });

        new this.Setting(contentEl)
            .setName('–§—Ä–∞–∫—Ü–∏—è')
            .addDropdown(dropdown => {
                this.config.factions.forEach(faction => dropdown.addOption(faction, faction));
                dropdown.setValue(this.data.faction || this.config.factions[0]);
                dropdown.onChange(value => this.data.faction = value);
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                dropdown.selectEl.style.minWidth = '280px';
                dropdown.selectEl.style.fontSize = '14px';
                dropdown.selectEl.style.padding = '6px';
            });
    }

    renderProvince(contentEl) {
        new this.Setting(contentEl)
            .setName('–ü—Ä–æ–≤–∏–Ω—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
            .addDropdown(dropdown => {
                dropdown.addOption('', '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
                this.config.provinces.forEach(province => dropdown.addOption(province, province));
                dropdown.setValue(this.data.province);
                dropdown.onChange(value => this.data.province = value);
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                dropdown.selectEl.style.minWidth = '320px';
                dropdown.selectEl.style.fontSize = '14px';
                dropdown.selectEl.style.padding = '6px';
            });
    }

    renderDescription(contentEl) {
        new this.Setting(contentEl)
            .setName('–û–ø–∏—Å–∞–Ω–∏–µ')
            .addTextArea(text => {
                text.setPlaceholder('–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏')
                    .setValue(this.data.description)
                    .onChange(value => {
                        this.data.description = value;
                    });
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
                text.inputEl.style.width = '100%';
                text.inputEl.style.minHeight = '140px';
                text.inputEl.style.fontSize = '14px';
                text.inputEl.style.lineHeight = '1.4';
                text.inputEl.style.padding = '8px';
            });
    }

    renderFeatures(contentEl) {
        const featureContainer = contentEl.createEl('div', { cls: 'features-container' });
        new this.Setting(featureContainer)
            .setName('–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)')
            .addTextArea(text => {
                text.setPlaceholder('–î–æ–±–∞–≤—å—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏')
                    .setValue(this.data.features.join('\\n'))
                    .onChange(value => {
                        this.data.features = value.split('\\n').map(f => f.trim()).filter(f => f.length > 0);
                        this.renderPreview(this.contentEl); // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                    });
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
                text.inputEl.style.width = '100%';
                text.inputEl.style.minHeight = '120px';
                text.inputEl.style.fontSize = '14px';
                text.inputEl.style.lineHeight = '1.4';
                text.inputEl.style.padding = '8px';
            });
    }

    renderPreview(contentEl) {
        const previewEl = contentEl.createEl('div', { cls: 'preview-section' });
        previewEl.createEl('h3', { text: '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:' });
        previewEl.createEl('p', { text: `**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${this.data.locationName}` });
        previewEl.createEl('p', { text: `**–¢–∏–ø:** ${this.data.type}` });
        previewEl.createEl('p', { text: `**–ö–ª–∏–º–∞—Ç:** ${this.data.climate}` });
        previewEl.createEl('p', { text: `**–§—Ä–∞–∫—Ü–∏—è:** ${this.data.faction}` });
        if (this.data.province) {
            previewEl.createEl('p', { text: `**–ü—Ä–æ–≤–∏–Ω—Ü–∏—è:** ${this.data.province}` });
        }
        previewEl.createEl('p', { text: `**–û–ø–∏—Å–∞–Ω–∏–µ:** ${this.data.description.substring(0, 100)}...` });
        previewEl.createEl('p', { text: `**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:** ${this.data.features.join(', ')}` });
    }

    renderNav(contentEl, buttonsHtml) {
        const navEl = contentEl.createEl('div', { cls: 'modal-nav' });
        navEl.innerHTML = buttonsHtml;

        navEl.querySelector('#prev')?.addEventListener('click', () => {
            this.step--;
            this.render();
        });

        navEl.querySelector('#next')?.addEventListener('click', () => {
            if (this.validateCurrentStep()) {
                this.step++;
                this.render();
            }
        });

        navEl.querySelector('.mod-cta:not(#next)')?.addEventListener('click', () => {
            if (this.validateCurrentStep()) {
                this.onFinish(this.data);
                this.close();
            }
        });
    }

    validateCurrentStep() {
        switch (this.step) {
            case 0: // –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
                if (!this.data.locationName.trim()) {
                    new this.Notice('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏.');
                    return false;
                }
                break;
            case 1: // –°—Ç–∞—Ç—É—Å ‚Äî —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ—Ç
                break;
            case 2: // –¢–∏–ø, –ö–ª–∏–º–∞—Ç, –§—Ä–∞–∫—Ü–∏—è
                if (!this.data.type || !this.data.climate || !this.data.faction) {
                    new this.Notice('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø, –∫–ª–∏–º–∞—Ç –∏ —Ñ—Ä–∞–∫—Ü–∏—é.');
                    return false;
                }
                break;
            case 3: // –ü—Ä–æ–≤–∏–Ω—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                // –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                break;
            case 4: // –û–ø–∏—Å–∞–Ω–∏–µ
                if (!this.data.description.trim()) {
                    new this.Notice('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏.');
                    return false;
                }
                break;
            case 5: // –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                break;
        }
        return true;
    }

    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}

module.exports = LocationWizardModal;
