/**
 * @file       SpellWizardModal.js
 * @description –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è—Ö.
 * @author     –í–∞—à –ê–≤—Ç–æ—Ä
 * @version    1.0.1
 * @license    MIT
 * @dependencies obsidian
 * @created    2024-07-22
 * @updated    2025-08-13
 * @docs       docs/–ö–∞—Ä—Ç–æ—á–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.md (—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)
 */
// Modal, Setting, Notice –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä

const { HtmlWizardModal } = require('./HtmlWizardModal.js');

class SpellWizardModal extends HtmlWizardModal {
    constructor(app, ModalClass, SettingClass, NoticeClass, projectPath, onFinish, options = {}) {
        super(app, ModalClass, SettingClass, NoticeClass);
        this.Modal = ModalClass;
        this.Notice = NoticeClass;
        this.projectPath = projectPath;
        this.onFinish = onFinish;
        this.options = options || {};
        this.data = {
            spellName: '',
            description: '',
            school: '', schoolManual: '',
            level: '', levelManual: '',
            castingTime: '',
            range: '',
            components: '',
            duration: '',
            tag1: '', tag1Manual: '', tag2: '', tag2Manual: '', tag3: '', tag3Manual: '',
            class1: '', class1Manual: '', class2: '', class2Manual: '',
            effect1Name: '', effect1Description: '', effect1Manual: '',
            effect2Name: '', effect2Description: '', effect2Manual: '',
            effect3Name: '', effect3Description: '', effect3Manual: '',
            requirements: '',
            limitations: '',
            risks: '',
            usageInstructions: '',
            creationHistory: '',
        };
        this.step = 0;
        this.steps = [
            this.renderMainInfo.bind(this),
            this.renderCharacteristics.bind(this),
            this.renderEffects.bind(this),
            this.renderTagsClasses.bind(this),
            this.renderUsageConditions.bind(this),
            this.renderUsageInstructions.bind(this),
            this.renderCreationHistory.bind(this),
        ];
        this.spravochniki = {};
    }

    async onOpen() {
        await this.loadSpravochniki();
        this.applyBaseStyles();
        this.modalEl.style.maxWidth = '900px';
        this.modalEl.style.width = '900px';
        this.contentEl.classList.add('lt-wizard');
        // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–∑ options.prefillName
        if (this.options && typeof this.options.prefillName === 'string' && this.options.prefillName.trim()) {
            if (!this.data.spellName) this.data.spellName = this.options.prefillName.trim();
        }
        this.render();
    }

    async loadSpravochniki() {
        const base = `${this.projectPath}/–ú–∞–≥–∏—è/–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏`;
        const readList = async (file) => {
            try {
                const f = this.app.vault.getAbstractFileByPath(`${base}/${file}`);
                if (!f) return [];
                const text = await this.app.vault.read(f);
                return text.split('\n').map(x => x.trim()).filter(Boolean);
            } catch (e) { return []; }
        };
        const ensureList = async (file, defaults) => {
            try {
                const fullPath = `${base}/${file}`;
                let f = this.app.vault.getAbstractFileByPath(fullPath);
                if (!f) {
                    try { await this.app.vault.createFolder(base); } catch (e) {}
                    const content = (defaults || []).join('\n');
                    await this.app.vault.create(fullPath, content);
                } else if (defaults && defaults.length > 0) {
                    const current = await this.app.vault.read(f);
                    if (!current.trim()) {
                        await this.app.vault.modify(f, defaults.join('\n'));
                    }
                }
            } catch (e) {}
        };

        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
        await ensureList('–®–∫–æ–ª—ã_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md', ['–û–≥–Ω—è', '–•–æ–ª–æ–¥–∞', '–ò–ª–ª—é–∑–∏–∏', '–ü—Ä–∏—Ä–æ–¥—ã', '–ó–∞—â–∏—Ç—ã']);
        await ensureList('–£—Ä–æ–≤–Ω–∏_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md', ['–ù–æ–≤–∏—á–æ–∫', '–ê–¥–µ–ø—Ç', '–ú–∞—Å—Ç–µ—Ä', '–ê—Ä—Ö–∏–º–∞–≥']);
        await ensureList('–¢–µ–≥–∏_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md', ['–±–æ–µ–≤–æ–µ', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–∫–æ–Ω—Ç—Ä–æ–ª—å', '–∏—Å—Ü–µ–ª–µ–Ω–∏–µ']);
        await ensureList('–ö–ª–∞—Å—Å—ã_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md', ['–ú–∞–≥', '–ñ—Ä–µ—Ü', '–î—Ä—É–∏–¥', '–ë–∞—Ä–¥']);
        await ensureList('–≠—Ñ—Ñ–µ–∫—Ç—ã_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md', ['–£—Ä–æ–Ω', '–û–≥–ª—É—à–µ–Ω–∏–µ', '–ò—Å—Ü–µ–ª–µ–Ω–∏–µ', '–£—Å–∏–ª–µ–Ω–∏–µ']);

        this.spravochniki.school = await readList('–®–∫–æ–ª—ã_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md');
        this.spravochniki.level = await readList('–£—Ä–æ–≤–Ω–∏_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md');
        this.spravochniki.tag = await readList('–¢–µ–≥–∏_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md');
        this.spravochniki.class = await readList('–ö–ª–∞—Å—Å—ã_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md');
        this.spravochniki.effect = await readList('–≠—Ñ—Ñ–µ–∫—Ç—ã_–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.md');
    }

    render() {
        this.contentEl.empty();
        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        const progress = this.contentEl.createEl('div', { cls: 'lt-progress' });
        const progressFill = progress.createEl('div', { cls: 'lt-progress__fill' });
        progressFill.style.width = `${((this.step + 1) / this.steps.length) * 100}%`;
        const stepInfo = this.contentEl.createEl('div', { text: `–®–∞–≥ ${this.step + 1} –∏–∑ ${this.steps.length}` });
        stepInfo.classList.add('lt-subtle');
        // –†–µ–Ω–¥–µ—Ä —à–∞–≥–∞
        this.steps[this.step]();
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        const nav = this.contentEl.createEl('div', { cls: 'lt-nav' });
        if (this.step > 0) {
            const back = this.createButton('secondary', '‚Üê –ù–∞–∑–∞–¥');
            back.onclick = () => { this.step--; this.render(); };
            nav.appendChild(back);
        }
        const next = this.createButton('primary', this.step === this.steps.length - 1 ? '‚úì –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ' : '–î–∞–ª–µ–µ ‚Üí');
        next.onclick = () => {
            if (this.step === this.steps.length - 1) {
                if (!String(this.data.spellName || '').trim()) {
                    new this.Notice('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è!');
                    return;
                }
                this.close();
                if (this.onFinish) this.onFinish(this.data);
            } else {
                this.step++;
                this.render();
            }
        };
        nav.appendChild(next);
    }

    // –û—Å—Ç–∞–ª—å–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä —à–∞–≥–æ–≤ –Ω–∏–∂–µ ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
    renderMainInfo() {
        const header = this.contentEl.createEl('h2', { text: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' });
        header.classList.add('lt-header');
        const help = this.contentEl.createDiv('help-section');
        help.classList.add('lt-card');
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üí° –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –±–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.
                –í—Å–µ –ø–æ–ª—è —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ –∏–º–µ—é—Ç –æ–ø—Ü–∏—é "‚Äî –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚Äî" –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
            </div>
        `;
        new Setting(this.contentEl)
            .setName('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è')
            .addText(t => t.setValue(this.data.spellName).onChange(v => this.data.spellName = v));
        new Setting(this.contentEl)
            .setName('–û–ø–∏—Å–∞–Ω–∏–µ')
            .addTextArea(t => t.setValue(this.data.description).onChange(v => this.data.description = v));
    }

    renderCharacteristics() {
        const header = this.contentEl.createEl('h2', { text: '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è' });
        header.classList.add('lt-header');
        const help = this.contentEl.createDiv('help-section');
        help.classList.add('lt-card');
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">‚ö° –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –£–∫–∞–∂–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è: —à–∫–æ–ª—É –º–∞–≥–∏–∏, —É—Ä–æ–≤–µ–Ω—å, –≤—Ä–µ–º—è –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–∏—è, –¥–∏—Å—Ç–∞–Ω—Ü–∏—é, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
                –í—Å–µ –ø–æ–ª—è —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ –∏–º–µ—é—Ç –æ–ø—Ü–∏—é "‚Äî –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚Äî" –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
            </div>
        `;
        const schoolContainer = this.contentEl.createDiv('school-container');
        new Setting(schoolContainer)
            .setName('–®–∫–æ–ª–∞ –º–∞–≥–∏–∏')
            .addDropdown(d => {
                (this.spravochniki.school || []).forEach(val => d.addOption(val, val));
                d.addOption('manual', '‚Äî –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚Äî');
                d.setValue(this.data.school || '');
                d.onChange(v => { this.data.school = v; this.render(); });
            });
        if (this.data.school === 'manual') {
            new Setting(schoolContainer)
                .setName('–®–∫–æ–ª–∞ –º–∞–≥–∏–∏ (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)')
                .addText(t => {
                    t.setValue(this.data.schoolManual || '');
                    t.onChange(v => this.data.schoolManual = v);
                });
        }
        const levelContainer = this.contentEl.createDiv('level-container');
        new Setting(levelContainer)
            .setName('–£—Ä–æ–≤–µ–Ω—å')
            .addDropdown(d => {
                (this.spravochniki.level || []).forEach(val => d.addOption(val, val));
                d.addOption('manual', '‚Äî –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚Äî');
                d.setValue(this.data.level || '');
                d.onChange(v => { this.data.level = v; this.render(); });
            });
        if (this.data.level === 'manual') {
            new Setting(levelContainer)
                .setName('–£—Ä–æ–≤–µ–Ω—å (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)')
                .addText(t => {
                    t.setValue(this.data.levelManual || '');
                    t.onChange(v => this.data.levelManual = v);
                });
        }
        new Setting(this.contentEl).setName('–í—Ä–µ–º—è –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–∏—è').addText(t => t.setValue(this.data.castingTime).onChange(v => this.data.castingTime = v));
        new Setting(this.contentEl).setName('–î–∏—Å—Ç–∞–Ω—Ü–∏—è').addText(t => t.setValue(this.data.range).onChange(v => this.data.range = v));
        new Setting(this.contentEl).setName('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã').addText(t => t.setValue(this.data.components).onChange(v => this.data.components = v));
        new Setting(this.contentEl).setName('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å').addText(t => t.setValue(this.data.duration).onChange(v => this.data.duration = v));
    }

    renderEffects() {
        const header = this.contentEl.createEl('h2', { text: '–≠—Ñ—Ñ–µ–∫—Ç—ã –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è' });
        header.classList.add('lt-header');
        const help = this.contentEl.createDiv('help-section');
        help.classList.add('lt-card');
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">‚ú® –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –û–ø–∏—à–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–æ 3 —ç—Ñ—Ñ–µ–∫—Ç–æ–≤. –ö–∞–∂–¥—ã–π —ç—Ñ—Ñ–µ–∫—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–µ–Ω –≤—Ä—É—á–Ω—É—é.
            </div>
        `;
        for (let i = 1; i <= 3; i++) {
            const effectContainer = this.contentEl.createDiv(`effect-${i}-container`);
            new Setting(effectContainer)
                .setName(`–≠—Ñ—Ñ–µ–∫—Ç ${i}`)
                .addDropdown(d => {
                    (this.spravochniki.effect || []).forEach(val => d.addOption(val, val));
                    d.addOption('manual', '‚Äî –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚Äî');
                    d.setValue(this.data[`effect${i}Name`] || '');
                    d.onChange(v => { this.data[`effect${i}Name`] = v; this.render(); });
                });
            if (this.data[`effect${i}Name`] === 'manual') {
                new Setting(effectContainer)
                    .setName(`–≠—Ñ—Ñ–µ–∫—Ç ${i} (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)`)
                    .addText(t => {
                        t.setValue(this.data[`effect${i}Manual`] || '');
                        t.onChange(v => this.data[`effect${i}Manual`] = v);
                    });
            }
            new Setting(effectContainer)
                .setName(`–û–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ ${i}`)
                .addTextArea(t => t.setPlaceholder('–û–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞').setValue(this.data[`effect${i}Description`]).onChange(v => this.data[`effect${i}Description`] = v));
        }
    }

    renderTagsClasses() {
        const header = this.contentEl.createEl('h2', { text: '–¢–µ–≥–∏ –∏ –∫–ª–∞—Å—Å—ã –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è' });
        header.classList.add('lt-header');
        const help = this.contentEl.createDiv('help-section');
        help.classList.add('lt-card');
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üè∑Ô∏è –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –£–∫–∞–∂–∏—Ç–µ —Ç–µ–≥–∏ –∏ –∫–ª–∞—Å—Å—ã –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞. –¢–µ–≥–∏ –ø–æ–º–æ–≥–∞—é—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
            </div>
        `;
        for (let i = 1; i <= 3; i++) {
            const tagContainer = this.contentEl.createDiv(`tag-${i}-container`);
            new Setting(tagContainer)
                .setName(`–¢–µ–≥ ${i}`)
                .addDropdown(d => {
                    (this.spravochniki.tag || []).forEach(val => d.addOption(val, val));
                    d.addOption('manual', '‚Äî –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚Äî');
                    d.setValue(this.data[`tag${i}`] || '');
                    d.onChange(v => { this.data[`tag${i}`] = v; this.render(); });
                });
            if (this.data[`tag${i}`] === 'manual') {
                new Setting(tagContainer)
                    .setName(`–¢–µ–≥ ${i} (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)`)
                    .addText(t => {
                        t.setValue(this.data[`tag${i}Manual`] || '');
                        t.onChange(v => this.data[`tag${i}Manual`] = v);
                    });
            }
        }
        for (let i = 1; i <= 2; i++) {
            const classContainer = this.contentEl.createDiv(`class-${i}-container`);
            new Setting(classContainer)
                .setName(`–ö–ª–∞—Å—Å ${i}`)
                .addDropdown(d => {
                    (this.spravochniki.class || []).forEach(val => d.addOption(val, val));
                    d.addOption('manual', '‚Äî –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚Äî');
                    d.setValue(this.data[`class${i}`] || '');
                    d.onChange(v => { this.data[`class${i}`] = v; this.render(); });
                });
            if (this.data[`class${i}`] === 'manual') {
                new Setting(classContainer)
                    .setName(`–ö–ª–∞—Å—Å ${i} (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)`)
                    .addText(t => {
                        t.setValue(this.data[`class${i}Manual`] || '');
                        t.onChange(v => this.data[`class${i}Manual`] = v);
                    });
            }
        }
    }

    renderUsageConditions() {
        const header = this.contentEl.createEl('h2', { text: '–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è' });
        header.classList.add('lt-header');
        const help = this.contentEl.createDiv('help-section');
        help.classList.add('lt-card');
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">‚ö†Ô∏è –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –û–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è: —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
            </div>
        `;
        new Setting(this.contentEl).setName('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è').addTextArea(t => t.setValue(this.data.requirements).onChange(v => this.data.requirements = v));
        new Setting(this.contentEl).setName('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è').addTextArea(t => t.setValue(this.data.limitations).onChange(v => this.data.limitations = v));
        new Setting(this.contentEl).setName('–†–∏—Å–∫–∏').addTextArea(t => t.setValue(this.data.risks).onChange(v => this.data.risks = v));
    }

    renderUsageInstructions() {
        const header = this.contentEl.createEl('h2', { text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é' });
        header.classList.add('lt-header');
        const help = this.contentEl.createDiv('help-section');
        help.classList.add('lt-card');
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üìñ –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è. –í–∫–ª—é—á–∏—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–µ —É–∫–∞–∑–∞–Ω–∏—è, –∂–µ—Å—Ç—ã, –ø—Ä–æ–∏–∑–Ω–æ—Å–∏–º—ã–µ —Å–ª–æ–≤–∞ –∏ –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏.
            </div>
        `;
        new Setting(this.contentEl).setName('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏').addTextArea(t => t.setValue(this.data.usageInstructions).onChange(v => this.data.usageInstructions = v));
    }

    renderCreationHistory() {
        const header = this.contentEl.createEl('h2', { text: '–ò—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è' });
        header.classList.add('lt-header');
        const help = this.contentEl.createDiv('help-section');
        help.classList.add('lt-card');
        help.innerHTML = `
            <div style="font-weight: 600; color: var(--text-accent); margin-bottom: 8px;">üìú –°–ø—Ä–∞–≤–∫–∞</div>
            <div style="color: var(--text-muted); font-size: 14px;">
                –û–ø–∏—à–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è: –∫—Ç–æ –µ–≥–æ —Å–æ–∑–¥–∞–ª, –∫–æ–≥–¥–∞, –∫–∞–∫–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å, –∫–∞–∫–∏–µ –Ω–µ—É–¥–∞—á–∏ –±—ã–ª–∏ –Ω–∞ –ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É.
            </div>
        `;
        new Setting(this.contentEl).setName('–ò—Å—Ç–æ—Ä–∏—è').addTextArea(t => t.setValue(this.data.creationHistory).onChange(v => this.data.creationHistory = v));
    }
}

module.exports = SpellWizardModal;
