/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @module logUtils
 */

// –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const LOG_LEVELS = {
    DEBUG: 0,
    INFO: 1,
    WARN: 2,
    ERROR: 3
};

// –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é DEBUG)
let currentLogLevel = LOG_LEVELS.DEBUG;

// –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
const LOG_PREFIXES = {
    [LOG_LEVELS.DEBUG]: 'üîç',
    [LOG_LEVELS.INFO]: '‚ÑπÔ∏è',
    [LOG_LEVELS.WARN]: '‚ö†Ô∏è',
    [LOG_LEVELS.ERROR]: '‚ùå'
};

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {string|number} level - —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ('debug', 'info', 'warn', 'error' –∏–ª–∏ —á–∏—Å–ª–æ)
 */
function setLogLevel(level) {
    if (typeof level === 'string') {
        const upperLevel = level.toUpperCase();
        if (LOG_LEVELS.hasOwnProperty(upperLevel)) {
            currentLogLevel = LOG_LEVELS[upperLevel];
        }
    } else if (typeof level === 'number' && level >= 0 && level <= 3) {
        currentLogLevel = level;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {number} - —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function getLogLevel() {
    return currentLogLevel;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
 * @param {number} level - —É—Ä–æ–≤–µ–Ω—å —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns {boolean} - true –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
 */
function shouldLog(level) {
    return level >= currentLogLevel;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {string} message - —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param {string} context - –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {number} level - —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} - –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
function formatMessage(message, context = '', level = LOG_LEVELS.INFO) {
    const prefix = LOG_PREFIXES[level] || '';
    const timestamp = new Date().toISOString();
    const contextStr = context ? ` [${context}]` : '';
    
    return `${prefix} ${timestamp}${contextStr}: ${message}`;
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç debug —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param {string} message - —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param {string} context - –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {Object} data - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
function debug(message, context = '', data = null) {
    if (!shouldLog(LOG_LEVELS.DEBUG)) return;
    
    const formattedMessage = formatMessage(message, context, LOG_LEVELS.DEBUG);
    console.log(formattedMessage);
    
    if (data !== null) {
        console.log('üìä –î–∞–Ω–Ω—ã–µ:', data);
    }
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç info —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param {string} message - —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param {string} context - –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {Object} data - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
function info(message, context = '', data = null) {
    if (!shouldLog(LOG_LEVELS.INFO)) return;
    
    const formattedMessage = formatMessage(message, context, LOG_LEVELS.INFO);
    console.log(formattedMessage);
    
    if (data !== null) {
        console.log('üìä –î–∞–Ω–Ω—ã–µ:', data);
    }
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç warning —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param {string} message - —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param {string} context - –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {Object} data - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
function warn(message, context = '', data = null) {
    if (!shouldLog(LOG_LEVELS.WARN)) return;
    
    const formattedMessage = formatMessage(message, context, LOG_LEVELS.WARN);
    console.warn(formattedMessage);
    
    if (data !== null) {
        console.warn('üìä –î–∞–Ω–Ω—ã–µ:', data);
    }
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç error —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param {string} message - —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param {string} context - –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {Error|Object} error - –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
function error(message, context = '', error = null) {
    if (!shouldLog(LOG_LEVELS.ERROR)) return;
    
    const formattedMessage = formatMessage(message, context, LOG_LEVELS.ERROR);
    console.error(formattedMessage);
    
    if (error instanceof Error) {
        console.error('üö® –û—à–∏–±–∫–∞:', error.message);
        console.error('üìç –°—Ç–µ–∫:', error.stack);
    } else if (error !== null) {
        console.error('üìä –î–∞–Ω–Ω—ã–µ:', error);
    }
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø—É —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 * @param {string} groupName - –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
 * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
function group(groupName, callback) {
    if (!shouldLog(LOG_LEVELS.INFO)) return;
    
    console.group(`üìÅ ${groupName}`);
    try {
        callback();
    } finally {
        console.groupEnd();
    }
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø—É —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º–∞—è)
 * @param {string} groupName - –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
 * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
function groupCollapsed(groupName, callback) {
    if (!shouldLog(LOG_LEVELS.INFO)) return;
    
    console.groupCollapsed(`üìÅ ${groupName}`);
    try {
        callback();
    } finally {
        console.groupEnd();
    }
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö
 * @param {Array|Object} data - –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
 * @param {string} context - –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
function table(data, context = '') {
    if (!shouldLog(LOG_LEVELS.DEBUG)) return;
    
    const contextStr = context ? ` [${context}]` : '';
    console.log(`üìä –¢–∞–±–ª–∏—Ü–∞${contextStr}:`);
    console.table(data);
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
 * @param {string} label - –º–µ—Ç–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
 * @param {Function} fn - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
 * @param {string} context - –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<any>} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
 */
async function time(label, fn, context = '') {
    if (!shouldLog(LOG_LEVELS.DEBUG)) {
        return await fn();
    }
    
    const contextStr = context ? ` [${context}]` : '';
    const fullLabel = `‚è±Ô∏è ${label}${contextStr}`;
    
    console.time(fullLabel);
    try {
        const result = await fn();
        return result;
    } finally {
        console.timeEnd(fullLabel);
    }
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
 * @param {string} label - –º–µ—Ç–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
 * @param {Function} fn - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
 * @param {string} context - –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {any} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
 */
function timeSync(label, fn, context = '') {
    if (!shouldLog(LOG_LEVELS.DEBUG)) {
        return fn();
    }
    
    const contextStr = context ? ` [${context}]` : '';
    const fullLabel = `‚è±Ô∏è ${label}${contextStr}`;
    
    console.time(fullLabel);
    try {
        const result = fn();
        return result;
    } finally {
        console.timeEnd(fullLabel);
    }
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * @param {string} context - –∫–æ–Ω—Ç–µ–∫—Å—Ç –ª–æ–≥–≥–µ—Ä–∞
 * @returns {Object} - –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
function createLogger(context) {
    return {
        debug: (message, data = null) => debug(message, context, data),
        info: (message, data = null) => info(message, context, data),
        warn: (message, data = null) => warn(message, context, data),
        error: (message, error = null) => error(message, context, error),
        group: (groupName, callback) => group(groupName, callback),
        groupCollapsed: (groupName, callback) => groupCollapsed(groupName, callback),
        table: (data) => table(data, context),
        time: (label, fn) => time(label, fn, context),
        timeSync: (label, fn) => timeSync(label, fn, context)
    };
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ–∫—É—â–µ–π —Å–±–æ—Ä–∫–æ–π
if (typeof window !== 'undefined') {
    window.logUtils = {
        setLogLevel,
        getLogLevel,
        debug,
        info,
        warn,
        error,
        group,
        groupCollapsed,
        table,
        time,
        timeSync,
        createLogger,
        LOG_LEVELS
    };
}

// Node.js —ç–∫—Å–ø–æ—Ä—Ç—ã —É–±—Ä–∞–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å build.php
