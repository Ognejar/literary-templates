/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 * @module errorUtils
 */

/**
 * –û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
 * @param {Function} fn - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param {Function} onError - —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 * @param {string} context - –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<any>} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
 */
async function wrapAsync(fn, onError, context = '') {
    try {
        return await fn();
    } catch (error) {
        if (onError) {
            onError(error, context);
        } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${context || '—Ñ—É–Ω–∫—Ü–∏–∏'}:`, error);
        }
        throw error;
    }
}

/**
 * –û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
 * @param {Function} fn - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param {Function} onError - —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 * @param {string} context - –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {any} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
 */
function wrapSync(fn, onError, context = '') {
    try {
        return fn();
    } catch (error) {
        if (onError) {
            onError(error, context);
        } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${context || '—Ñ—É–Ω–∫—Ü–∏–∏'}:`, error);
        }
        throw error;
    }
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –æ—à–∏–±–∫—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
 * @param {string} message - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param {string} context - –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
 * @param {Error} cause - –ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Error} - –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
 */
function createContextError(message, context, cause = null) {
    const error = new Error(`${context ? `[${context}] ` : ''}${message}`);
    if (cause) {
        error.cause = cause;
    }
    return error;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–æ–π
 * @param {any} obj - –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} - true –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π
 */
function isError(obj) {
    return obj instanceof Error || (obj && typeof obj.message === 'string');
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–∫–ª—é—á–∞—è –ø—Ä–∏—á–∏–Ω—É
 * @param {Error} error - –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
 * @returns {string} - –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 */
function getFullErrorMessage(error) {
    if (!isError(error)) {
        return String(error);
    }
    
    let message = error.message;
    
    if (error.cause) {
        const causeMessage = getFullErrorMessage(error.cause);
        message += `\n–ü—Ä–∏—á–∏–Ω–∞: ${causeMessage}`;
    }
    
    if (error.stack) {
        message += `\n–°—Ç–µ–∫: ${error.stack}`;
    }
    
    return message;
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 * @param {Error|string} error - –æ—à–∏–±–∫–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param {string} context - –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {Object} additionalData - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
function logError(error, context = '', additionalData = null) {
    const contextStr = context ? ` [${context}]` : '';
    
    if (isError(error)) {
        console.error(`‚ùå –û—à–∏–±–∫–∞${contextStr}:`, error.message);
        if (error.stack) {
            console.error('üìç –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:', error.stack);
        }
        if (error.cause) {
            console.error('üîó –ü—Ä–∏—á–∏–Ω–∞:', error.cause);
        }
    } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞${contextStr}:`, error);
    }
    
    if (additionalData) {
        console.error('üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', additionalData);
    }
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * @param {string} context - –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
 * @returns {Function} - —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */
function createDefaultErrorHandler(context) {
    return (error, errorContext = '') => {
        const fullContext = errorContext ? `${context}:${errorContext}` : context;
        logError(error, fullContext);
    };
}

/**
 * –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
 * @param {Function} fn - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param {number} maxRetries - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
 * @param {number} delay - –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @param {Function} onRetry - —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<any>} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
 */
async function retryOnError(fn, maxRetries = 3, delay = 1000, onRetry = null) {
    let lastError;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            return await fn();
        } catch (error) {
            lastError = error;
            
            if (attempt < maxRetries) {
                if (onRetry) {
                    onRetry(error, attempt, maxRetries);
                }
                
                console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ ${delay}ms...`);
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
    }
    
    throw lastError;
}

/**
 * –°–æ–∑–¥–∞—ë—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
 * @param {Function} fn - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param {Object} options - –æ–ø—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
 * @param {number} options.maxRetries - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
 * @param {number} options.delay - –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
 * @param {Function} options.onRetry - —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
 * @returns {Function} - —Ñ—É–Ω–∫—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º
 */
function createRetryFunction(fn, options = {}) {
    const { maxRetries = 3, delay = 1000, onRetry = null } = options;
    
    return async (...args) => {
        return await retryOnError(
            () => fn(...args),
            maxRetries,
            delay,
            onRetry
        );
    };
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤ Promise.all —Å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param {Promise[]} promises - –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤
 * @param {Function} onError - —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 * @returns {Promise<Array>} - –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ—à–∏–±–∫–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ null)
 */
async function handlePromiseAllErrors(promises, onError) {
    const results = await Promise.allSettled(promises);
    
    return results.map((result, index) => {
        if (result.status === 'fulfilled') {
            return result.value;
        } else {
            if (onError) {
                onError(result.reason, index);
            }
            return null;
        }
    });
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é —Ñ—É–Ω–∫—Ü–∏–∏
 * @param {Function} fn - –∏—Å—Ö–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 * @param {any} defaultValue - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
 * @param {Function} onError - —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Function} - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
 */
function createSafeFunction(fn, defaultValue = null, onError = null) {
    return async (...args) => {
        try {
            return await fn(...args);
        } catch (error) {
            if (onError) {
                onError(error, args);
            }
            return defaultValue;
        }
    };
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ–∫—É—â–µ–π —Å–±–æ—Ä–∫–æ–π
if (typeof window !== 'undefined') {
    window.errorUtils = {
        wrapAsync,
        wrapSync,
        createContextError,
        isError,
        getFullErrorMessage,
        logError,
        createDefaultErrorHandler,
        retryOnError,
        createRetryFunction,
        handlePromiseAllErrors,
        createSafeFunction
    };
}

// Node.js —ç–∫—Å–ø–æ—Ä—Ç—ã —É–±—Ä–∞–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å build.php
